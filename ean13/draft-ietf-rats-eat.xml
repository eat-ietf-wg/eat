<?xml version='1.0' encoding='utf-8'?>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.4.13 -->
<!DOCTYPE rfc SYSTEM "rfc2629-xhtml.ent">
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" obsoletes="" updates="" submissionType="IETF" xml:lang="en" tocInclude="true" tocDepth="4" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.8.0 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@island-resort.com</email>
      </address>
    </author>
    <author initials="M." surname="Ballesteros" fullname="Miguel Ballesteros">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 4299</phone>
        <email>mballest@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <date year="2021" month="June" day="03"/>
    <area>Internet</area>
    <workgroup>RATS Working Group</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides a signed (attested) set of
claims that describe state and characteristics of an entity, typically
a device like a phone or an IoT device.  These claims are used by a
relying party to determine how much it wishes to trust the entity.</t>
      <t>An EAT is either a CWT or JWT with some attestation-oriented 
claims. To a large degree, all this document does is extend
CWT and JWT.</t>
    </abstract>
    <note>
      <name>Contributing</name>
      <t>TBD</t>
    </note>
  </front>
  <middle>
    <section anchor="introduction" numbered="true" toc="default">
      <name>Introduction</name>
      <t>Remote device attestation is a fundamental service that allows a remote
device such as a mobile phone, an Internet-of-Things (IoT) device, or
other endpoint to prove itself to a relying party, a server or a
service.  This allows the relying party to know some characteristics
about the device and decide whether it trusts the device.</t>
      <t>Remote attestation is a fundamental service that can underlie other
protocols and services that need to know about the trustworthiness of
the device before proceeding. One good example is biometric
authentication where the biometric matching is done on the device. The
relying party needs to know that the device is one that is known to do
biometric matching correctly.  Another example is content protection
where the relying party wants to know the device will protect the
data.  This generalizes on to corporate enterprises that might want to
know that a device is trustworthy before allowing corporate data to be
accessed by it.</t>
      <t>The notion of attestation here is large and may include, but is not
limited to the following:</t>
      <ul spacing="normal">
        <li>Proof of the make and model of the device hardware (HW)</li>
        <li>Proof of the make and model of the device processor, particularly
for security-oriented chips</li>
        <li>Measurement of the software (SW) running on the device</li>
        <li>Configuration and state of the device</li>
        <li>Environmental characteristics of the device such as its GPS location</li>
      </ul>
      <section anchor="cwt-jwt-and-uccs" numbered="true" toc="default">
        <name>CWT, JWT and UCCS</name>
        <t>For flexibility and ease of imlpementation in a wide variety of environments, EATs can be either CBOR <xref target="RFC8949" format="default"/> or JSON <xref target="ECMAScript" format="default"/> format.
This specification simultaneously describes both formats.</t>
        <t>An EAT is either a CWT as defined in <xref target="RFC8392" format="default"/>, a UCCS as defined in <xref target="UCCS.Draft" format="default"/>, or a JWT as defined in <xref target="RFC7519" format="default"/>.
This specification extends those specifications with additional claims for attestation.</t>
        <t>The identification of a protocol element as an EAT, whether CBOR or JSON format, follows the general conventions used by CWT, JWT and UCCS.
Largely this depends on the protocol carrying the EAT.
In some cases it may be by content type (e.g., MIME type).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
      </section>
      <section anchor="cddl" numbered="true" toc="default">
        <name>CDDL</name>
        <t>This specification uses CDDL, <xref target="RFC8610" format="default"/>, as the primary formalism to
define each claim.  The implementor then interprets the CDDL to come
to either the CBOR <xref target="RFC8949" format="default"/> or JSON <xref target="ECMAScript" format="default"/>
representation. In the case of JSON, Appendix E of <xref target="RFC8610" format="default"/> is
followed. Additional rules are given in <xref target="jsoninterop" format="default"/> of this
document where Appendix E is insufficient.  (Note that this is not to
define a general means to translate between CBOR and JSON, but only to
define enough such that the claims defined in this document can be
rendered unambiguously in JSON).</t>
        <t>The CWT specification was authored before CDDL was available and did not use it.
This specification includes a CDDL definition of most of what is described in <xref target="RFC8392" format="default"/>.</t>
      </section>
      <section anchor="entity-overview" numbered="true" toc="default">
        <name>Entity Overview</name>
        <t>An "entity" can be any device or device subassembly ("submodule") that
can generate its own attestation in the form of an EAT.  The
attestation should be cryptographically verifiable by the EAT
consumer. An EAT at the device-level can be composed of several
submodule EAT's.</t>
        <t>Modern devices such as a mobile phone have many different execution
environments operating with different security levels. For example, it
is common for a mobile phone to have an "apps" environment that runs
an operating system (OS) that hosts a plethora of downloadable
apps. It may also have a TEE (Trusted Execution Environment) that is
distinct, isolated, and hosts security-oriented functionality like
biometric authentication. Additionally, it may have an eSE (embedded
Secure Element) - a high security chip with defenses against HW
attacks that is used to produce attestations.  This device attestation format
allows the attested data to be tagged at a security level from which
it originates.  In general, any discrete execution environment that
has an identifiable security level can be considered an entity.</t>
      </section>
      <section anchor="use-as-evidence-and-attestation-results" numbered="true" toc="default">
        <name>Use as Evidence and Attestation Results</name>
        <t>Here, normative reference is made to <xref target="RATS-Architecture" format="default"/>, particularly the definition of Evidence, the Verifier, Attestation Results and the Relying Party.
Per Figure 1 in <xref target="RATS-Architecture" format="default"/>, Evidence is a protocol message that goes from the Attester to the Verifier and Attestation Results a message that goes from the Verifier to the Relying Party.
EAT is defined such that it can be used to represent either Evidence, Attestation Results or both.
No claims defined here are considered exclusive to or are prohibited in either use.
It is useful to create EAT profiles as described in <xref target="profiles" format="default"/> for either use.</t>
        <t>It is useful to characterize the relationship of claims in Evidence to those in Attestation Results.</t>
        <t>Many claims in Evidence simply will pass through the Verifier to the Relying Party without modification.
They will be verified as authentic from the device by the Verifier just through normal verification of the Attester's signature.
They will be protected from modification when they are conveyed to the Relying Party by whatever means is used to protect Attestation Results. 
(The details of that protection are out of scope of this document.)</t>
        <t>Some claims in Evidence will be verified by the Verifier by comparison to Reference Values.
In this case the claims in Evidence will not likely be conveyed to the Relying Party.
Instead, some claim indicating they were checked may be added to the Attestation Results or it may be tacitly known that the Verifier always does this check.</t>
        <t>In some cases the Verifier may provide privacy-preserving functionality by stripping or modifying claims that do not posses sufficient privacy-preserving characteristics.</t>
      </section>
      <section anchor="eat-operating-models" numbered="true" toc="default">
        <name>EAT Operating Models</name>
        <t>TODO: Rewrite (or eliminate) this section in light of the RATS architecture draft.</t>
        <t>At least the following three participants exist in all EAT operating
models. Some operating models have additional participants.</t>
        <dl>
          <dt>
The Entity.  </dt>
          <dd>
            <t>This is the phone, the IoT device, the sensor, the sub-assembly or
such that the attestation provides information about.</t>
          </dd>
          <dt>
The Manufacturer.  </dt>
          <dd>
            <t>The company that made the entity.  This may be a chip vendor, a
circuit board module vendor or a vendor of finished consumer products.</t>
          </dd>
          <dt>
The Relying Party.  </dt>
          <dd>
            <t>The server, service or company that makes use of the information in
the EAT about the entity.</t>
          </dd>
        </dl>
        <t>In all operating models, the manufacturer provisions some secret
attestation key material (AKM) into the entity during manufacturing.
This might be during the manufacturer of a chip at a fabrication
facility (fab) or during final assembly of a consumer product or any
time in between. This attestation key material is used for signing
EATs.</t>
        <t>In all operating models, hardware and/or software on the entity create
an EAT of the format described in this document. The EAT is always
signed by the attestation key material provisioned by the
manufacturer.</t>
        <t>In all operating models, the relying party must end up knowing that
the signature on the EAT is valid and consistent with data from claims
in the EAT.  This can happen in many different ways. Here are some
examples.</t>
        <ul spacing="normal">
          <li>The EAT is transmitted to the relying party. The relying party gets
corresponding key material (e.g. a root certificate) from the
manufacturer. The relying party performs the verification.</li>
          <li>The EAT is transmitted to the relying party. The relying party
transmits the EAT to a verification service offered by the
manufacturer. The server returns the validated claims.</li>
          <li>The EAT is transmitted directly to a verification service, perhaps
operated by the manufacturer or perhaps by another party. It
verifies the EAT and makes the validated claims available to the
relying party. It may even modify the claims in some way and re-sign
the EAT (with a different signing key).</li>
        </ul>
        <t>All these operating models are supported and there is no preference
of one over the other. It is important to support this variety of
operating models to generally facilitate deployment and to allow for
some special scenarios. One special scenario has a validation service
that is monetized, most likely by the manufacturer.  In another, a
privacy proxy service processes the EAT before it is transmitted to
the relying party. In yet another, symmetric key material is used for
signing. In this case the manufacturer should perform the
verification, because any release of the key material would enable a
participant other than the entity to create valid signed EATs.</t>
      </section>
      <section anchor="what-is-not-standardized" numbered="true" toc="default">
        <name>What is Not Standardized</name>
        <t>The following is not standardized for EAT, just the same they are not
standardized for CWT or JWT.</t>
        <section anchor="transmission-protocol" numbered="true" toc="default">
          <name>Transmission Protocol</name>
          <t>EATs may be transmitted by any protocol the same as CWTs and JWTs. For
example, they might be added in extension fields of other protocols,
bundled into an HTTP header, or just transmitted as files. This
flexibility is intentional to allow broader adoption. This flexibility
is possible because EAT's are self-secured with signing (and possibly
additionally with encryption and anti-replay). The transmission
protocol is not required to fulfill any additional security
requirements.</t>
          <t>For certain devices, a direct connection may not exist between the
EAT-producing device and the Relying Party. In such cases, the EAT
should be protected against malicious access. The use of COSE and JOSE
allows for signing and encryption of the EAT. Therefore, even if the
EAT is conveyed through intermediaries between the device and Relying
Party, such intermediaries cannot easily modify the EAT payload or
alter the signature.</t>
        </section>
        <section anchor="signing-scheme" numbered="true" toc="default">
          <name>Signing Scheme</name>
          <t>The term "signing scheme" is used to refer to the system that includes
end-end process of establishing signing attestation key material in
the entity, signing the EAT, and verifying it. This might involve key
IDs and X.509 certificate chains or something similar but
different. The term "signing algorithm" refers just to the algorithm
ID in the COSE signing structure. No particular signing algorithm or
signing scheme is required by this standard.</t>
          <t>There are three main implementation issues driving this. First, secure
non-volatile storage space in the entity for the attestation key
material may be highly limited, perhaps to only a few hundred bits, on
some small IoT chips. Second, the factory cost of provisioning key
material in each chip or device may be high, with even millisecond
delays adding to the cost of a chip. Third, privacy-preserving signing
schemes like ECDAA (Elliptic Curve Direct Anonymous Attestation) are
complex and not suitable for all use cases.</t>
          <t>Over time to faciliate interoperability, some signing schemes may be
defined in EAT profiles or other documents either in the IETF or outside.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology" numbered="true" toc="default">
      <name>Terminology</name>
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in
BCP 14 <xref target="RFC2119" format="default"/> <xref target="RFC8174" format="default"/> when, and only when, they appear in all
capitals, as shown here.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519" format="default"/>, COSE
<xref target="RFC8152" format="default"/>, and CWT <xref target="RFC8392" format="default"/>.</t>
      <dl>
        <dt>
Claim Name.  </dt>
        <dd>
          <t>The human-readable name used to identify a claim.</t>
        </dd>
        <dt>
Claim Key.  </dt>
        <dd>
          <t>The CBOR map key or JSON name used to identify a claim.</t>
        </dd>
        <dt>
Claim Value.  </dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>
CWT Claims Set.  </dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
        <dt>
Attestation Key Material (AKM).  </dt>
        <dd>
          <t>The key material used to sign the EAT token. If it is done
symmetrically with HMAC, then this is a simple symmetric key.
If it is done with ECC, such as an IEEE DevID <xref target="IEEE.802.1AR" format="default"/>, then this
is the private part of the EC key pair. If ECDAA 
is used, (e.g., as used by Enhanced Privacy ID, i.e. EPID) then it is the key material 
needed for ECDAA.</t>
        </dd>
      </dl>
    </section>
    <section anchor="the-claims" numbered="true" toc="default">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation. It also
mentions several claims defined by CWT and JWT that are particularly
important for EAT.</t>
      <t>Note also:
* Any claim defined for CWT or JWT may be used in an EAT including 
  those in the CWT <xref target="IANA.CWT.Claims" format="default"/> and JWT IANA <xref target="IANA.JWT.Claims" format="default"/>
  claims registries.</t>
      <ul spacing="normal">
        <li>All claims are optional</li>
        <li>No claims are mandatory</li>
        <li>All claims that are not understood by implementations MUST be ignored</li>
      </ul>
      <t>There are no default values or meanings assigned to absent claims
other than they are not reported. The reason for a claim's absence may
be the implementation not supporting the claim, an inability to
determine its value, or a preference to report in a different way such
as a proprietary claim.</t>
      <t>CDDL along with text descriptions is used to define each claim
indepdent of encoding.  Each claim is defined as a CDDL group (the
group is a general aggregation and type definition feature of
CDDL). In the encoding section <xref target="encoding" format="default"/>, the CDDL groups turn into
CBOR map entries and JSON name/value pairs.</t>
      <t>Map labels are assigned both an integer and string value.
CBOR encoded tokens MUST use only integer labels.
JSON encoded tokens MUST use only string labels.</t>
      <t>TODO: add paragraph here about use for Attestation Evidence and for Results.</t>
      <section anchor="token-id-claim-cti-and-jti" numbered="true" toc="default">
        <name>Token ID Claim (cti and jti)</name>
        <t>CWT defines the "cti" claim. JWT defines the "jti" claim. These are
equivalent to each other in EAT and carry a unique token identifier as
they do in JWT and CWT.  They may be used to defend against re use of
the token but are distinct from the nonce that is used by the relying
party to guarantee freshness and defend against replay.</t>
      </section>
      <section anchor="timestamp-claim-iat" numbered="true" toc="default">
        <name>Timestamp claim (iat)</name>
        <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
        <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even 
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
        <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. No token may contain an iat claim in
float-point format. Any recipient of a token with a floating-point
format iat claim may consider it an error.  A 64-bit integer 
representation of epoch time can represent a range of +/- 500 billion
years, so the only point of a floating-point timestamp is to 
have precession greater than one second. This is not needed for EAT.</t>
      </section>
      <section anchor="nonce-claim-nonce" numbered="true" toc="default">
        <name>Nonce Claim (nonce)</name>
        <t>All EATs should have a nonce to prevent replay attacks. The nonce is
generated by the relying party, the end consumer of the token. It is
conveyed to the entity over whatever transport is in use before the
token is generated and then included in the token as the nonce claim.</t>
        <t>This documents the nonce claim for registration in the IANA CWT 
claims registry. This is equivalent to the JWT nonce claim that is
already registered.</t>
        <t>The nonce must be at least 8 bytes (64 bits) as fewer are unlikely
to be secure. A maximum of 64 bytes is set to limit the memory
a constrained implementation uses. This size range is not set
for the already-registered JWT nonce, but it should follow
this size recommendation when used in an EAT.</t>
        <t>Multiple nonces are allowed to accommodate multistage verification
and consumption.</t>
        <section anchor="nonce-cddl" numbered="true" toc="default">
          <name>nonce CDDL</name>
          <sourcecode type="CDDL">
nonce-type = bstr .size (8..64)

nonce-claim = (
    nonce =&gt; nonce-type / [ 2* nonce-type ]
)
</sourcecode>
        </section>
      </section>
      <section anchor="universal-entity-id-claim-ueid" numbered="true" toc="default">
        <name>Universal Entity ID Claim (ueid)</name>
        <t>UEID's identify individual manufactured entities / devices such as a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire device or a submodule or
subsystem. It does not identify types, models or classes of
devices. It is akin to a serial number, though it does not have to be
sequential.</t>
        <t>UEID's must be universally and globally unique across manufacturers
and countries. UEIDs must also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then relying parties receiving them will have
to track other characteristics of the device to keep devices distinct
between manufacturers).</t>
        <t>There are privacy considerations for UEID's. See <xref target="ueidprivacyconsiderations" format="default"/>.</t>
        <t>The UEID is permanent. It never change for a given
device / entity.</t>
        <t>UEIDs are variable length. All implementations MUST be able to receive
UEIDs that are 33 bytes long (1 type byte and 256 bits).  The
recommended maximum sent is also 33 bytes.</t>
        <t>When the entity constructs the UEID, the first byte is a type and the
following bytes the ID for that type. Several types are allowed to
accommodate different industries and different manufacturing processes
and to give options to avoid paying fees for certain types of
manufacturer registrations.</t>
        <t>Creation of new types requires a Standards Action <xref target="RFC8126" format="default"/>.</t>
        <table anchor="ueid-types-table" align="center">
          <name>UEID Composition Types</name>
          <thead>
            <tr>
              <th align="left">Type Byte</th>
              <th align="left">Type Name</th>
              <th align="left">Specification</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">0x01</td>
              <td align="left">RAND</td>
              <td align="left">This is a 128, 192 or 256 bit random number generated once and stored in the device. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the device and stored. It may not be smaller than 128 bits.</td>
            </tr>
            <tr>
              <td align="left">0x02</td>
              <td align="left">IEEE EUI</td>
              <td align="left">This makes use of the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-device identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while devices with multiple network interfaces may have multiple MAC addresses, there is only one UEID for a device) <xref target="IEEE.802-2001" format="default"/>, <xref target="OUI.Guide" format="default"/></td>
            </tr>
            <tr>
              <td align="left">0x03</td>
              <td align="left">IMEI</td>
              <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which SHALL be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded SHALL NOT include Luhn checksum or SVN information. <xref target="ThreeGPP.IMEI" format="default"/></td>
            </tr>
          </tbody>
        </table>
        <t>UEID's are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
        <t>The consumer (the relying party) of a UEID MUST treat a UEID as a
completely opaque string of bytes and not make any use of its internal
structure. For example, they should not use the OUI part of a type
0x02 UEID to identify the manufacturer of the device. Instead they
should use the oemid claim that is defined elsewhere. The reasons for
this are:</t>
        <ul spacing="normal">
          <li>UEIDs types may vary freely from one manufacturer to the next.</li>
          <li>New types of UEIDs may be created. For example, a type 0x07 UEID may
be created based on some other manufacturer registration scheme.</li>
          <li>Device manufacturers are allowed to change from one type of UEID to
another anytime they want. For example, they may find they can
optimize their manufacturing by switching from type 0x01 to type
0x02 or vice versa.  The main requirement on the manufacturer is
that UEIDs be universally unique.</li>
        </ul>
        <section anchor="ueid-cddl" numbered="true" toc="default">
          <name>ueid CDDL</name>
          <sourcecode type="CDDL">
ueid-type = bstr .size (7..33)

ueid-claim = (
     ueid =&gt; ueid-type
)
</sourcecode>
        </section>
      </section>
      <section anchor="semi-permanent-ueids-sueids" numbered="true" toc="default">
        <name>Semi-permanent UEIDs (SUEIDs)</name>
        <t>An SEUID is of the same format as a UEID, but it may change to a different value on device life-cycle events.
Examples of these events are change of ownership, factory reset and on-boarding into an IoT device management system.
A device may have both a UEID and SUEIDs, neither, one or the other.</t>
        <t>There may be multiple SUEIDs.
Each one has a text string label the purpose of which is to distinguish it from others in the token.
The label may name the purpose, application or type of the SUEID.
Typically, there will be few SUEDs so there is no need for a formal labeling mechanism like a registry.
The EAT profile may describe how SUEIDs should be labeled.
If there is only one SUEID, the claim remains a map and there still must be a label.
For example, the label for the SUEID used by FIDO Onboarding Protocol could simply be "FDO".</t>
        <t>There are privacy considerations for SUEID's. See <xref target="ueidprivacyconsiderations" format="default"/>.</t>
        <sourcecode type="CDDL">
sueids-type = {
    + tstr =&gt; ueid-type
}

sueids-claim = (
     sueid =&gt; sueids-type
)
</sourcecode>
      </section>
      <section anchor="oemid" numbered="true" toc="default">
        <name>OEM Identification by IEEE (oemid)</name>
        <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE.RA" format="default"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide" format="default"/> and provides a lookup
services <xref target="OUI.Lookup" format="default"/></t>
        <t>Companies that have more than one of these IDs or MAC address blocks
should pick one and prefer that for all their devices.</t>
        <t>Commonly, these are expressed in Hexadecimal Representation
<xref target="IEEE.802-2001" format="default"/> also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48. For JSON encoded
tokens, this is further base64url encoded.</t>
        <section anchor="oemid-cddl" numbered="true" toc="default">
          <name>oemid CDDL</name>
          <sourcecode type="CDDL">
oemid-claim = (
    oemid =&gt; bstr
)
</sourcecode>
        </section>
      </section>
      <section anchor="hardware-version-claims-hardware-version-claims" numbered="true" toc="default">
        <name>Hardware Version Claims (hardware-version-claims)</name>
        <t>The hardware version can be claimed at three different levels, the chip, the circuit board and the final device assembly.
An EAT can include any combination these claims.</t>
        <t>The hardware version is a simple text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID" format="default"/>.</t>
        <t>The hardware version can also be given by a 13-digit <xref target="EAN-13" format="default"/>.
A new CoSWID version scheme is registered with IANA by this document in <xref target="registerversionscheme" format="default"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.</t>
        <sourcecode type="CDDL">
chip-version-claim = (
    chip-version =&gt; tstr
)

chip-version-scheme-claim = (
    chip-version-scheme =&gt; $version-scheme
)

board-version-claim = (
    board-version =&gt; tstr
)

board-version-scheme-claim = (
    board-version-scheme =&gt; $version-scheme
)

device-version-claim = (
    device-version =&gt; tstr
)

device-version-scheme-claim = (
    device-version-scheme =&gt; $version-scheme
)


hardware-version-claims = (
    ? chip-version-claim,
    ? board-version-claim,
    ? device-version-claim,
    ? chip-version-scheme-claim,
    ? board-version-scheme-claim,
    ? device-version-scheme-claim,
)

</sourcecode>
      </section>
      <section anchor="software-description-and-version" numbered="true" toc="default">
        <name>Software Description and Version</name>
        <t>TODO: Add claims that reference CoSWID.</t>
      </section>
      <section anchor="the-security-level-claim-security-level" numbered="true" toc="default">
        <name>The Security Level Claim (security-level)</name>
        <t>This claim characterizes the device/entity 
ability to defend against attacks aimed at capturing the signing
key, forging claims and at forging EATs. This is done by
defining four security levels as described below. This is similar
to the key protection types defined by the Fast Identity Online (FIDO) Alliance <xref target="FIDO.Registry" format="default"/>.</t>
        <t>These claims describe security environment and countermeasures
available on the end-entity / client device where the attestation key
reside and the claims originate.</t>
        <dl>
          <dt>
1 -- Unrestricted  </dt>
          <dd>
            <t>There is some expectation that implementor will
protect the attestation signing keys at this level. Otherwise
the EAT provides no meaningful security assurances.</t>
          </dd>
          <dt>
2-- Restricted  </dt>
          <dd>
            <t>Entities at this level should not be general-purpose
operating environments that host features such as app download
systems, web browsers and complex productivity applications.
It is akin to the Secure Restricted level (see below) without the
security orientation. Examples include a Wi-Fi subsystem,
an IoT camera, or sensor device.</t>
          </dd>
          <dt>
3 -- Secure Restricted  </dt>
          <dd>
            <t>Entities at this level must meet the criteria defined by FIDO Allowed
Restricted Operating Environments <xref target="FIDO.AROE" format="default"/>. Examples include TEE's and 
schemes using virtualization-based security. Like the FIDO security goal,
security at this level is aimed at defending well against large-scale
network / remote attacks against the device.</t>
          </dd>
          <dt>
4 -- Hardware  </dt>
          <dd>
            <t>Entities at this level must include substantial defense 
against physical or electrical attacks against the device itself.
It is assumed any potential attacker has captured the device and can 
disassemble it. Example include TPMs and Secure Elements.</t>
          </dd>
        </dl>
        <t>The entity should claim the highest security level it achieves and no higher.
This set is not extensible so as to provide a common interoperable description of security level to the relying party.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of security and its own proprietary claim as a refined indication.</t>
        <t>This claim is not intended as a replacement for a proper end-device
security certification schemes such as those based on FIPS 140 <xref target="FIPS-140" format="default"/> 
or those based on Common Criteria <xref target="Common.Criteria" format="default"/>. The 
claim made here is solely a self-claim made by the Entity Originator.</t>
        <section anchor="security-level-cddl" numbered="true" toc="default">
          <name>security-level CDDL</name>
          <sourcecode type="CDDL">
security-level-cbor-type = &amp;(
    unrestricted: 1,
    restricted: 2,
    secure-restricted: 3,
    hardware: 4
)

security-level-json-type = 
    "unrestricted" /
    "restricted" /
    "secure-restricted" /
    "hardware"

security-level-claim = (
    security-level =&gt; security-level-cbor-type / security-level-json-type
)
</sourcecode>
        </section>
      </section>
      <section anchor="secure-boot-claim-secure-boot" numbered="true" toc="default">
        <name>Secure Boot Claim (secure-boot)</name>
        <t>The value of true indicates secure boot is enabled. Secure boot is
considered enabled when base software, the firmware and operating
system, are under control of the entity manufacturer identified in the
oemid claimd described in <xref target="oemid" format="default"/>. This may because the software is
in ROM or because it is cryptographically authenticated or some
combination of the two or other.</t>
        <section anchor="secure-boot-cddl" numbered="true" toc="default">
          <name>secure-boot CDDL</name>
          <sourcecode type="CDDL">
secure-boot-claim = (
    secure-boot =&gt; bool
)
</sourcecode>
        </section>
      </section>
      <section anchor="debug-status-claim-debug-status" numbered="true" toc="default">
        <name>Debug Status Claim (debug-status)</name>
        <t>This applies to system-wide or submodule-wide debug facilities of the
target device / submodule like JTAG and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
        <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-device
public keys.</t>
        <t>As with all claims, the absence of the debug level claim means
it is not reported. A conservative interpretation might assume
the Not Disabled state. It could however be that it is reported
in a proprietary claim.</t>
        <t>This claim is not extensible so as to provide a common interoperable description of debug status to the relying party.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
        <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
        <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The verifier or relying party receiving an EAT cannot
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
        <t>An individual target device / submodule may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
        <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the relying party can know the debug status
of the submodules since there is no inheritance.</t>
        <section anchor="enabled" numbered="true" toc="default">
          <name>Enabled</name>
          <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
        </section>
        <section anchor="disabled" numbered="true" toc="default">
          <name>Disabled</name>
          <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future, and it may also be
possible that they were enabled in the past after the
target device/sub-system booted/started, but they are currently disabled.</t>
        </section>
        <section anchor="disabled-since-boot" numbered="true" toc="default">
          <name>Disabled Since Boot</name>
          <t>This level indicates all debug facilities are currently disabled and
have been so since the target device/sub-system booted/started.</t>
        </section>
        <section anchor="disabled-permanently" numbered="true" toc="default">
          <name>Disabled Permanently</name>
          <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer cannot enable them. Only
the manufacturer indicated in the OEMID claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
        </section>
        <section anchor="disabled-fully-and-permanently" numbered="true" toc="default">
          <name>Disabled Fully and Permanently</name>
          <t>This level indicates that all debug capabilities for the target
device/sub-module are permanently disabled.</t>
        </section>
        <section anchor="debug-status-cddl" numbered="true" toc="default">
          <name>debug-status CDDL</name>
          <sourcecode type="CDDL">
debug-status-cbor-type = &amp;(
    enabled: 0,
    disabled: 1,
    disabled-since-boot: 2,
    disabled-permanently: 3,
    disabled-fully-and-permanently: 4
)

debug-status-json-type = 
    "enabled" /
    "disabled" /
    "disabled-since-boot" /
    "disabled-permanently" /
    "disabled-fully-and-permanently"

debug-status-claim = (
    debug-status =&gt; debug-status-cbor-type / debug-status-json-type
)
</sourcecode>
        </section>
      </section>
      <section anchor="including-keys" numbered="true" toc="default">
        <name>Including Keys</name>
        <t>An EAT may include a cryptographic key such as a public key.
The signing of the EAT binds the key to all the other claims in the token.</t>
        <t>The purpose for inclusion of the key may vary by use case.
For example, the key may be included as part of an IoT device onboarding protocol.
When the FIDO protocol includes a pubic key in its attestation message, the key represents the binding of a user, device and relying party.
This document describes how claims containing keys should be defined for the various use cases.
It does not define specific claims for specific use cases.</t>
        <t>Keys in CBOR format tokens SHOULD be the COSE_Key format <xref target="RFC8152" format="default"/> and keys in JSON format tokens SHOULD be the JSON Web Key format <xref target="RFC7517" format="default"/>.
These two formats support many common key types.
Their use avoids the need to decode other serialization formats.
These two formats can be extended to support further key types through their IANA registries.</t>
        <t>The general confirmation claim format <xref target="RFC8747" format="default"/>, <xref target="RFC7800" format="default"/> may also be used.
It provides key encryption. 
It also allows for inclusion by reference through a key ID.
The confirmation claim format may employed in the definition of some new claim for a a particular use case.</t>
        <t>When the actual confirmation claim is included in an EAT, this document associates no use case semantics other than proof of posession.
Different EAT use cases may choose to associate further semantics.
The key in the confirmation claim MUST be protected the same as the key used to sign the EAT. 
That is, the same, equivalent or better hardware defenses, access controls, key generation and such must be used.</t>
      </section>
      <section anchor="the-location-claim-location" numbered="true" toc="default">
        <name>The Location Claim (location)</name>
        <t>The location claim gives the location of the device entity from which the attestation originates.
It is derived from the W3C Geolocation API <xref target="W3C.GeoLoc" format="default"/>.
The latitude, longitude, altitude and accuracy must conform to <xref target="WGS84" format="default"/>.
The altitude is in meters above the <xref target="WGS84" format="default"/> ellipsoid.
The two accuracy values are positive numbers in meters.
The heading is in degrees relative to true north.
If the device is stationary, the heading is NaN (floating-point not-a-number).
The speed is the horizontal component of the device velocity in meters per second.</t>
        <t>When encoding floating-point numbers half-precision should not be used.
It usually does not provide enough precision for a geographic location.
It is not a requirement that the receiver of an EAT implement half-precision, so the receiver may not be able to decode the location.</t>
        <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.</t>
        <t>The age data item can be used when the entity doesn't know what time
it is either because it doesn't have a clock or it isn't set. The
entity must still have a "ticker" that can measure a time
interval. The age is the interval between acquisition of the location
data and token creation.</t>
        <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations" format="default"/> below.</t>
        <section anchor="location-cddl" numbered="true" toc="default">
          <name>location CDDL</name>
          <sourcecode type="CDDL">
location-type = {
    latitude =&gt; number,
    longitude =&gt; number,
    ? altitude =&gt; number,
    ? accuracy =&gt; number,
    ? altitude-accuracy =&gt; number,
    ? heading =&gt; number,
    ? speed =&gt; number,
    ? timestamp =&gt; ~time-int,
    ? age =&gt; uint
}

latitude = 1 / "latitude"
longitude = 2 / "longitude"
altitude = 3 / "altitude"
accuracy = 4 / "accuracy"
altitude-accuracy = 5 / "altitude-accuracy"
heading = 6 / "heading"
speed = 7 / "speed"
timestamp = 8 / "timestamp"
age = 9 / "age"

location-claim = (
    location-label =&gt; location-type
)
</sourcecode>
        </section>
      </section>
      <section anchor="the-uptime-claim-uptime" numbered="true" toc="default">
        <name>The Uptime Claim (uptime)</name>
        <t>The "uptime" claim contains a value that represents the number of
seconds that have elapsed since the entity or submod was last booted.</t>
        <section anchor="uptime-cddl" numbered="true" toc="default">
          <name>uptime CDDL</name>
          <sourcecode type="CDDL">
uptime-claim = (
    uptime =&gt; uint
)
</sourcecode>
        </section>
      </section>
      <section anchor="the-boot-seed-claim-boot-seed" numbered="true" toc="default">
        <name>The Boot Seed Claim (boot-seed)</name>
        <t>The Boot Seed claim is a random value created at system boot time that will allow differentiation of reports from different boot sessions.
This value is usually public and not protected.
It is not the same as a seed for a random number generator which must be kept secret.</t>
        <sourcecode type="CDDL">
boot-seed-claim = (
    boot-seed =&gt; bytes
)
</sourcecode>
      </section>
      <section anchor="the-intended-use-claim-intended-use" numbered="true" toc="default">
        <name>The Intended Use Claim (intended-use)</name>
        <t>EAT's may be used in the context of several different applications.  The intended-use
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it uses EAT.</t>
        <dl>
          <dt>
1 -- Generic  </dt>
          <dd>
            <t>Generic attestation describes an application where the EAT consumer
requres the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
          </dd>
          <dt>
2-- Registration  </dt>
          <dd>
            <t>Entities that are registering for a new service may be expected to 
provide an attestation as part of the registration process.  This intended-use
setting indicates that the attestation is not intended for any use but registration.</t>
          </dd>
          <dt>
3 -- Provisioning  </dt>
          <dd>
            <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess device security state of the entity prior to provisioning.</t>
          </dd>
          <dt>
4 -- Certificate Issuance (Certificate Signing Request)  </dt>
          <dd>
            <t>Certifying authorities (CA's) may require attestations prior to
the issuance of certificates related to keypairs hosted at the entity.  An
EAT may be used as part of the certificate signing request (CSR).</t>
          </dd>
          <dt>
5 -- Proof-of-Possession  </dt>
          <dd>
            <t>An EAT consumer may require an attestation as part of an accompanying 
proof-of-possession (PoP) appication. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has posession
of a key.  This kind of attestation may be neceesary to verify the
security state of the entity storing the private key used in a PoP application.</t>
          </dd>
        </dl>
        <section anchor="intended-use-cddl" numbered="true" toc="default">
          <name>intended-use CDDL</name>
          <sourcecode type="CDDL">
intended-use-cbor-type = &amp;(
    generic: 1,
    registration: 2,
    provisioning: 3,
    csr: 4,
    pop:  5
)

intended-use-json-type = 
    "generic" /
    "registration" /
    "provisioning" /
    "csr" /
    "pop" 

intended-use-claim = (
    intended-use =&gt; intended-use-cbor-type / intended-use-json-type
)
</sourcecode>
        </section>
      </section>
      <section anchor="profile-claim" numbered="true" toc="default">
        <name>The Profile Claim (profile)</name>
        <t>See <xref target="profiles" format="default"/> for the detailed description of a profile.</t>
        <t>A profile is identified by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the profile claim is to uniquely identify the profile even if it is a private profile.</t>
        <t>The OID is encoded in CBOR according to <xref target="CBOR-OID" format="default"/> and the URI according to <xref target="RFC8949" format="default"/>.
Both are unwrapped and thus not tags.
The OID is always absolute and never relative.
If the claims CBOR type is a text string it is a URI and if a byte string it is an OID.</t>
        <t>Note that this named "eat_profile" for JWT and is distinct from the already registered "profile" claim in the JWT claims registry.</t>
        <sourcecode type="CDDL">
oid = #6.4000(bstr) ; TODO: fill this in with correct CDDL from OID RFC

profile-claim = (
    profile =&gt; ~uri / ~oid
)
</sourcecode>
      </section>
      <section anchor="the-software-manifests-claim-manifests" numbered="true" toc="default">
        <name>The Software Manifests Claim (manifests)</name>
        <t>This claim contains descriptions of software that is present on the device.
These manifests are installed on the device when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the device, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is that they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the Verifier and/or the Relying Party.</t>
        <t>In some cases these will be signed by the software manufacturer independent of any signing for the purpose of EAT attestation.
Manifest claims should include the manufacturer's signature (which will be signed over  by the attestation signature).
In other cases the attestation signature will be the only one.</t>
        <t>This claim allows multiple formats for the manifest.
For example the manifest may be a CBOR-format CoSWID, an XML-format SWID or other.
Identification of the type of manifest is always by a CBOR tag.
In many cases, for examples CoSWID, a tag will already be registered with IANA.
If not, a tag MUST be registered.
It can be in the first-come-first-served space which has minimal requirements for registration.</t>
        <t>The claim is an array of one or more manifests.
To facilitate hand off of the manifest to a decoding library, each manifest is contained in a byte string.
This occurs for CBOR-format manifests as well as non-CBOR format manifests.</t>
        <t>If a particular manifest type uses CBOR encoding, then the item in the array for it MUST be a byte string that contains a CBOR tag.
The EAT decoder must decode the byte string and then the CBOR within it to find the tag number to identify the type of manifest.
The contents of the byte string is then handed to the particular manifest processor for that type of manifest.
CoSWID and SUIT manifest are examples of this.</t>
        <t>If a particular manifest type does not use CBOR encoding, then the item in the array for it must be a CBOR tag that contains a byte string.
The EAT decoder uses the tag to identify the processor for that type of manifest.
The contents of the tag, the byte string, are handed to the manifest processor.
Note that a byte string is used to contain the manifest whether it is a text based format or not.
An example of this is an XML format ISO/IEC 19770 SWID.</t>
        <t>It is not possible to describe the above requirements in CDDL so the type for an individual manifest is any in the CDDL below.
The above text sets the encoding requirement.</t>
        <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests may be of multiple formats.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
        <t>When the <xref target="CoSWID" format="default"/> format is used, it MUST be a payload CoSWID, not an evidence CoSWID.</t>
        <sourcecode type="CDDL">
manifests-claim = (
    manifests =&gt; manifests-type
)

manifests-type = [+ $manifest-formats]

; Must be a CoSWID payload type
$manifest-formats /= bytes .cbor concise-swid-tag

$manifest-formats /= bytes .cbor SUIT_Envelope_Tagged

</sourcecode>
      </section>
      <section anchor="the-software-evidence-claim-swevidence" numbered="true" toc="default">
        <name>The Software Evidence Claim {swevidence}</name>
        <t>This claim contains descriptions, lists, evidence or measurements of the software that exists on the device.
The defining characteristic of this claim is that its contents are created by processes on the device that inventory, measure or otherwise characterize the software on the device.
The contents of this claim do not originate from the software manufacturer.</t>
        <t>In most cases the contents of this claim are signed as part of attestation signing, but independent signing in addition to the attestation signing is not ruled out when a particular evidence format supports it.</t>
        <t>This claim uses the same mechanism for identification of the type of the swevidence as is used for the type of the manifest in the manifests claim.
It also uses the same byte string based mechanism for containing the claim and easing the hand off to a processing library.
See the discussion above in the manifests claim.</t>
        <t>When the <xref target="CoSWID" format="default"/> format is used, it MUST be evidence CoSWIDs, not payload CoSWIDS.</t>
        <sourcecode type="CDDL">
swevidence-claim = (
    swevidence =&gt; swevidence-type
)

swevidence-type = [+ $swevidence-formats]

; Must be a CoSWID evidence type
$swevidence-formats /= bytes .cbor concise-swid-tag

</sourcecode>
      </section>
      <section anchor="the-submodules-part-of-a-token-submods" numbered="true" toc="default">
        <name>The Submodules Part of a Token (submods)</name>
        <t>Some devices are complex, having many subsystems or submodules.  A
mobile phone is a good example. It may have several connectivity
submodules for communications (e.g., Wi-Fi and cellular). It may have
subsystems for low-power audio and video playback. It may have one or
more security-oriented subsystems like a TEE or a Secure Element.</t>
        <t>The claims for each these can be grouped together in a submodule.</t>
        <t>The submods part of a token are in a single map/object with many entries, one
per submodule.  There is only one submods map in a token. It is
identified by its specific label. It is a peer to other claims, but it
is not called a claim because it is a container for a claim set rather
than an individual claim. This submods part of a token allows what
might be called recursion. It allows claim sets inside of claim sets
inside of claims sets...</t>
        <section anchor="two-types-of-submodules" numbered="true" toc="default">
          <name>Two Types of Submodules</name>
          <t>Each entry in the submod map is one of two types:</t>
          <ul spacing="normal">
            <li>A non-token submodule that is a map or object directly containing claims for the submodule.</li>
            <li>A nested EAT that is a fully formed, independently signed EAT token</li>
          </ul>
          <section anchor="non-token-submodules" numbered="true" toc="default">
            <name>Non-token Submodules</name>
            <t>This is simply a map or object containing claims about the submodule.</t>
            <t>It may contain claims that are the same as its surrounding token or superior submodules. 
For example, the top-level of the token may have a UEID, a submod may have a different UEID and a further subordinate submodule may also have a UEID.</t>
            <t>It is signed/encrypted along with the rest of the token and thus the claims are secured by the same Attester with the same signing key as the rest of the token.</t>
            <t>If a token is in CBOR format (a CWT or a UCCS), all non-token submodules must be CBOR format.
If a token in in JSON format (a JWT), all non-token submodules must be in JSON format.</t>
            <t>When decoding, this type of submodule is recognized from the other type by being a data item of type map for CBOR or type object for JSON.</t>
          </section>
          <section anchor="nested-eats" numbered="true" toc="default">
            <name>Nested EATs</name>
            <t>This type of submodule is a fully formed secured EAT as defined in this document except that it MUST NOT be a UCCS or an unsecured JWT.
A nested token that is one that is always secured using COSE or JOSE, usually by an independent Attester.
When the surrounding EAT is a CWT or secured JWT, the nested token becomes securely bound with the other claims in the surrounding token.</t>
            <t>It is allowed to have a CWT as a submodule in a JWT and vice versa, but this SHOULD be avoided unless necessary.</t>
            <section anchor="surrounding-eat-is-cbor-format" numbered="true" toc="default">
              <name>Surrounding EAT is CBOR format</name>
              <t>They type of an EAT nested in a CWT is determined by whether the CBOR type is a text string or a byte string.
If a text string, then it is a JWT.
If a byte string, then it is a CWT.</t>
              <t>A CWT nested in a CBOR-format token is always wrapped by a byte string for easier handling with standard CBOR decoders and token processing APIs that will typically take a byte buffer as input.</t>
              <t>Nested CWTs may be either a CWT CBOR tag or a CWT Protocol Message.
COSE layers in nested CWT EATs MUST be a COSE_Tagged_Message, never a COSE_Untagged_Message.
If a nested EAT has more than one level of COSE, for example one that is both encrypted and signed, a COSE_Tagged_message must be used at every level.</t>
            </section>
            <section anchor="surrounding-eat-is-json-format" numbered="true" toc="default">
              <name>Surrounding EAT is JSON format</name>
              <t>When a CWT is nested in a JWT, it must be as a 55799 tag in order to distinguish it from a nested JWT.</t>
              <t>When a nested EAT in a JWT is decoded, first remove the base64url encoding.
Next, check to see if it starts with the bytes 0xd9d9f7.
If so, then it is a CWT as a JWT will never start with these four bytes. 
If not if it is a JWT.</t>
              <t>Other than the 55799 tag requirement, tag usage for CWT's nested in a JSON format token follow the same rules as for CWTs nested in CBOR-format tokens.
It may be a CWT CBOR tag or a CWT Protocol Message and COSE_Tagged_Message MUST be used at all COSE layers.</t>
            </section>
          </section>
          <section anchor="unsecured-jwts-and-uccs-tokens-as-submodules" numbered="true" toc="default">
            <name>Unsecured JWTs and UCCS Tokens as Submodules</name>
            <t>To incorporate a UCCS token as a submodule, it MUST be as a non-token submodule. 
This can be accomplished inserting the content of the UCCS Tag into the submodule map.
The content of a UCCS tag is exactly a map of claims as required for a non-token submodule.
If the UCCS is not a UCCS tag, then it can just be inserted into the submodule map directly.</t>
            <t>The definition of a nested EAT type of submodule is that it is one that is secured (signed) by an Attester.
Since UCCS tokens are unsecured, they do not fulfill this definition and must be non-token submodules.</t>
            <t>To incorporate an Unsecured JWT as a submodule, the null-security JOSE wrapping should be removed.
The resulting claims set should be inserted as a non-token submodule.</t>
            <t>To incorporate a UCCS token in a surrounding JSON token, the UCCS token claims should be translated from CBOR to JSON.
To incorporate an Unsecured JWT into a surrounding CBOR-format token, the null-security JOSE should be removed and the claims translated from JSON to CBOR.</t>
          </section>
        </section>
        <section anchor="no-inheritance" numbered="true" toc="default">
          <name>No Inheritance</name>
          <t>The subordinate modules do not inherit anything from the containing
token.  The subordinate modules must explicitly include all of their
claims. This is the case even for claims like the nonce and age.</t>
          <t>This rule is in place for simplicity. It avoids complex inheritance
rules that might vary from one type of claim to another.</t>
        </section>
        <section anchor="security-levels" numbered="true" toc="default">
          <name>Security Levels</name>
          <t>The security level of the non-token subordinate modules should always
be less than or equal to that of the containing modules in the case of non-token
submodules. It makes no sense for a module of lesser security to be
signing claims of a module of higher security. An example of this is a
TEE signing claims made by the non-TEE parts (e.g. the high-level OS)
of the device.</t>
          <t>The opposite may be true for the nested tokens. They usually have
their own more secure key material. An example of this is an embedded
secure element.</t>
        </section>
        <section anchor="submodule-names" numbered="true" toc="default">
          <name>Submodule Names</name>
          <t>The label or name for each submodule in the submods map is a text
string naming the submodule. No submodules may have the same name.</t>
        </section>
        <section anchor="submods-cddl" numbered="true" toc="default">
          <name>submods CDDL</name>
          <sourcecode type="CDDL">
; The part of a token that contains all the submodules.  It is a peer
; with the claims in the token, but not a claim, only a map/object to
; hold all the submodules.

submods-part = (
    submods =&gt; submods-type
)

submods-type = { + submod-type }


; The type of a submodule which can either be a nested claim set or a
; nested separately signed token. Nested tokens are wrapped in a bstr
; or a tstr.

submod-type = (
    submod-name =&gt; eat-claim-set / nested-token
)


; When this is a bstr, the contents are an eat-token in CWT or UCCS
; format.  When this is a tstr, the contents are an eat-token in JWT
; format.

nested-token = bstr / tstr; 


; Each submodule has a unique text string name.

submod-name = tstr 


</sourcecode>
        </section>
      </section>
    </section>
    <section anchor="keyid" numbered="true" toc="default">
      <name>Endorsements and Verification Keys</name>
      <t>The Verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture" format="default"/> describes what is called an Endorsement.
This is an input to the Verifier that is usually the basis of the trust placed in an EAT and the Attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain Reference Values to which EAT claims are compared as part of the verification process.
It may contain implied claims, those that are passed on to the Relying Party in Attestation Results.</t>
      <t>There is not yet any standard format(s) for an Endorsement.
One format that may be used for an Endorsement is an X.509 certificate.
Endorsement data like Reference Values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the Endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an Endorsement.</t>
      <t>For the components (Attester, Verifier, Relying Party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <section anchor="identification-methods" numbered="true" toc="default">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes Endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for Endorsements in other formats. If such an Endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id" numbered="true" toc="default">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC8152" format="default"/> and <xref target="RFC7515" format="default"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters" numbered="true" toc="default">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft" format="default"/> and JSON Web Siganture <xref target="RFC7515" format="default"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an Endorsement and thus carrying additional input to the Verifier. It may be just an X.509 certificate, not an Endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the Verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters" numbered="true" toc="default">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft" format="default"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification" numbered="true" toc="default">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the device and therefore can work well as a key identifier or Endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
      <section anchor="other-considerations" numbered="true" toc="default">
        <name>Other Considerations</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the Verifier may be configured with a root certificate or a master key by the Verifier system administrator.</t>
        <t>Often an X.509 certificate or an Endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints and an Endorsement might have Reference Values.
When this is the case, the key identifier must be either a protected header or in the payload such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515" format="default"/>.</t>
      </section>
    </section>
    <section anchor="profiles" numbered="true" toc="default">
      <name>Profiles</name>
      <t>This EAT specification does not gaurantee that implementations of it will interoperate.
The variability in this specification is necessary to accommodate the widely varying use cases.
An EAT profile narrows the specification for a specific use case.
An ideal EAT profile will gauarantee interoperability.</t>
      <t>The profile can be named in the token using the profile claim described in <xref target="profile-claim" format="default"/>.</t>
      <section anchor="format-of-a-profile-document" numbered="true" toc="default">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>In some cases CDDL may be created that replaces CDDL in this or other document to express some profile requirements.
For example, to require the altitude data item in the location claim, CDDL can be written that replicates the location claim with the altitude no longer optional.</t>
      </section>
      <section anchor="list-of-profile-issues" numbered="true" toc="default">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, UCCS, JWS, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both" numbered="true" toc="default">
          <name>Use of JSON, CBOR or both</name>
          <t>The profile should indicate whether the token format should be CBOR, JSON, both or even some other encoding.
If some other encoding, a specification for how the CDDL described here is serialized in that encoding is necessary.</t>
          <t>This should be addressed for the top-level token and for any nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding" numbered="true" toc="default">
          <name>CBOR Map and Array Encoding</name>
          <t>The profile should indicate whether definite-length arrays/maps, indefinite-length arrays/maps or both are allowed.
A good default is to allow only definite-length arrays/maps.</t>
          <t>An alternate is to allow both definite and indefinite-length arrays/maps.
The decoder should accept either.
Encoders that need to fit on very small hardware or be actually implement in hardware can use indefinite-length encoding.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
        </section>
        <section anchor="cbor-string-encoding" numbered="true" toc="default">
          <name>CBOR String Encoding</name>
          <t>The profile should indicate whether definite-length strings, indefinite-length strings or both are allowed.
A good default is to allow only definite-length strings.
As with map and array encoding, allowing indefinite-length strings can be beneficial for some smaller implementations.</t>
        </section>
        <section anchor="cbor-preferred-serialization" numbered="true" toc="default">
          <name>CBOR Preferred Serialization</name>
          <t>The profile should indicate whether encoders must use preferred serialization.
The profile should indicate whether decoders must accept non-preferred serialization.</t>
        </section>
        <section anchor="cosejose-protection" numbered="true" toc="default">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
EAT/CWT has the option to have no protection using UCCS and JOSE has a NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, CWT and UCCS are allowed by EAT.</t>
          <t>The profile should list the protections that must be supported by all decoders implementing the profile.
The encoders them must implement a subset of what is listed for the decoders, perhaps only one.</t>
          <t>Implementations may choose to sign or MAC before encryption so that the implementation layer doing the signing or MACing can be the smallest.
It is often easier to make smaller implementations more secure, perhaps even implementing in solely in hardware.
The key material for a signature or MAC is a private key, while for encryption it is likely to be a public key.
The key for encryption requires less protection.</t>
        </section>
        <section anchor="cosejose-algorithms" numbered="true" toc="default">
          <name>COSE/JOSE Algorithms</name>
          <t>The profile document should list the COSE algorithms that a Verifier must implement.
The Attester will select one of them. 
Since there is no negotiation, the Verifier should implement all algorithms listed in the profile.</t>
        </section>
        <section anchor="verification-key-identification" numbered="true" toc="default">
          <name>Verification Key Identification</name>
          <t>Section <xref target="keyid" format="default"/> describes a number of methods for identifying a verification key.
The profile document should specify one of these or one that is not described.
The ones described in this document are only roughly described.
The profile document should go into the full detail.</t>
        </section>
        <section anchor="endorsement-identification" numbered="true" toc="default">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as Verification Key Identification, the profile may wish to specify how Endorsements are to be identified.
However note that Endorsement Identification is optional, where as key identification is not.</t>
        </section>
        <section anchor="freshness" numbered="true" toc="default">
          <name>Freshness</name>
          <t>Just about every use case will require some means of knowing the EAT is recent enough and not a replay of an old token.
The profile should describe how freshness is achieved.
The section on Freshness in <xref target="RATS-Architecture" format="default"/> describes some of the possible solutions to achieve this.</t>
        </section>
        <section anchor="required-claims" numbered="true" toc="default">
          <name>Required Claims</name>
          <t>The profile can list claims whose absence results in Verification failure.</t>
        </section>
        <section anchor="prohibited-claims" numbered="true" toc="default">
          <name>Prohibited Claims</name>
          <t>The profile can list claims whose presence results in Verification failure.</t>
        </section>
        <section anchor="additional-claims" numbered="true" toc="default">
          <name>Additional Claims</name>
          <t>The profile may describe entirely new claims.
These claims can be required or optional.</t>
        </section>
        <section anchor="refined-claim-definition" numbered="true" toc="default">
          <name>Refined Claim Definition</name>
          <t>The profile may lock down optional aspects of individual claims.
For example, it may require altitude in the location claim, or it may require that HW Versions always be described using EAN-13.</t>
        </section>
        <section anchor="cbor-tags" numbered="true" toc="default">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.
Similarly, the profile should specify whether the token should be a UCCS tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unncessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="manifests-and-software-evidence-claims" numbered="true" toc="default">
          <name>Manifests and Software Evidence Claims</name>
          <t>The profile should specify which formats are allowed for the manifests and software evidence claims.
The profile may also go on to say which parts and options of these formats are used, allowed and prohibited.</t>
        </section>
      </section>
    </section>
    <section anchor="encoding" numbered="true" toc="default">
      <name>Encoding</name>
      <t>This makes use of the types defined in CDDL Appendix D, Standard Prelude.</t>
      <t>Some of the CDDL included here is for claims that are defined in CWT <xref target="RFC8392" format="default"/> or JWT <xref target="RFC7519" format="default"/> or are in the IANA CWT or JWT registries.
CDDL was not in use when these claims where defined.</t>
      <section anchor="common-cddl-types" numbered="true" toc="default">
        <name>Common CDDL Types</name>
        <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
        <t>Note that unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949" format="default"/>.
They are just text strings that contain a URI.</t>
        <sourcecode type="CDDL">
string-or-uri = tstr 

time-int = #6.1(int)
</sourcecode>
      </section>
      <section anchor="cddl-for-cwt-defined-claims" numbered="true" toc="default">
        <name>CDDL for CWT-defined Claims</name>
        <t>This section provides CDDL for the claims defined in CWT. It is
non-normative as <xref target="RFC8392" format="default"/> is the authoritative definition of these
claims.</t>
        <t>Note that the subject, issue and audience claims may be a text string containing a URI per <xref target="RFC8392" format="default"/> and <xref target="RFC7519" format="default"/>.
These are never the URI tag defined in <xref target="RFC8949" format="default"/>.</t>
        <sourcecode type="CDDL">
$$eat-extension //= (
    ? issuer =&gt; text,
    ? subject =&gt; text,
    ? audience =&gt; text,
    ? expiration =&gt; time,
    ? not-before =&gt; time,
    ? issued-at =&gt; time,
    ? cwt-id =&gt; bytes,
)

issuer = 1
subject = 2
audience = 3
expiration = 4
not-before = 5
issued-at = 6
cwt-id = 7

</sourcecode>
      </section>
      <section anchor="json" numbered="true" toc="default">
        <name>JSON</name>
        <section anchor="json-labels" numbered="true" toc="default">
          <name>JSON Labels</name>
          <sourcecode type="JSON">
; The following are Claim Keys (labels) assigned for JSON-encoded tokens.

ueid /= "ueid"
sueids /= "sueids"
nonce /= "nonce"
oemid /= "oemid"
security-level /= "seclevel"
secure-boot /= "secboot"
debug-status /= "dbgstat"
location /= "location"
uptime /= "uptime"
profile /= "eat-profile"
intended-use /= "intuse"
boot-seed /= "bootseed"
submods /= "submods"
timestamp /= "timestamp"
manifests /= "manifests"
swevidence /= "swevidence"

latitude /= "lat"
longitude /= "long"
altitude /= "alt"
accuracy /= "accry"
altitude-accuracy /= "alt-accry"
heading /= "heading"
speed /= "speed"
</sourcecode>
        </section>
        <section anchor="jsoninterop" numbered="true" toc="default">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per RFC 8610 Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- must be base64url encoded</li>
            <li>time -- must be encoded as NumericDate as described section 2 of <xref target="RFC7519" format="default"/>.</li>
            <li>string-or-uri -- must be encoded as StringOrURI as described section 2 of <xref target="RFC7519" format="default"/>.</li>
            <li>uri -- must be a URI <xref target="RFC3986" format="default"/>.</li>
            <li>oid -- encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1").</li>
          </ul>
        </section>
      </section>
      <section anchor="cbor" numbered="true" toc="default">
        <name>CBOR</name>
        <section anchor="cbor-interoperability" numbered="true" toc="default">
          <name>CBOR Interoperability</name>
          <t>CBOR allows data items to be serialized in more than one form.
If the sender uses a form that the receiver can't decode, there will not be interoperability.</t>
          <t>This specification gives no blanket requirements to narrow CBOR serialization for all uses of EAT.
This allows individual uses to tailor serialization to the environment.
It also may result in EAT implementations that don't interoperate.</t>
          <t>One way to guarantee interoperability is to clearly specify CBOR serialization in a profile document.
See <xref target="profiles" format="default"/> for a list of serialization issues that should be addressed.</t>
          <t>EAT will be commonly used where the device generating the attestation is constrained and the receiver/verifier of the attestation is a capacious server.
Following is a set of serialization requirements that work well for that use case and are guaranteed to interoperate.
Use of this serialization is recommended where possible, but not required.
An EAT profile may just reference the following section rather than spell out serialization details.</t>
          <section anchor="eat-constrained-device-serialization" numbered="true" toc="default">
            <name>EAT Constrained Device Serialization</name>
            <ul spacing="normal">
              <li>Preferred serialization described in section 4.1 of <xref target="RFC8949" format="default"/> is not required.
The EAT decoder must accept all forms of number serialization.
The EAT encoder may use any form it wishes.</li>
              <li>The EAT decoder must accept indefinite length arrays and maps as described in section 3.2.2 of <xref target="RFC8949" format="default"/>.
The EAT encoder may use indefinite length arrays and maps if it wishes.</li>
              <li>The EAT decoder must accept indefinite length strings as described in section 3.2.3 of <xref target="RFC8949" format="default"/>.
The EAT encoder may use indefinite length strings if it wishes.</li>
              <li>Sorting of maps by key is not required.
The EAT decoder must not rely on sorting.</li>
              <li>Deterministic encoding described in Section 4.2 of <xref target="RFC8949" format="default"/> is not required.</li>
              <li>Basic validity described in section 5.3.1 of <xref target="RFC8949" format="default"/> must be followed.
The EAT encoder must not send duplicate map keys/labels or invalid UTF-8 strings.</li>
            </ul>
          </section>
        </section>
      </section>
      <section anchor="collected-cddl" numbered="true" toc="default">
        <name>Collected CDDL</name>
        <sourcecode type="CDDL">
; This is the top-level definition of the claims in EAT tokens.  To
; form an actual EAT Token, this claim set is enclosed in a COSE, JOSE
; or UCCS message.

eat-claim-set = {
    ? ueid-claim,
    ? sueids-claim,
    ? nonce-claim,
    ? oemid-claim,
    ? hardware-version-claims,
    ? security-level-claim,
    ? secure-boot-claim,
    ? debug-status-claim,
    ? location-claim,
    ? intended-use-claim,
    ? profile-claim,
    ? uptime-claim,
    ? manifests-claim,
    ? swevidence-claim,
    ? submods-part,
    * $$eat-extension,
}


; This is the top-level definition of an EAT Token.  It is a CWT, JWT
; or UCSS where the payload is an eat-claim-set. A JWT_Message is what
; is defined by JWT in RFC 7519. (RFC 7519 doesn't use CDDL so a there
; is no actual CDDL definition of JWT_Message).

eat-token = EAT_Tagged_Message / EAT_Untagged_Message / JWT_Message


; This is CBOR-format EAT token in the CWT or UCCS format that is a
; tag.  COSE_Tagged_message is defined in RFC 8152.  Tag 601 is
; proposed by the UCCS draft, but not yet assigned.

EAT_Tagged_Message = #6.61(COSE_Tagged_Message) / #6.601(eat-claim-set)


; This is a CBOR-format EAT token that is a CWT or UCSS that is not a
; tag COSE_Tagged_message and COSE_Untagged_Message are defined in RFC
; 8152.

EAT_Untagged_Message = COSE_Tagged_Message / COSE_Untagged_Message / UCCS_Untagged_Message


; This is an "unwrapped" UCCS tag. Unwrapping a tag means to use the
; definition of its content without the preceding type 6 tag
; integer. Since a UCCS is nothing but a tag for an unsecured CWT
; claim set, unwrapping reduces to a bare eat-claim-set.

UCCS_Untagged_Message = eat-claim-set


string-or-uri = tstr 

time-int = #6.1(int)

$$eat-extension //= (
    ? issuer =&gt; text,
    ? subject =&gt; text,
    ? audience =&gt; text,
    ? expiration =&gt; time,
    ? not-before =&gt; time,
    ? issued-at =&gt; time,
    ? cwt-id =&gt; bytes,
)

issuer = 1
subject = 2
audience = 3
expiration = 4
not-before = 5
issued-at = 6
cwt-id = 7


debug-status-cbor-type = &amp;(
    enabled: 0,
    disabled: 1,
    disabled-since-boot: 2,
    disabled-permanently: 3,
    disabled-fully-and-permanently: 4
)

debug-status-json-type = 
    "enabled" /
    "disabled" /
    "disabled-since-boot" /
    "disabled-permanently" /
    "disabled-fully-and-permanently"

debug-status-claim = (
    debug-status =&gt; debug-status-cbor-type / debug-status-json-type
)

location-type = {
    latitude =&gt; number,
    longitude =&gt; number,
    ? altitude =&gt; number,
    ? accuracy =&gt; number,
    ? altitude-accuracy =&gt; number,
    ? heading =&gt; number,
    ? speed =&gt; number,
    ? timestamp =&gt; ~time-int,
    ? age =&gt; uint
}

latitude = 1 / "latitude"
longitude = 2 / "longitude"
altitude = 3 / "altitude"
accuracy = 4 / "accuracy"
altitude-accuracy = 5 / "altitude-accuracy"
heading = 6 / "heading"
speed = 7 / "speed"
timestamp = 8 / "timestamp"
age = 9 / "age"

location-claim = (
    location-label =&gt; location-type
)

nonce-type = bstr .size (8..64)

nonce-claim = (
    nonce =&gt; nonce-type / [ 2* nonce-type ]
)

oemid-claim = (
    oemid =&gt; bstr
)

chip-version-claim = (
    chip-version =&gt; tstr
)

chip-version-scheme-claim = (
    chip-version-scheme =&gt; $version-scheme
)

board-version-claim = (
    board-version =&gt; tstr
)

board-version-scheme-claim = (
    board-version-scheme =&gt; $version-scheme
)

device-version-claim = (
    device-version =&gt; tstr
)

device-version-scheme-claim = (
    device-version-scheme =&gt; $version-scheme
)


hardware-version-claims = (
    ? chip-version-claim,
    ? board-version-claim,
    ? device-version-claim,
    ? chip-version-scheme-claim,
    ? board-version-scheme-claim,
    ? device-version-scheme-claim,
)


secure-boot-claim = (
    secure-boot =&gt; bool
)

security-level-cbor-type = &amp;(
    unrestricted: 1,
    restricted: 2,
    secure-restricted: 3,
    hardware: 4
)

security-level-json-type = 
    "unrestricted" /
    "restricted" /
    "secure-restricted" /
    "hardware"

security-level-claim = (
    security-level =&gt; security-level-cbor-type / security-level-json-type
)

; The part of a token that contains all the submodules.  It is a peer
; with the claims in the token, but not a claim, only a map/object to
; hold all the submodules.

submods-part = (
    submods =&gt; submods-type
)

submods-type = { + submod-type }


; The type of a submodule which can either be a nested claim set or a
; nested separately signed token. Nested tokens are wrapped in a bstr
; or a tstr.

submod-type = (
    submod-name =&gt; eat-claim-set / nested-token
)


; When this is a bstr, the contents are an eat-token in CWT or UCCS
; format.  When this is a tstr, the contents are an eat-token in JWT
; format.

nested-token = bstr / tstr; 


; Each submodule has a unique text string name.

submod-name = tstr 



ueid-type = bstr .size (7..33)

ueid-claim = (
     ueid =&gt; ueid-type
)

sueids-type = {
    + tstr =&gt; ueid-type
}

sueids-claim = (
     sueid =&gt; sueids-type
)

intended-use-cbor-type = &amp;(
    generic: 1,
    registration: 2,
    provisioning: 3,
    csr: 4,
    pop:  5
)

intended-use-json-type = 
    "generic" /
    "registration" /
    "provisioning" /
    "csr" /
    "pop" 

intended-use-claim = (
    intended-use =&gt; intended-use-cbor-type / intended-use-json-type
)

oid = #6.4000(bstr) ; TODO: fill this in with correct CDDL from OID RFC

profile-claim = (
    profile =&gt; ~uri / ~oid
)

uptime-claim = (
    uptime =&gt; uint
)

manifests-claim = (
    manifests =&gt; manifests-type
)

manifests-type = [+ $manifest-formats]

; Must be a CoSWID payload type
$manifest-formats /= bytes .cbor concise-swid-tag

$manifest-formats /= bytes .cbor SUIT_Envelope_Tagged


swevidence-claim = (
    swevidence =&gt; swevidence-type
)

swevidence-type = [+ $swevidence-formats]

; Must be a CoSWID evidence type
$swevidence-formats /= bytes .cbor concise-swid-tag


; The following Claim Keys (labels) are pre-assigned by IANA.
; They are for CBOR-based tokens (CWT and UCCS).
; They are not expected to change in the final publication as an RFC.

nonce = 10
ueid = 11
oemid = 13
security-level = 14
secure-boot = 15
debug-status = 16
location-label = 17
profile = 18
submods = 20


boot-seed-claim = (
    boot-seed =&gt; bytes
)

; The following are Claim Keys (labels) assigned for JSON-encoded tokens.

ueid /= "ueid"
sueids /= "sueids"
nonce /= "nonce"
oemid /= "oemid"
security-level /= "seclevel"
secure-boot /= "secboot"
debug-status /= "dbgstat"
location /= "location"
uptime /= "uptime"
profile /= "eat-profile"
intended-use /= "intuse"
boot-seed /= "bootseed"
submods /= "submods"
timestamp /= "timestamp"
manifests /= "manifests"
swevidence /= "swevidence"

latitude /= "lat"
longitude /= "long"
altitude /= "alt"
accuracy /= "accry"
altitude-accuracy /= "alt-accry"
heading /= "heading"
speed /= "speed"

</sourcecode>
      </section>
    </section>
    <section anchor="iana-considerations" numbered="true" toc="default">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-web-token-cwt-claims-registry" numbered="true" toc="default">
        <name>Reuse of CBOR Web Token (CWT) Claims Registry</name>
        <t>Claims defined for EAT are compatible with those of CWT
so the CWT Claims Registry is re used. No new IANA registry
is created. All EAT claims should be registered in the
CWT and JWT Claims Registries.</t>
      </section>
      <section anchor="claim-characteristics" numbered="true" toc="default">
        <name>Claim Characteristics</name>
        <t>The following is design guidance for creating new EAT claims, particularly those to be registered with IANA.</t>
        <t>Much of this guidance is generic and could also be considered when designing new CWT or JWT claims.</t>
        <section anchor="interoperability-and-relying-party-orientation" numbered="true" toc="default">
          <name>Interoperability and Relying Party Orientation</name>
          <t>It is a broad goal that EATs can be processed by relying parties in a general way regardless of the type, manufacturer or technology of the device from which they originate. 
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
          <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
        </section>
        <section anchor="operating-system-and-technology-neutral" numbered="true" toc="default">
          <name>Operating System and Technology Neutral</name>
          <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
          <t>Claims should not be defined such that they are specific to a SW environment or programming language.</t>
          <t>Claims should not be defined such that they are specific to a chip or particular hardware. 
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
          <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
        </section>
        <section anchor="security-level-neutral" numbered="true" toc="default">
          <name>Security Level Neutral</name>
          <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists. 
Secure Elements and smart cards are examples of this. 
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
          <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
        </section>
        <section anchor="reuse-of-extant-data-formats" numbered="true" toc="default">
          <name>Reuse of Extant Data Formats</name>
          <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
          <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON format for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
          <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
        </section>
        <section anchor="proprietary-claims" numbered="true" toc="default">
          <name>Proprietary Claims</name>
          <t>EAT allows the definition and use of proprietary claims.</t>
          <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer. 
This is a supported use case.</t>
          <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
        </section>
      </section>
      <section anchor="claims-registered-by-this-document" numbered="true" toc="default">
        <name>Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519" format="default"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392" format="default"/>. Each entry below is an addition to both registries (except
for the nonce claim which is already registered for JWT, but not registered for CWT).</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <section anchor="claims-for-early-assignment" numbered="true" toc="default">
          <name>Claims for Early Assignment</name>
          <t>RFC Editor: in the final publication this section should be combined with the following
section as it will no longer be necessary to distinguish claims with early assignment.
Also, the following paragraph should be removed.</t>
          <t>The claims in this section have been (requested for / given) early assignment according to <xref target="RFC7120" format="default"/>.
They have been assigned values and registered before final publication of this document.
While their semantics is not expected to change in final publication, it is possible that they will.
The JWT Claim Names and CWT Claim Keys are not expected to change.</t>
          <ul spacing="normal">
            <li>Claim Name: Nonce</li>
            <li>Claim Description: Nonce</li>
            <li>JWT Claim Name: "nonce" (already registered for JWT)</li>
            <li>Claim Key: 10</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <xref target="OpenIDConnectCore" format="default"/>, <strong>this document</strong></li>
          </ul>
          <t>&nbsp;</t>
          <ul spacing="normal">
            <li>Claim Name: UEID</li>
            <li>Claim Description: The Universal Entity ID</li>
            <li>JWT Claim Name: "ueid"</li>
            <li>CWT Claim Key: 11</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t>&nbsp;</t>
          <ul spacing="normal">
            <li>Claim Name: OEMID</li>
            <li>Claim Description: IEEE-based OEM ID</li>
            <li>JWT Claim Name: "oemid"</li>
            <li>Claim Key: 13</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t>&nbsp;</t>
          <ul spacing="normal">
            <li>Claim Name: Security Level</li>
            <li>Claim Description: Characterization of the security of an Attester or submodule</li>
            <li>JWT Claim Name: "seclevel"</li>
            <li>Claim Key: 14</li>
            <li>Claim Value Type(s): integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t>&nbsp;</t>
          <ul spacing="normal">
            <li>Claim Name: Secure Boot</li>
            <li>Claim Description: Indicate whether the boot was secure</li>
            <li>JWT Claim Name: "secboot"</li>
            <li>Claim Key: 15</li>
            <li>Claim Value Type(s): Boolean</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t>&nbsp;</t>
          <ul spacing="normal">
            <li>Claim Name: Debug Status</li>
            <li>Claim Description: Indicate status of debug facilities</li>
            <li>JWT Claim Name: "dbgstat"</li>
            <li>Claim Key: 16</li>
            <li>Claim Value Type(s): integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t>&nbsp;</t>
          <ul spacing="normal">
            <li>Claim Name: Location</li>
            <li>Claim Description: The geographic location</li>
            <li>JWT Claim Name: "location"</li>
            <li>Claim Key: 17</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t>&nbsp;</t>
          <ul spacing="normal">
            <li>Claim Name: Profile</li>
            <li>Claim Description: Indicates the EAT profile followed</li>
            <li>JWT Claim Name: "eat_profile"</li>
            <li>Claim Key: 18</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t>&nbsp;</t>
          <ul spacing="normal">
            <li>Claim Name: Submodules Section</li>
            <li>Claim Description: The section containing submodules (not actually a claim)</li>
            <li>JWT Claim Name: "submods"</li>
            <li>Claim Key: 20</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="to-be-assigned-claims" numbered="true" toc="default">
          <name>To be Assigned Claims</name>
          <t>TODO: add the rest of the claims in here</t>
        </section>
        <section anchor="registerversionscheme" numbered="true" toc="default">
          <name>Version Schemes Registered by this Document</name>
          <t>IANA is requested to register a new value in the "Software Tag Version Scheme Values" established by <xref target="CoSWID" format="default"/>.</t>
          <t>The new value is a version scheme a 13-digit European Article Number <xref target="EAN-13" format="default"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.
This version scheme is the ASCII text representation of EAN-13 digits, the same ones often printed with a bar code.
This version scheme must comply with the EAN allocation and assignment rules.
For example, this requires the manufacturer to obtain a manufacture code from GS1.</t>
          <table align="center">
            <thead>
              <tr>
                <th align="left">Index</th>
                <th align="left">Version Scheme Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">5</td>
                <td align="left">ean-13</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations" numbered="true" toc="default">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations" numbered="true" toc="default">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Any set of relying parties
that receives tokens that happen to be from a single device will be
able to know the tokens are all from the same device and be able to
track the device. Thus, in many usage situations UEID violates
governmental privacy regulation. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The device obtains explicit permission from the user of the device
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one relying party.</li>
          <li>The device authenticates the relying party and generates a derived
UEID/SUEID just for that particular relying party.  For example, the relying
party could prove their identity cryptographically to the device, then
the device generates a UEID just for that relying party by hashing a
proofed relying party ID with the main device UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per device. Each UEID/SUEID is used in a
different context, use case or system on the device. However, from the
view of the relying party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations" numbered="true" toc="default">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the device generating the attestation.
For example, many mobile phones prompt the user for permission when before sending location data.</t>
      </section>
    </section>
    <section anchor="securitycons" numbered="true" toc="default">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392" format="default"/> and Section 11
of <xref target="RFC7519" format="default"/> apply to EAT in its CWT and JWT form, respectively.  In addition, 
implementors should consider the following.</t>
      <section anchor="key-provisioning" numbered="true" toc="default">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manfuacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949" format="default"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material" numbered="true" toc="default">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="transport-security" numbered="true" toc="default">
        <name>Transport Security</name>
        <t>As stated in Section 8 of <xref target="RFC8392" format="default"/>, "The security of the CWT relies
upon on the protections offered by COSE".  Similar considerations
apply to EAT when sent as a CWT.  However, EAT introduces the concept
of a nonce to protect against replay.  Since an EAT may be created by
an entity that may not support the same type of transport security as
the consumer of the EAT, intermediaries may be required to bridge
communications between the entity and consumer.  As a result, it is
RECOMMENDED that both the consumer create a nonce, and the entity
leverage the nonce along with COSE mechanisms for encryption and/or
signing to create the EAT.</t>
        <t>Similar considerations apply to the use of EAT as a JWT.  Although the
security of a JWT leverages the JSON Web Encryption (JWE) and JSON Web
Signature (JWS) specifications, it is still recommended to make use of
the EAT nonce.</t>
      </section>
      <section anchor="multiple-eat-consumers" numbered="true" toc="default">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer should leverage a secure protocol (e.g.one that
uses transport-layer security, i.e. TLS),</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then transport security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner">
              <organization/>
            </author>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC7515" target="https://www.rfc-editor.org/info/rfc7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC8949" target="https://www.rfc-editor.org/info/rfc8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman">
              <organization/>
            </author>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7517" target="https://www.rfc-editor.org/info/rfc7517">
          <front>
            <title>JSON Web Key (JWK)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key.  This specification also defines a JWK Set JSON data structure that represents a set of JWKs.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries established by that specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7517"/>
          <seriesInfo name="DOI" value="10.17487/RFC7517"/>
        </reference>
        <reference anchor="RFC7519" target="https://www.rfc-editor.org/info/rfc7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC7800" target="https://www.rfc-editor.org/info/rfc7800">
          <front>
            <title>Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="April" year="2016"/>
            <abstract>
              <t>This specification describes how to declare in a JSON Web Token (JWT) that the presenter of the JWT possesses a particular proof-of- possession key and how the recipient can cryptographically confirm proof of possession of the key by the presenter.  Being able to prove possession of a key is also sometimes described as the presenter being a holder-of-key.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7800"/>
          <seriesInfo name="DOI" value="10.17487/RFC7800"/>
        </reference>
        <reference anchor="RFC8126" target="https://www.rfc-editor.org/info/rfc8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <author fullname="T. Narten" initials="T." surname="Narten">
              <organization/>
            </author>
            <date month="June" year="2017"/>
            <abstract>
              <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="RFC8152" target="https://www.rfc-editor.org/info/rfc8152">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad">
              <organization/>
            </author>
            <date month="July" year="2017"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8152"/>
          <seriesInfo name="DOI" value="10.17487/RFC8152"/>
        </reference>
        <reference anchor="RFC8392" target="https://www.rfc-editor.org/info/rfc8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610" target="https://www.rfc-editor.org/info/rfc8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz">
              <organization/>
            </author>
            <author fullname="C. Vigano" initials="C." surname="Vigano">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8747" target="https://www.rfc-editor.org/info/rfc8747">
          <front>
            <title>Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="L. Seitz" initials="L." surname="Seitz">
              <organization/>
            </author>
            <author fullname="G. Selander" initials="G." surname="Selander">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="March" year="2020"/>
            <abstract>
              <t>This specification describes how to declare in a CBOR Web Token (CWT) (which is defined by RFC 8392) that the presenter of the CWT possesses a particular proof-of-possession key. Being able to prove possession of a key is also sometimes described as being the holder-of-key. This specification provides equivalent functionality to "Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)" (RFC 7800) but using Concise Binary Object Representation (CBOR) and CWTs rather than JavaScript Object Notation (JSON) and JSON Web Tokens (JWTs).</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8747"/>
          <seriesInfo name="DOI" value="10.17487/RFC8747"/>
        </reference>
        <reference anchor="RFC3986" target="https://www.rfc-editor.org/info/rfc3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee">
              <organization/>
            </author>
            <author fullname="R. Fielding" initials="R." surname="Fielding">
              <organization/>
            </author>
            <author fullname="L. Masinter" initials="L." surname="Masinter">
              <organization/>
            </author>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RATS.Architecture" target="https://tools.ietf.org/html/draft-ietf-rats-architecture-08">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz">
              <organization/>
            </author>
            <date year="2020"/>
          </front>
        </reference>
        <reference anchor="COSE.X509.Draft" target="https://tools.ietf.org/html/draft-ietf-cose-x509-08">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header parameters for carrying and referencing X.509 certificates</title>
            <author fullname="J. Schaad">
              <organization/>
            </author>
            <date year="2020"/>
          </front>
        </reference>
        <reference anchor="CBOR.Cert.Draft" target="https://tools.ietf.org/html/draft-mattsson-cose-cbor-cert-compress-05">
          <front>
            <title>CBOR Encoding of X.509 Certificates (CBOR Certificates)</title>
            <author fullname="S. Raza">
              <organization/>
            </author>
            <date year="2020"/>
          </front>
        </reference>
        <reference anchor="WGS84" target="http://earth-info.nga.mil/GandG/publications/tr8350.2/wgs84fin.pdf">
          <front>
            <title>National Imagery and Mapping Agency Technical Report 8350.2, Third Edition</title>
            <author>
              <organization>National Imagery and Mapping Agency</organization>
            </author>
            <date year="2000"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="UCCS.Draft" target="https://tools.ietf.org/html/draft-birkholz-rats-uccs-01">
          <front>
            <title>A CBOR Tag for Unprotected CWT Claims Sets</title>
            <author fullname="Henk Birkholz">
              <organization/>
            </author>
            <date year="2020"/>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="FIDO.AROE" target="https://fidoalliance.org/specs/fido-uaf-v1.0-fd-20191115/fido-allowed-AROE-v1.0-fd-20191115.html">
          <front>
            <title>FIDO Authenticator Allowed Restricted Operating Environments List</title>
            <author>
              <organization>The FIDO Alliance</organization>
            </author>
            <date year="2019" month="November"/>
          </front>
        </reference>
        <reference anchor="EAN-13" target="https://www.gs1.org/standards/barcodes/ean-upc">
          <front>
            <title>International Article Number - EAN/UPC barcodes</title>
            <author>
              <organization>GS1</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID" target="https://tools.ietf.org/html/draft-ietf-sacm-coswid-16">
          <front>
            <title>Concise Software Identification Tags</title>
            <author>
              <organization/>
            </author>
            <date year="2020" month="November"/>
          </front>
        </reference>
        <reference anchor="OpenIDConnectCore" target="https://openid.net/specs/openid-connect-core-1_0.html">
          <front>
            <title>OpenID Connect Core 1.0 incorporating errata set 1</title>
            <author fullname="N. Sakimura">
              <organization/>
            </author>
            <author fullname="J. Bradley">
              <organization/>
            </author>
            <author fullname="M. Jones">
              <organization/>
            </author>
            <author fullname="B. de Medeiros">
              <organization/>
            </author>
            <author fullname="C. Mortimore">
              <organization/>
            </author>
            <date year="2014" month="November"/>
          </front>
        </reference>
        <reference anchor="CBOR-OID" target="https://www.ietf.org/archive/id/draft-ietf-cbor-tags-oid-08.txt">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="Carsten Bormann">
              <organization>Universität Bremen TZI</organization>
            </author>
            <date day="21" month="May" year="2021"/>
            <abstract>
              <t>   The Concise Binary Object Representation (CBOR, RFC 8949) is a data
   format whose design goals include the possibility of extremely small
   code size, fairly small message size, and extensibility without the
   need for version negotiation.

   The present document defines CBOR tags for object identifiers (OIDs).
   It is intended as the reference document for the IANA registration of
   the CBOR tags so defined.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cbor-tags-oid-08"/>
        </reference>
        <reference anchor="RATS-Architecture" target="https://www.ietf.org/archive/id/draft-ietf-rats-architecture-12.txt">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="23" month="April" year="2021"/>
            <abstract>
              <t>   In network protocol exchanges it is often useful for one end of a
   communication to know whether the other end is in an intended
   operating state.  This document provides an architectural overview of
   the entities involved that make such tests possible through the
   process of generating, conveying, and evaluating evidentiary claims.
   An attempt is made to provide for a model that is neutral toward
   processor architectures, the content of claims, and protocols.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-12"/>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122" target="https://www.rfc-editor.org/info/rfc4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach">
              <organization/>
            </author>
            <author fullname="M. Mealling" initials="M." surname="Mealling">
              <organization/>
            </author>
            <author fullname="R. Salz" initials="R." surname="Salz">
              <organization/>
            </author>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4949" target="https://www.rfc-editor.org/info/rfc4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey">
              <organization/>
            </author>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120" target="https://www.rfc-editor.org/info/rfc7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC                        Required", "IETF Review", or "Standards Action" policies apply.  This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation.  The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">
          <front>
            <title>IEEE Standard, "IEEE 802.1AR Secure Device Identifier"</title>
            <author>
              <organization/>
            </author>
            <date year="2009" month="December"/>
          </front>
        </reference>
        <reference anchor="ECMAScript" target="http://www.ecma-international.org/ecma-262/5.1/ECMA-262.pdf">
          <front>
            <title>Ecma International, "ECMAScript Language Specification, 5.1 Edition", ECMA Standard 262</title>
            <author>
              <organization/>
            </author>
            <date year="2011" month="June"/>
          </front>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/geolocation-API/#coordinates_interface">
          <front>
            <title>Geolocation API Specification 2nd Edition</title>
            <author>
              <organization>Worldwide Web Consortium</organization>
            </author>
            <date year="2018" month="January"/>
          </front>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://webstore.ansi.org/standards/ieee/ieee8022001r2007">
          <front>
            <title>IEEE Standard For Local And Metropolitan Area Networks Overview And Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2007"/>
          </front>
        </reference>
        <reference anchor="FIDO.Registry" target="https://fidoalliance.org/specs/common-specs/fido-registry-v2.1-ps-20191217.html">
          <front>
            <title>FIDO Registry of Predefined Values</title>
            <author>
              <organization>The FIDO Alliance</organization>
            </author>
            <date year="2019" month="December"/>
          </front>
        </reference>
        <reference anchor="FIPS-140" target="https://csrc.nist.gov/publications/detail/fips/140/2/final">
          <front>
            <title>Security Requirements for Cryptographic Modules</title>
            <author>
              <organization>National Institue of Standards</organization>
            </author>
            <date year="2001" month="May"/>
          </front>
        </reference>
        <reference anchor="Common.Criteria" target="https://www.commoncriteriaportal.org/cc/">
          <front>
            <title>Common Criteria for Information Technology Security Evaluation</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="April"/>
          </front>
        </reference>
      </references>
    </references>
    <section anchor="examples" numbered="true" toc="default">
      <name>Examples</name>
      <section anchor="very-simple-eat" numbered="true" toc="default">
        <name>Very Simple EAT</name>
        <t>This is shown in CBOR diagnostic form. Only the payload signed by COSE
is shown.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
{
    / issuer /           1: "joe",
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /            11: h'0198f50a4ff6c05861c8860d13a638ea',
    / secure-boot /     15: true,
    / debug-disable /   16: 3, / permanent-disable /
    / timestamp (iat) /  6: 1(1526542894)
}
]]></artwork>
      </section>
      <section anchor="example-with-submodules-nesting-and-security-levels" numbered="true" toc="default">
        <name>Example with Submodules, Nesting and Security Levels</name>
        <artwork name="" type="" align="left" alt=""><![CDATA[
{
    / nonce /                 10: h'948f8860d13a463e8e',
    / UEID /                  11: h'0198f50a4ff6c05861c8860d13a638ea',
    / secure-boot /           15: true,
    / debug-disable /         16: 3, / permanent-disable  /
    / timestamp (iat) /        6: 1(1526542894),
    / security-level /        14: 3, / secure restricted OS /
    / submods / 20: {
        / first submod, an Android Application /
        "Android App Foo" :  {
            / security-level /  14: 1 / unrestricted /
        },

        / 2nd submod, A nested EAT from a secure element /
        "Secure Element Eat" :
            / an embedded EAT, bytes of which are not shown /
            h'420123',

        / 3rd submod, information about Linux Android /
        "Linux Android": {
            / security-level /  14: 1 / unrestricted /
        }
    }
}
]]></artwork>
      </section>
    </section>
    <section anchor="ueid-design-rationale" numbered="true" toc="default">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability" numbered="true" toc="default">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion datadbase is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table align="center">
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and SW so this
simple approximation is used. See <xref target="BirthdayAttack" format="default"/>.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
    p = k^2 / 2n 
]]></artwork>
        <t>For this calculation:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
    p  Collision Probability
    n  Total population based on number of bits in UEID
    k  Population in a database
]]></artwork>
        <table align="center">
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's 
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of 
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
  t = 1 / ((k / 10) * p)
  
  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table align="center">
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid" numbered="true" toc="default">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122" format="default"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this 
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality 
random numbers, but do so by mapping into the overall UUID 
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>UUIDs seem to have been designed for scenarios where the implementor
does not have full control over the environment and uniqueness has to
be constructed from identifiers at hand. UEID takes the view that
hardware, software and/or manufacturing process directly implement
UEID in a simple and direct way. It takes the view that cryptographic
quality random number generators are readily available as they are
implemented in commonly used CPU hardware.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid" numbered="true" toc="default">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR" format="default"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR" format="default"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs are used with an open set of network protocols for authentication and such.
In these protocols the DevID secret is used to sign a nonce or similar to proof the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT defines network protocol for proving trustworthiness to a relying party, the very thing that is not defined in <xref target="IEEE.802.1AR" format="default"/>.
Nor does not give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat" numbered="true" toc="default">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT defines a network protocol and <xref target="IEEE.802.1AR" format="default"/> doesn't.
Vice versa, EAT doesn't define a an device implementation and DevID does.</t>
        <t>Hence, EAT can be the network protocol that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the Endorsement sent to the Verifier.</t>
        <t>In this case the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity" numbered="true" toc="default">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat" numbered="true" toc="default">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence" numbered="true" toc="default">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR" format="default"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR" format="default"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts" numbered="true" toc="default">
      <name>Changes from Previous Drafts</name>
      <t>The following is a list of known changes from the previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences.</t>
      <section anchor="from-draft-rats-eat-01" numbered="true" toc="default">
        <name>From draft-rats-eat-01</name>
        <ul spacing="normal">
          <li>Added UEID design rationale appendix</li>
        </ul>
      </section>
      <section anchor="from-draft-mandyam-rats-eat-00" numbered="true" toc="default">
        <name>From draft-mandyam-rats-eat-00</name>
        <t>This is a fairly large change in the orientation of the document, but
no new claims have been added.</t>
        <ul spacing="normal">
          <li>Separate information and data model using CDDL.</li>
          <li>Say an EAT is a CWT or JWT</li>
          <li>Use a map to structure the boot_state and location claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-01" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-01</name>
        <ul spacing="normal">
          <li>Clarifications and corrections for OEMID claim</li>
          <li>Minor spelling and other fixes</li>
          <li>Add the nonce claim, clarify jti claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-02" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-02</name>
        <ul spacing="normal">
          <li>Roll all EUIs back into one UEID type</li>
          <li>UEIDs can be one of three lengths, 128, 192 and 256.</li>
          <li>Added appendix justifying UEID design and size.</li>
          <li>Submods part now includes nested eat tokens so they can be named and
there can be more tha one of them</li>
          <li>Lots of fixes to the CDDL</li>
          <li>Added security considerations</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-03" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-03</name>
        <ul spacing="normal">
          <li>Split boot_state into secure-boot and debug-disable claims</li>
          <li>Debug disable is an enumerated type rather than Booleans</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-04" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-04</name>
        <ul spacing="normal">
          <li>Change IMEI-based UEIDs to be encoded as a 14-byte string</li>
          <li>CDDL cleaned up some more</li>
          <li>CDDL allows for JWTs and UCCSs</li>
          <li>CWT format submodules are byte string wrapped</li>
          <li>Allows for JWT nested in CWT and vice versa</li>
          <li>Allows UCCS (unsigned CWTs) and JWT unsecured tokens</li>
          <li>Clarify tag usage when nesting tokens</li>
          <li>Add section on key inclusion</li>
          <li>Add hardware version claims</li>
          <li>Collected CDDL is now filled in. Other CDDL corrections.</li>
          <li>Rename debug-disable to debug-status; clarify that it is not extensible</li>
          <li>Security level claim is not extensible</li>
          <li>Improve specification of location claim and added a location privacy section</li>
          <li>Add intended use claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-05" numbered="true" toc="default">
        <name>From draft-ietf-rats-05</name>
        <ul spacing="normal">
          <li>CDDL format issues resolved</li>
          <li>Corrected reference to Location Privacy section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-06" numbered="true" toc="default">
        <name>From draft-ietf-rats-06</name>
        <ul spacing="normal">
          <li>Added boot-seed claim</li>
          <li>Rework CBOR interoperability section</li>
          <li>Added profiles claim and section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-07" numbered="true" toc="default">
        <name>From draft-ietf-rats-07</name>
        <ul spacing="normal">
          <li>Filled in IANA and other sections for possible preassignment of claim keys for well understood claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-08" numbered="true" toc="default">
        <name>From draft-ietf-rats-08</name>
        <ul spacing="normal">
          <li>Change profile claim to be either a URL or an OID rather than a test string</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-09" numbered="true" toc="default">
        <name>From draft-ietf-rats-09</name>
        <ul spacing="normal">
          <li>Add SUEIDs</li>
          <li>Add appendix comparing IDevID to EAT</li>
          <li>Added section on use for Evidence and Attestation Results</li>
          <li>Fill in the key ID and endorsements identificaiton section</li>
          <li>Remove origination claim as it is replaced by key IDs and endorsements</li>
          <li>Added manifests and software evidence claims</li>
          <li>Add string labels non-claim labels for use with JSON (e.g. labels for members of location claim)</li>
          <li>EAN-13 HW versions are no longer a separate claim. Now they are folded in as a CoSWID version scheme.</li>
        </ul>
      </section>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIADlMuWAAA+y9+27j6JUv+j+fgnAPdtuJJJfrXtXIzHbb7m536rbLrtQc
DAYNSqJkpiRSISm7lEoN8hoDnPPvebA8yVn3b30kVd1JZvbgbEwQJC6R/O7f
uq/fGo/HSdNm5fynbFWV+fO0rbd5Umxq+qtp79+79+ze/WSWtc/Tpp0nybya
ldkaXpzX2aIdF3m7GNdZ24zzrB2vsjZv2iS5Wz5P355eX6Xvq/pDUS7T7+tq
u0m+SmdV2eRls22ep1/v8uZr+KnZTtdF0xRV2e420O7lxfV3yaZ4nqRpW830
PfrHPN+0N/DLQ/x3U9VtnS+a8EazW8c/zKr1Jpu17o3tNPxWVvhTvZjl86bd
rXJ9rS1a/Mf1TZ5elPCPXXra4rSyFsaYXlcf8jI9vDi9Pkqy6bTOb5+n8I8k
q/MMBl+2eV3mbfLhDtarWJY4+cx9PptWNUx6Dgv1PL1/7+TB+ORekm3bm6p+
nozTooThfz9JX8KO7LI1jI8X+/uiLuY3We0eVDUs8v/aZiuY0Tq9zmc3ZbWq
lkXewChmE5wtrE8OM3305Mmj9GVV5zfVtsnT87q4zXF1YGrP06usTM+LfFnh
WuRLGOPz9CxbFYuqLouMFnFbtjW8+e7qFP65uaFjcvDrk/Tpo6fp40cn6RM4
JAfwKF9nxep5uuYh/s8/tMXkDzK+CfyPTu/FJH2xLefTVTbPbYIvsm2dl7M8
ekRTvMpn2xp3ATakqnfpixdnoa/VcvU/i2YFPY7rHE+E7+jlJP02W61g7fO6
aqyrl8Vym686j/5rV9Mt5sP7z565tZzyKPcu5o+T9PXX51VZLW+2YTV/zOt8
vYuf/PIZ3n/yLP0uq0s4qtV2eZO+rbK5zdA9oOnM8XS+O3mYPnlxFc2vLNp8
nv4WLsC8WrupPnyYntx/dD998PjByVM31d9Xcxpsf6pJWdVruD63ORKFt9+d
3T85eSZ/Pnl08kj+fPrsofv1SfjTfn16756+e3L/sf355KH9+ei+/vngmf35
+MQ+e/JQ233w7Cm1gP/BX4DaTU7r2Q3MetbCWeZnbVYvcUlv2nbTPD8+bqtq
1UyQaE5gP45v2vXquEtIM9fK+N5Tbodp0tt8XbV5RI/e1BUQMHi1SX339JXS
Ffx7nC62qxUfjx/y8kP6bVF/uKlWf6SnSo/u30vg32evry4m//zo3rPJOY7t
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
sIrF+878IpxOO6Xq9TrtfwFu1KegHqoBAA==

-->

</rfc>
