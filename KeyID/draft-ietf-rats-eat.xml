<?xml version='1.0' encoding='utf-8'?>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.4.12 -->
<!DOCTYPE rfc SYSTEM "rfc2629-xhtml.ent">
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" obsoletes="" updates="" submissionType="IETF" xml:lang="en" tocInclude="true" tocDepth="4" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.7.0 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@island-resort.com</email>
      </address>
    </author>
    <author initials="M." surname="Ballesteros" fullname="Miguel Ballesteros">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 4299</phone>
        <email>mballest@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <date year="2021" month="May" day="29"/>
    <area>Internet</area>
    <workgroup>RATS Working Group</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides a signed (attested) set of
claims that describe state and characteristics of an entity, typically
a device like a phone or an IoT device.  These claims are used by a
relying party to determine how much it wishes to trust the entity.</t>
      <t>An EAT is either a CWT or JWT with some attestation-oriented 
claims. To a large degree, all this document does is extend
CWT and JWT.</t>
    </abstract>
    <note>
      <name>Contributing</name>
      <t>TBD</t>
    </note>
  </front>
  <middle>
    <section anchor="introduction" numbered="true" toc="default">
      <name>Introduction</name>
      <t>Remote device attestation is a fundamental service that allows a remote
device such as a mobile phone, an Internet-of-Things (IoT) device, or
other endpoint to prove itself to a relying party, a server or a
service.  This allows the relying party to know some characteristics
about the device and decide whether it trusts the device.</t>
      <t>Remote attestation is a fundamental service that can underlie other
protocols and services that need to know about the trustworthiness of
the device before proceeding. One good example is biometric
authentication where the biometric matching is done on the device. The
relying party needs to know that the device is one that is known to do
biometric matching correctly.  Another example is content protection
where the relying party wants to know the device will protect the
data.  This generalizes on to corporate enterprises that might want to
know that a device is trustworthy before allowing corporate data to be
accessed by it.</t>
      <t>The notion of attestation here is large and may include, but is not
limited to the following:</t>
      <ul spacing="normal">
        <li>Proof of the make and model of the device hardware (HW)</li>
        <li>Proof of the make and model of the device processor, particularly
for security-oriented chips</li>
        <li>Measurement of the software (SW) running on the device</li>
        <li>Configuration and state of the device</li>
        <li>Environmental characteristics of the device such as its GPS location</li>
      </ul>
      <section anchor="cwt-jwt-and-uccs" numbered="true" toc="default">
        <name>CWT, JWT and UCCS</name>
        <t>For flexibility and ease of imlpementation in a wide variety of environments, EATs can be either CBOR <xref target="RFC8949" format="default"/> or JSON <xref target="ECMAScript" format="default"/> format.
This specification simultaneously describes both formats.</t>
        <t>An EAT is either a CWT as defined in <xref target="RFC8392" format="default"/>, a UCCS as defined in <xref target="UCCS.Draft" format="default"/>, or a JWT as defined in <xref target="RFC7519" format="default"/>.
This specification extends those specifications with additional claims for attestation.</t>
        <t>The identification of a protocol element as an EAT, whether CBOR or JSON format, follows the general conventions used by CWT, JWT and UCCS.
Largely this depends on the protocol carrying the EAT.
In some cases it may be by content type (e.g., MIME type).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
      </section>
      <section anchor="cddl" numbered="true" toc="default">
        <name>CDDL</name>
        <t>This specification uses CDDL, <xref target="RFC8610" format="default"/>, as the primary formalism to
define each claim.  The implementor then interprets the CDDL to come
to either the CBOR <xref target="RFC8949" format="default"/> or JSON <xref target="ECMAScript" format="default"/>
representation. In the case of JSON, Appendix E of <xref target="RFC8610" format="default"/> is
followed. Additional rules are given in <xref target="jsoninterop" format="default"/> of this
document where Appendix E is insufficient.  (Note that this is not to
define a general means to translate between CBOR and JSON, but only to
define enough such that the claims defined in this document can be
rendered unambiguously in JSON).</t>
        <t>The CWT specification was authored before CDDL was available and did not use it.
This specification includes a CDDL definition of most of what is described in <xref target="RFC8392" format="default"/>.</t>
      </section>
      <section anchor="entity-overview" numbered="true" toc="default">
        <name>Entity Overview</name>
        <t>An "entity" can be any device or device subassembly ("submodule") that
can generate its own attestation in the form of an EAT.  The
attestation should be cryptographically verifiable by the EAT
consumer. An EAT at the device-level can be composed of several
submodule EAT's.</t>
        <t>Modern devices such as a mobile phone have many different execution
environments operating with different security levels. For example, it
is common for a mobile phone to have an "apps" environment that runs
an operating system (OS) that hosts a plethora of downloadable
apps. It may also have a TEE (Trusted Execution Environment) that is
distinct, isolated, and hosts security-oriented functionality like
biometric authentication. Additionally, it may have an eSE (embedded
Secure Element) - a high security chip with defenses against HW
attacks that is used to produce attestations.  This device attestation format
allows the attested data to be tagged at a security level from which
it originates.  In general, any discrete execution environment that
has an identifiable security level can be considered an entity.</t>
      </section>
      <section anchor="use-as-evidence-and-attestation-results" numbered="true" toc="default">
        <name>Use as Evidence and Attestation Results</name>
        <t>Here, normative reference is made to <xref target="RATS-Architecture" format="default"/>, particularly the definition of Evidence, the Verifier, Attestation Results and the Relying Party.
Per Figure 1 in <xref target="RATS-Architecture" format="default"/>, Evidence is a protocol message that goes from the Attester to the Verifier and Attestation Results a message that goes from the Verifier to the Relying Party.
EAT is defined such that it can be used to represent either Evidence, Attestation Results or both.
No claims defined here are considered exclusive to or are prohibited in either use.
It is useful to create EAT profiles as described in <xref target="profiles" format="default"/> for either use.</t>
        <t>It is useful to characterize the relationship of claims in Evidence to those in Attestation Results.</t>
        <t>Many claims in Evidence simply will pass through the Verifier to the Relying Party without modification.
They will be verified as authentic from the device by the Verifier just through normal verification of the Attester's signature.
They will be protected from modification when they are conveyed to the Relying Party by whatever means is used to protect Attestation Results. 
(The details of that protection are out of scope of this document.)</t>
        <t>Some claims in Evidence will be verified by the Verifier by comparison to Reference Values.
In this case the claims in Evidence will not likely be conveyed to the Relying Party.
Instead, some claim indicating they were checked may be added to the Attestation Results or it may be tacitly known that the Verifier always does this check.</t>
        <t>In some cases the Verifier may provide privacy-preserving functionality by stripping or modifying claims that do not posses sufficient privacy-preserving characteristics.</t>
      </section>
      <section anchor="eat-operating-models" numbered="true" toc="default">
        <name>EAT Operating Models</name>
        <t>TODO: Rewrite (or eliminate) this section in light of the RATS architecture draft.</t>
        <t>At least the following three participants exist in all EAT operating
models. Some operating models have additional participants.</t>
        <dl>
          <dt>
The Entity.  </dt>
          <dd>
            <t>This is the phone, the IoT device, the sensor, the sub-assembly or
such that the attestation provides information about.</t>
          </dd>
          <dt>
The Manufacturer.  </dt>
          <dd>
            <t>The company that made the entity.  This may be a chip vendor, a
circuit board module vendor or a vendor of finished consumer products.</t>
          </dd>
          <dt>
The Relying Party.  </dt>
          <dd>
            <t>The server, service or company that makes use of the information in
the EAT about the entity.</t>
          </dd>
        </dl>
        <t>In all operating models, the manufacturer provisions some secret
attestation key material (AKM) into the entity during manufacturing.
This might be during the manufacturer of a chip at a fabrication
facility (fab) or during final assembly of a consumer product or any
time in between. This attestation key material is used for signing
EATs.</t>
        <t>In all operating models, hardware and/or software on the entity create
an EAT of the format described in this document. The EAT is always
signed by the attestation key material provisioned by the
manufacturer.</t>
        <t>In all operating models, the relying party must end up knowing that
the signature on the EAT is valid and consistent with data from claims
in the EAT.  This can happen in many different ways. Here are some
examples.</t>
        <ul spacing="normal">
          <li>The EAT is transmitted to the relying party. The relying party gets
corresponding key material (e.g. a root certificate) from the
manufacturer. The relying party performs the verification.</li>
          <li>The EAT is transmitted to the relying party. The relying party
transmits the EAT to a verification service offered by the
manufacturer. The server returns the validated claims.</li>
          <li>The EAT is transmitted directly to a verification service, perhaps
operated by the manufacturer or perhaps by another party. It
verifies the EAT and makes the validated claims available to the
relying party. It may even modify the claims in some way and re-sign
the EAT (with a different signing key).</li>
        </ul>
        <t>All these operating models are supported and there is no preference
of one over the other. It is important to support this variety of
operating models to generally facilitate deployment and to allow for
some special scenarios. One special scenario has a validation service
that is monetized, most likely by the manufacturer.  In another, a
privacy proxy service processes the EAT before it is transmitted to
the relying party. In yet another, symmetric key material is used for
signing. In this case the manufacturer should perform the
verification, because any release of the key material would enable a
participant other than the entity to create valid signed EATs.</t>
      </section>
      <section anchor="what-is-not-standardized" numbered="true" toc="default">
        <name>What is Not Standardized</name>
        <t>The following is not standardized for EAT, just the same they are not
standardized for CWT or JWT.</t>
        <section anchor="transmission-protocol" numbered="true" toc="default">
          <name>Transmission Protocol</name>
          <t>EATs may be transmitted by any protocol the same as CWTs and JWTs. For
example, they might be added in extension fields of other protocols,
bundled into an HTTP header, or just transmitted as files. This
flexibility is intentional to allow broader adoption. This flexibility
is possible because EAT's are self-secured with signing (and possibly
additionally with encryption and anti-replay). The transmission
protocol is not required to fulfill any additional security
requirements.</t>
          <t>For certain devices, a direct connection may not exist between the
EAT-producing device and the Relying Party. In such cases, the EAT
should be protected against malicious access. The use of COSE and JOSE
allows for signing and encryption of the EAT. Therefore, even if the
EAT is conveyed through intermediaries between the device and Relying
Party, such intermediaries cannot easily modify the EAT payload or
alter the signature.</t>
        </section>
        <section anchor="signing-scheme" numbered="true" toc="default">
          <name>Signing Scheme</name>
          <t>The term "signing scheme" is used to refer to the system that includes
end-end process of establishing signing attestation key material in
the entity, signing the EAT, and verifying it. This might involve key
IDs and X.509 certificate chains or something similar but
different. The term "signing algorithm" refers just to the algorithm
ID in the COSE signing structure. No particular signing algorithm or
signing scheme is required by this standard.</t>
          <t>There are three main implementation issues driving this. First, secure
non-volatile storage space in the entity for the attestation key
material may be highly limited, perhaps to only a few hundred bits, on
some small IoT chips. Second, the factory cost of provisioning key
material in each chip or device may be high, with even millisecond
delays adding to the cost of a chip. Third, privacy-preserving signing
schemes like ECDAA (Elliptic Curve Direct Anonymous Attestation) are
complex and not suitable for all use cases.</t>
          <t>Over time to faciliate interoperability, some signing schemes may be
defined in EAT profiles or other documents either in the IETF or outside.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology" numbered="true" toc="default">
      <name>Terminology</name>
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in
BCP 14 <xref target="RFC2119" format="default"/> <xref target="RFC8174" format="default"/> when, and only when, they appear in all
capitals, as shown here.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519" format="default"/>, COSE
<xref target="RFC8152" format="default"/>, and CWT <xref target="RFC8392" format="default"/>.</t>
      <dl>
        <dt>
Claim Name.  </dt>
        <dd>
          <t>The human-readable name used to identify a claim.</t>
        </dd>
        <dt>
Claim Key.  </dt>
        <dd>
          <t>The CBOR map key or JSON name used to identify a claim.</t>
        </dd>
        <dt>
Claim Value.  </dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>
CWT Claims Set.  </dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
        <dt>
Attestation Key Material (AKM).  </dt>
        <dd>
          <t>The key material used to sign the EAT token. If it is done
symmetrically with HMAC, then this is a simple symmetric key.
If it is done with ECC, such as an IEEE DevID <xref target="IDevID" format="default"/>, then this
is the private part of the EC key pair. If ECDAA 
is used, (e.g., as used by Enhanced Privacy ID, i.e. EPID) then it is the key material 
needed for ECDAA.</t>
        </dd>
      </dl>
    </section>
    <section anchor="the-claims" numbered="true" toc="default">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation. It also
mentions several claims defined by CWT and JWT that are particularly
important for EAT.</t>
      <t>Note also:
* Any claim defined for CWT or JWT may be used in an EAT including 
  those in the CWT <xref target="IANA.CWT.Claims" format="default"/> and JWT IANA <xref target="IANA.JWT.Claims" format="default"/>
  claims registries.</t>
      <ul spacing="normal">
        <li>All claims are optional</li>
        <li>No claims are mandatory</li>
        <li>All claims that are not understood by implementations MUST be ignored</li>
      </ul>
      <t>There are no default values or meanings assigned to absent claims
other than they are not reported. The reason for a claim's absence may
be the implementation not supporting the claim, an inability to
determine its value, or a preference to report in a different way such
as a proprietary claim.</t>
      <t>CDDL along with text descriptions is used to define each claim
indepdent of encoding.  Each claim is defined as a CDDL group (the
group is a general aggregation and type definition feature of
CDDL). In the encoding section <xref target="encoding" format="default"/>, the CDDL groups turn into
CBOR map entries and JSON name/value pairs.</t>
      <t>Map labels are assigned both an integer and string value.
CBOR encoded tokens MUST use only integer labels.
JSON encoded tokens MUST use only string labels.</t>
      <t>TODO: add paragraph here about use for Attestation Evidence and for Results.</t>
      <section anchor="token-id-claim-cti-and-jti" numbered="true" toc="default">
        <name>Token ID Claim (cti and jti)</name>
        <t>CWT defines the "cti" claim. JWT defines the "jti" claim. These are
equivalent to each other in EAT and carry a unique token identifier as
they do in JWT and CWT.  They may be used to defend against re use of
the token but are distinct from the nonce that is used by the relying
party to guarantee freshness and defend against replay.</t>
      </section>
      <section anchor="timestamp-claim-iat" numbered="true" toc="default">
        <name>Timestamp claim (iat)</name>
        <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
        <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even 
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
        <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. No token may contain an iat claim in
float-point format. Any recipient of a token with a floating-point
format iat claim may consider it an error.  A 64-bit integer 
representation of epoch time can represent a range of +/- 500 billion
years, so the only point of a floating-point timestamp is to 
have precession greater than one second. This is not needed for EAT.</t>
      </section>
      <section anchor="nonce-claim-nonce" numbered="true" toc="default">
        <name>Nonce Claim (nonce)</name>
        <t>All EATs should have a nonce to prevent replay attacks. The nonce is
generated by the relying party, the end consumer of the token. It is
conveyed to the entity over whatever transport is in use before the
token is generated and then included in the token as the nonce claim.</t>
        <t>This documents the nonce claim for registration in the IANA CWT 
claims registry. This is equivalent to the JWT nonce claim that is
already registered.</t>
        <t>The nonce must be at least 8 bytes (64 bits) as fewer are unlikely
to be secure. A maximum of 64 bytes is set to limit the memory
a constrained implementation uses. This size range is not set
for the already-registered JWT nonce, but it should follow
this size recommendation when used in an EAT.</t>
        <t>Multiple nonces are allowed to accommodate multistage verification
and consumption.</t>
        <section anchor="nonce-cddl" numbered="true" toc="default">
          <name>nonce CDDL</name>
          <sourcecode type="CDDL">
nonce-type = bstr .size (8..64)

nonce-claim = (
    nonce =&gt; nonce-type / [ 2* nonce-type ]
)
</sourcecode>
        </section>
      </section>
      <section anchor="universal-entity-id-claim-ueid" numbered="true" toc="default">
        <name>Universal Entity ID Claim (ueid)</name>
        <t>UEID's identify individual manufactured entities / devices such as a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire device or a submodule or
subsystem. It does not identify types, models or classes of
devices. It is akin to a serial number, though it does not have to be
sequential.</t>
        <t>UEID's must be universally and globally unique across manufacturers
and countries. UEIDs must also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then relying parties receiving them will have
to track other characteristics of the device to keep devices distinct
between manufacturers).</t>
        <t>There are privacy considerations for UEID's. See <xref target="ueidprivacyconsiderations" format="default"/>.</t>
        <t>The UEID should be permanent. It should never change for a given
device / entity. In addition, it should not be reprogrammable.  UEID's
are variable length. All implementations MUST be able to receive
UEID's that are 33 bytes long (1 type byte and 256 bits).  The
recommended maximum sent is also 33 bytes.</t>
        <t>When the entity constructs the UEID, the first byte is a type and the
following bytes the ID for that type. Several types are allowed to
accommodate different industries and different manufacturing processes
and to give options to avoid paying fees for certain types of
manufacturer registrations.</t>
        <t>Creation of new types requires a Standards Action <xref target="RFC8126" format="default"/>.</t>
        <table anchor="ueid-types-table" align="center">
          <name>UEID Composition Types</name>
          <thead>
            <tr>
              <th align="left">Type Byte</th>
              <th align="left">Type Name</th>
              <th align="left">Specification</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">0x01</td>
              <td align="left">RAND</td>
              <td align="left">This is a 128, 192 or 256 bit random number generated once and stored in the device. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the device and stored. It may not be smaller than 128 bits.</td>
            </tr>
            <tr>
              <td align="left">0x02</td>
              <td align="left">IEEE EUI</td>
              <td align="left">This makes use of the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-device identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while devices with multiple network interfaces may have multiple MAC addresses, there is only one UEID for a device) <xref target="IEEE.802-2001" format="default"/>, <xref target="OUI.Guide" format="default"/></td>
            </tr>
            <tr>
              <td align="left">0x03</td>
              <td align="left">IMEI</td>
              <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which SHALL be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded SHALL NOT include Luhn checksum or SVN information. <xref target="ThreeGPP.IMEI" format="default"/></td>
            </tr>
          </tbody>
        </table>
        <t>UEID's are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
        <t>The consumer (the relying party) of a UEID MUST treat a UEID as a
completely opaque string of bytes and not make any use of its internal
structure. For example, they should not use the OUI part of a type
0x02 UEID to identify the manufacturer of the device. Instead they
should use the oemid claim that is defined elsewhere. The reasons for
this are:</t>
        <ul spacing="normal">
          <li>UEIDs types may vary freely from one manufacturer to the next.</li>
          <li>New types of UEIDs may be created. For example, a type 0x07 UEID may
be created based on some other manufacturer registration scheme.</li>
          <li>Device manufacturers are allowed to change from one type of UEID to
another anytime they want. For example, they may find they can
optimize their manufacturing by switching from type 0x01 to type
0x02 or vice versa.  The main requirement on the manufacturer is
that UEIDs be universally unique.</li>
        </ul>
        <section anchor="ueid-cddl" numbered="true" toc="default">
          <name>ueid CDDL</name>
          <sourcecode type="CDDL">
ueid-type = bstr .size (7..33)

ueid-claim = (
     ueid =&gt; ueid-type
)
</sourcecode>
        </section>
      </section>
      <section anchor="oemid" numbered="true" toc="default">
        <name>OEM Identification by IEEE (oemid)</name>
        <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE.RA" format="default"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide" format="default"/> and provides a lookup
services <xref target="OUI.Lookup" format="default"/></t>
        <t>Companies that have more than one of these IDs or MAC address blocks
should pick one and prefer that for all their devices.</t>
        <t>Commonly, these are expressed in Hexadecimal Representation
<xref target="IEEE.802-2001" format="default"/> also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48. For JSON encoded
tokens, this is further base64url encoded.</t>
        <section anchor="oemid-cddl" numbered="true" toc="default">
          <name>oemid CDDL</name>
          <sourcecode type="CDDL">
oemid-claim = (
    oemid =&gt; bstr
)
</sourcecode>
        </section>
      </section>
      <section anchor="hardware-version-claims-hardware-version-claims" numbered="true" toc="default">
        <name>Hardware Version Claims (hardware-version-claims)</name>
        <t>The hardware version can be claimed at three different levels, the chip, the circuit board and the final device assembly.
An EAT can include any combination these claims.</t>
        <t>The hardware version is a simple text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID" format="default"/>.</t>
        <t>The hardware version can also be given by a 13-digit European Article Number <xref target="EAN-13" format="default"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.
This claim is the ASCII text representation of actual digits often printed with a bar code.
Use of this claim must comply with the EAN allocation and assignment rules.
For example, this requires the manufacturer to obtain a manufacture code from GS1.</t>
        <t>Both the simple version string and EAN-13 versions may be included for the same hardware.</t>
        <sourcecode type="CDDL">
chip-version-claim = (
    chip-version =&gt; tstr
)

chip-version-scheme-claim = (
    chip-version-scheme =&gt; $version-scheme
)

board-version-claim = (
    board-version =&gt; tstr
)

board-version-scheme-claim = (
    board-version-scheme =&gt; $version-scheme
)

device-version-claim = (
    device-version =&gt; tstr
)

device-version-scheme-claim = (
    device-version-scheme =&gt; $version-scheme
)


ean-type = text .regexp "[0-9]{13}"

ean-chip-version-claim = (
    ean-chip-version =&gt; ean-type
)

ean-board-version-claim = (
    ean-board-version =&gt; ean-type
)

ean-device-version-claim = (
    ean-device-version =&gt; ean-type
)

hardware-version-claims = (
    ? chip-version-claim,
    ? board-version-claim,
    ? device-version-claim,
    ? chip-version-scheme-claim,
    ? board-version-scheme-claim,
    ? device-version-scheme-claim,
    ? ean-chip-version-claim,
    ? ean-board-version-claim,
    ? ean-device-version-claim,
)

</sourcecode>
      </section>
      <section anchor="software-description-and-version" numbered="true" toc="default">
        <name>Software Description and Version</name>
        <t>TODO: Add claims that reference CoSWID.</t>
      </section>
      <section anchor="the-security-level-claim-security-level" numbered="true" toc="default">
        <name>The Security Level Claim (security-level)</name>
        <t>This claim characterizes the device/entity 
ability to defend against attacks aimed at capturing the signing
key, forging claims and at forging EATs. This is done by
defining four security levels as described below. This is similar
to the key protection types defined by the Fast Identity Online (FIDO) Alliance <xref target="FIDO.Registry" format="default"/>.</t>
        <t>These claims describe security environment and countermeasures
available on the end-entity / client device where the attestation key
reside and the claims originate.</t>
        <dl>
          <dt>
1 -- Unrestricted  </dt>
          <dd>
            <t>There is some expectation that implementor will
protect the attestation signing keys at this level. Otherwise
the EAT provides no meaningful security assurances.</t>
          </dd>
          <dt>
2-- Restricted  </dt>
          <dd>
            <t>Entities at this level should not be general-purpose
operating environments that host features such as app download
systems, web browsers and complex productivity applications.
It is akin to the Secure Restricted level (see below) without the
security orientation. Examples include a Wi-Fi subsystem,
an IoT camera, or sensor device.</t>
          </dd>
          <dt>
3 -- Secure Restricted  </dt>
          <dd>
            <t>Entities at this level must meet the criteria defined by FIDO Allowed
Restricted Operating Environments <xref target="FIDO.AROE" format="default"/>. Examples include TEE's and 
schemes using virtualization-based security. Like the FIDO security goal,
security at this level is aimed at defending well against large-scale
network / remote attacks against the device.</t>
          </dd>
          <dt>
4 -- Hardware  </dt>
          <dd>
            <t>Entities at this level must include substantial defense 
against physical or electrical attacks against the device itself.
It is assumed any potential attacker has captured the device and can 
disassemble it. Example include TPMs and Secure Elements.</t>
          </dd>
        </dl>
        <t>The entity should claim the highest security level it achieves and no higher.
This set is not extensible so as to provide a common interoperable description of security level to the relying party.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of security and its own proprietary claim as a refined indication.</t>
        <t>This claim is not intended as a replacement for a proper end-device
security certification schemes such as those based on FIPS 140 <xref target="FIPS-140" format="default"/> 
or those based on Common Criteria <xref target="Common.Criteria" format="default"/>. The 
claim made here is solely a self-claim made by the Entity Originator.</t>
        <section anchor="security-level-cddl" numbered="true" toc="default">
          <name>security-level CDDL</name>
          <sourcecode type="CDDL">
security-level-cbor-type = &amp;(
    unrestricted: 1,
    restricted: 2,
    secure-restricted: 3,
    hardware: 4
)

security-level-json-type = 
    "unrestricted" /
    "restricted" /
    "secure-restricted" /
    "hardware"

security-level-claim = (
    security-level =&gt; security-level-cbor-type / security-level-json-type
)
</sourcecode>
        </section>
      </section>
      <section anchor="secure-boot-claim-secure-boot" numbered="true" toc="default">
        <name>Secure Boot Claim (secure-boot)</name>
        <t>The value of true indicates secure boot is enabled. Secure boot is
considered enabled when base software, the firmware and operating
system, are under control of the entity manufacturer identified in the
oemid claimd described in <xref target="oemid" format="default"/>. This may because the software is
in ROM or because it is cryptographically authenticated or some
combination of the two or other.</t>
        <section anchor="secure-boot-cddl" numbered="true" toc="default">
          <name>secure-boot CDDL</name>
          <sourcecode type="CDDL">
secure-boot-claim = (
    secure-boot =&gt; bool
)
</sourcecode>
        </section>
      </section>
      <section anchor="debug-status-claim-debug-status" numbered="true" toc="default">
        <name>Debug Status Claim (debug-status)</name>
        <t>This applies to system-wide or submodule-wide debug facilities of the
target device / submodule like JTAG and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
        <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-device
public keys.</t>
        <t>As with all claims, the absence of the debug level claim means
it is not reported. A conservative interpretation might assume
the Not Disabled state. It could however be that it is reported
in a proprietary claim.</t>
        <t>This claim is not extensible so as to provide a common interoperable description of debug status to the relying party.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
        <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
        <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The verifier or relying party receiving an EAT cannot
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
        <t>An individual target device / submodule may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
        <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the relying party can know the debug status
of the submodules since there is no inheritance.</t>
        <section anchor="enabled" numbered="true" toc="default">
          <name>Enabled</name>
          <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
        </section>
        <section anchor="disabled" numbered="true" toc="default">
          <name>Disabled</name>
          <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future, and it may also be
possible that they were enabled in the past after the
target device/sub-system booted/started, but they are currently disabled.</t>
        </section>
        <section anchor="disabled-since-boot" numbered="true" toc="default">
          <name>Disabled Since Boot</name>
          <t>This level indicates all debug facilities are currently disabled and
have been so since the target device/sub-system booted/started.</t>
        </section>
        <section anchor="disabled-permanently" numbered="true" toc="default">
          <name>Disabled Permanently</name>
          <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer cannot enable them. Only
the manufacturer indicated in the OEMID claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
        </section>
        <section anchor="disabled-fully-and-permanently" numbered="true" toc="default">
          <name>Disabled Fully and Permanently</name>
          <t>This level indicates that all debug capabilities for the target
device/sub-module are permanently disabled.</t>
        </section>
        <section anchor="debug-status-cddl" numbered="true" toc="default">
          <name>debug-status CDDL</name>
          <sourcecode type="CDDL">
debug-status-cbor-type = &amp;(
    enabled: 0,
    disabled: 1,
    disabled-since-boot: 2,
    disabled-permanently: 3,
    disabled-fully-and-permanently: 4
)

debug-status-json-type = 
    "enabled" /
    "disabled" /
    "disabled-since-boot" /
    "disabled-permanently" /
    "disabled-fully-and-permanently"

debug-status-claim = (
    debug-status =&gt; debug-status-cbor-type / debug-status-json-type
)
</sourcecode>
        </section>
      </section>
      <section anchor="including-keys" numbered="true" toc="default">
        <name>Including Keys</name>
        <t>An EAT may include a cryptographic key such as a public key.
The signing of the EAT binds the key to all the other claims in the token.</t>
        <t>The purpose for inclusion of the key may vary by use case.
For example, the key may be included as part of an IoT device onboarding protocol.
When the FIDO protocol includes a pubic key in its attestation message, the key represents the binding of a user, device and relying party.
This document describes how claims containing keys should be defined for the various use cases.
It does not define specific claims for specific use cases.</t>
        <t>Keys in CBOR format tokens SHOULD be the COSE_Key format <xref target="RFC8152" format="default"/> and keys in JSON format tokens SHOULD be the JSON Web Key format <xref target="RFC7517" format="default"/>.
These two formats support many common key types.
Their use avoids the need to decode other serialization formats.
These two formats can be extended to support further key types through their IANA registries.</t>
        <t>The general confirmation claim format <xref target="RFC8747" format="default"/>, <xref target="RFC7800" format="default"/> may also be used.
It provides key encryption. 
It also allows for inclusion by reference through a key ID.
The confirmation claim format may employed in the definition of some new claim for a a particular use case.</t>
        <t>When the actual confirmation claim is included in an EAT, this document associates no use case semantics other than proof of posession.
Different EAT use cases may choose to associate further semantics.
The key in the confirmation claim MUST be protected the same as the key used to sign the EAT. 
That is, the same, equivalent or better hardware defenses, access controls, key generation and such must be used.</t>
      </section>
      <section anchor="the-location-claim-location" numbered="true" toc="default">
        <name>The Location Claim (location)</name>
        <t>The location claim gives the location of the device entity from which the attestation originates.
It is derived from the W3C Geolocation API <xref target="W3C.GeoLoc" format="default"/>.
The latitude, longitude, altitude and accuracy must conform to <xref target="WGS84" format="default"/>.
The altitude is in meters above the <xref target="WGS84" format="default"/> ellipsoid.
The two accuracy values are positive numbers in meters.
The heading is in degrees relative to true north.
If the device is stationary, the heading is NaN (floating-point not-a-number).
The speed is the horizontal component of the device velocity in meters per second.</t>
        <t>When encoding floating-point numbers half-precision should not be used.
It usually does not provide enough precision for a geographic location.
It is not a requirement that the receiver of an EAT implement half-precision, so the receiver may not be able to decode the location.</t>
        <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.</t>
        <t>The age data item can be used when the entity doesn't know what time
it is either because it doesn't have a clock or it isn't set. The
entity must still have a "ticker" that can measure a time
interval. The age is the interval between acquisition of the location
data and token creation.</t>
        <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations" format="default"/> below.</t>
        <section anchor="location-cddl" numbered="true" toc="default">
          <name>location CDDL</name>
          <sourcecode type="CDDL">
location-type = {
    latitude =&gt; number,
    longitude =&gt; number,
    ? altitude =&gt; number,
    ? accuracy =&gt; number,
    ? altitude-accuracy =&gt; number,
    ? heading =&gt; number,
    ? speed =&gt; number,
    ? timestamp =&gt; ~time-int,
    ? age =&gt; uint
}

latitude = 1 / "latitude"
longitude = 2 / "longitude"
altitude = 3 / "altitude"
accuracy = 4 / "accuracy"
altitude-accuracy = 5 / "altitude-accuracy"
heading = 6 / "heading"
speed = 7 / "speed"
timestamp = 8 / "timestamp"
age = 9 / "age"

location-claim = (
    location-label =&gt; location-type
)
</sourcecode>
        </section>
      </section>
      <section anchor="the-uptime-claim-uptime" numbered="true" toc="default">
        <name>The Uptime Claim (uptime)</name>
        <t>The "uptime" claim contains a value that represents the number of
seconds that have elapsed since the entity or submod was last booted.</t>
        <section anchor="uptime-cddl" numbered="true" toc="default">
          <name>uptime CDDL</name>
          <sourcecode type="CDDL">
uptime-claim = (
    uptime =&gt; uint
)
</sourcecode>
        </section>
      </section>
      <section anchor="the-boot-seed-claim-boot-seed" numbered="true" toc="default">
        <name>The Boot Seed Claim (boot-seed)</name>
        <t>The Boot Seed claim is a random value created at system boot time that will allow differentiation of reports from different boot sessions.
This value is usually public and not protected.
It is not the same as a seed for a random number generator which must be kept secret.</t>
        <sourcecode type="CDDL">
boot-seed-claim = (
    boot-seed =&gt; bytes
)
</sourcecode>
      </section>
      <section anchor="the-intended-use-claim-intended-use" numbered="true" toc="default">
        <name>The Intended Use Claim (intended-use)</name>
        <t>EAT's may be used in the context of several different applications.  The intended-use
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it uses EAT.</t>
        <dl>
          <dt>
1 -- Generic  </dt>
          <dd>
            <t>Generic attestation describes an application where the EAT consumer
requres the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
          </dd>
          <dt>
2-- Registration  </dt>
          <dd>
            <t>Entities that are registering for a new service may be expected to 
provide an attestation as part of the registration process.  This intended-use
setting indicates that the attestation is not intended for any use but registration.</t>
          </dd>
          <dt>
3 -- Provisioning  </dt>
          <dd>
            <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess device security state of the entity prior to provisioning.</t>
          </dd>
          <dt>
4 -- Certificate Issuance (Certificate Signing Request)  </dt>
          <dd>
            <t>Certifying authorities (CA's) may require attestations prior to
the issuance of certificates related to keypairs hosted at the entity.  An
EAT may be used as part of the certificate signing request (CSR).</t>
          </dd>
          <dt>
5 -- Proof-of-Possession  </dt>
          <dd>
            <t>An EAT consumer may require an attestation as part of an accompanying 
proof-of-possession (PoP) appication. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has posession
of a key.  This kind of attestation may be neceesary to verify the
security state of the entity storing the private key used in a PoP application.</t>
          </dd>
        </dl>
        <section anchor="intended-use-cddl" numbered="true" toc="default">
          <name>intended-use CDDL</name>
          <sourcecode type="CDDL">
intended-use-cbor-type = &amp;(
    generic: 1,
    registration: 2,
    provisioning: 3,
    csr: 4,
    pop:  5
)

intended-use-json-type = 
    "generic" /
    "registration" /
    "provisioning" /
    "csr" /
    "pop" 

intended-use-claim = (
    intended-use =&gt; intended-use-cbor-type / intended-use-json-type
)
</sourcecode>
        </section>
      </section>
      <section anchor="profile-claim" numbered="true" toc="default">
        <name>The Profile Claim (profile)</name>
        <t>See <xref target="profiles" format="default"/> for the detailed description of a profile.</t>
        <t>A profile is identified by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the profile claim is to uniquely identify the profile even if it is a private profile.</t>
        <t>The OID is encoded in CBOR according to <xref target="CBOR-OID" format="default"/> and the URI according to <xref target="RFC8949" format="default"/>.
Both are unwrapped and thus not tags.
The OID is always absolute and never relative.
If the claims CBOR type is a text string it is a URI and if a byte string it is an OID.</t>
        <t>Note that this named "eat_profile" for JWT and is distinct from the already registered "profile" claim in the JWT claims registry.</t>
        <sourcecode type="CDDL">
oid = #6.4000(bstr) ; TODO: fill this in with correct CDDL from OID RFC

profile-claim = (
    profile =&gt; ~uri / ~oid
)
</sourcecode>
      </section>
      <section anchor="the-software-manifests-claim-manifests" numbered="true" toc="default">
        <name>The Software Manifests Claim (manifests)</name>
        <t>This claim contains descriptions of software that is present on the device.
These manifests are installed on the device when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the device, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is that they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the Verifier and/or the Relying Party.</t>
        <t>In some cases these will be signed by the software manufacturer independent of any signing for the purpose of EAT attestation.
Manifest claims should include the manufacturer's signature (which will be signed over  by the attestation signature).
In other cases the attestation signature will be the only one.</t>
        <t>This claim allows multiple formats for the manifest.
For example the manifest may be a CBOR-format CoSWID, an XML-format SWID or other.
Identification of the type of manifest is always by a CBOR tag.
In many cases, for examples CoSWID, a tag will already be registered with IANA.
If not, a tag MUST be registered.
It can be in the first-come-first-served space which has minimal requirements for registration.</t>
        <t>The claim is an array of one or more manifests.
To facilitate hand off of the manifest to a decoding library, each manifest is contained in a byte string.
This occurs for CBOR-format manifests as well as non-CBOR format manifests.</t>
        <t>If a particular manifest type uses CBOR encoding, then the item in the array for it MUST be a byte string that contains a CBOR tag.
The EAT decoder must decode the byte string and then the CBOR within it to find the tag number to identify the type of manifest.
The contents of the byte string is then handed to the particular manifest processor for that type of manifest.
CoSWID and SUIT manifest are examples of this.</t>
        <t>If a particular manifest type does not use CBOR encoding, then the item in the array for it must be a CBOR tag that contains a byte string.
The EAT decoder uses the tag to identify the processor for that type of manifest.
The contents of the tag, the byte string, are handed to the manifest processor.
Note that a byte string is used to contain the manifest whether it is a text based format or not.
An example of this is an XML format ISO/IEC 19770 SWID.</t>
        <t>It is not possible to describe the above requirements in CDDL so the type for an individual manifest is any in the CDDL below.
The above text sets the encoding requirement.</t>
        <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests may be of multiple formats.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
        <t>When the <xref target="CoSWID" format="default"/> format is used, it MUST be a payload CoSWID, not an evidence CoSWID.</t>
        <sourcecode type="CDDL">
manifests-claim = (
    manifests =&gt; manifests-type
)

manifests-type = [+ $manifest-formats]

; Must be a CoSWID payload type
$manifest-formats /= bytes .cbor concise-swid-tag

$manifest-formats /= bytes .cbor SUIT_Envelope_Tagged

</sourcecode>
      </section>
      <section anchor="the-software-evidence-claim-swevidence" numbered="true" toc="default">
        <name>The Software Evidence Claim {swevidence}</name>
        <t>This claim contains descriptions, lists, evidence or measurements of the software that exists on the device.
The defining characteristic of this claim is that its contents are created by processes on the device that inventory, measure or otherwise characterize the software on the device.
The contents of this claim do not originate from the software manufacturer.</t>
        <t>In most cases the contents of this claim are signed as part of attestation signing, but independent signing in addition to the attestation signing is not ruled out when a particular evidence format supports it.</t>
        <t>This claim uses the same mechanism for identification of the type of the swevidence as is used for the type of the manifest in the manifests claim.
It also uses the same byte string based mechanism for containing the claim and easing the hand off to a processing library.
See the discussion above in the manifests claim.</t>
        <t>When the <xref target="CoSWID" format="default"/> format is used, it MUST be evidence CoSWIDs, not payload CoSWIDS.</t>
        <sourcecode type="CDDL">
swevidence-claim = (
    swevidence =&gt; swevidence-type
)

swevidence-type = [+ $swevidence-formats]

; Must be a CoSWID evidence type
$swevidence-formats /= bytes .cbor concise-swid-tag

</sourcecode>
      </section>
      <section anchor="the-submodules-part-of-a-token-submods" numbered="true" toc="default">
        <name>The Submodules Part of a Token (submods)</name>
        <t>Some devices are complex, having many subsystems or submodules.  A
mobile phone is a good example. It may have several connectivity
submodules for communications (e.g., Wi-Fi and cellular). It may have
subsystems for low-power audio and video playback. It may have one or
more security-oriented subsystems like a TEE or a Secure Element.</t>
        <t>The claims for each these can be grouped together in a submodule.</t>
        <t>The submods part of a token are in a single map/object with many entries, one
per submodule.  There is only one submods map in a token. It is
identified by its specific label. It is a peer to other claims, but it
is not called a claim because it is a container for a claim set rather
than an individual claim. This submods part of a token allows what
might be called recursion. It allows claim sets inside of claim sets
inside of claims sets...</t>
        <section anchor="two-types-of-submodules" numbered="true" toc="default">
          <name>Two Types of Submodules</name>
          <t>Each entry in the submod map is one of two types:</t>
          <ul spacing="normal">
            <li>A non-token submodule that is a map or object directly containing claims for the submodule.</li>
            <li>A nested EAT that is a fully formed, independently signed EAT token</li>
          </ul>
          <section anchor="non-token-submodules" numbered="true" toc="default">
            <name>Non-token Submodules</name>
            <t>This is simply a map or object containing claims about the submodule.</t>
            <t>It may contain claims that are the same as its surrounding token or superior submodules. 
For example, the top-level of the token may have a UEID, a submod may have a different UEID and a further subordinate submodule may also have a UEID.</t>
            <t>It is signed/encrypted along with the rest of the token and thus the claims are secured by the same Attester with the same signing key as the rest of the token.</t>
            <t>If a token is in CBOR format (a CWT or a UCCS), all non-token submodules must be CBOR format.
If a token in in JSON format (a JWT), all non-token submodules must be in JSON format.</t>
            <t>When decoding, this type of submodule is recognized from the other type by being a data item of type map for CBOR or type object for JSON.</t>
          </section>
          <section anchor="nested-eats" numbered="true" toc="default">
            <name>Nested EATs</name>
            <t>This type of submodule is a fully formed secured EAT as defined in this document except that it MUST NOT be a UCCS or an unsecured JWT.
A nested token that is one that is always secured using COSE or JOSE, usually by an independent Attester.
When the surrounding EAT is a CWT or secured JWT, the nested token becomes securely bound with the other claims in the surrounding token.</t>
            <t>It is allowed to have a CWT as a submodule in a JWT and vice versa, but this SHOULD be avoided unless necessary.</t>
            <section anchor="surrounding-eat-is-cbor-format" numbered="true" toc="default">
              <name>Surrounding EAT is CBOR format</name>
              <t>They type of an EAT nested in a CWT is determined by whether the CBOR type is a text string or a byte string.
If a text string, then it is a JWT.
If a byte string, then it is a CWT.</t>
              <t>A CWT nested in a CBOR-format token is always wrapped by a byte string for easier handling with standard CBOR decoders and token processing APIs that will typically take a byte buffer as input.</t>
              <t>Nested CWTs may be either a CWT CBOR tag or a CWT Protocol Message.
COSE layers in nested CWT EATs MUST be a COSE_Tagged_Message, never a COSE_Untagged_Message.
If a nested EAT has more than one level of COSE, for example one that is both encrypted and signed, a COSE_Tagged_message must be used at every level.</t>
            </section>
            <section anchor="surrounding-eat-is-json-format" numbered="true" toc="default">
              <name>Surrounding EAT is JSON format</name>
              <t>When a CWT is nested in a JWT, it must be as a 55799 tag in order to distinguish it from a nested JWT.</t>
              <t>When a nested EAT in a JWT is decoded, first remove the base64url encoding.
Next, check to see if it starts with the bytes 0xd9d9f7.
If so, then it is a CWT as a JWT will never start with these four bytes. 
If not if it is a JWT.</t>
              <t>Other than the 55799 tag requirement, tag usage for CWT's nested in a JSON format token follow the same rules as for CWTs nested in CBOR-format tokens.
It may be a CWT CBOR tag or a CWT Protocol Message and COSE_Tagged_Message MUST be used at all COSE layers.</t>
            </section>
          </section>
          <section anchor="unsecured-jwts-and-uccs-tokens-as-submodules" numbered="true" toc="default">
            <name>Unsecured JWTs and UCCS Tokens as Submodules</name>
            <t>To incorporate a UCCS token as a submodule, it MUST be as a non-token submodule. 
This can be accomplished inserting the content of the UCCS Tag into the submodule map.
The content of a UCCS tag is exactly a map of claims as required for a non-token submodule.
If the UCCS is not a UCCS tag, then it can just be inserted into the submodule map directly.</t>
            <t>The definition of a nested EAT type of submodule is that it is one that is secured (signed) by an Attester.
Since UCCS tokens are unsecured, they do not fulfill this definition and must be non-token submodules.</t>
            <t>To incorporate an Unsecured JWT as a submodule, the null-security JOSE wrapping should be removed.
The resulting claims set should be inserted as a non-token submodule.</t>
            <t>To incorporate a UCCS token in a surrounding JSON token, the UCCS token claims should be translated from CBOR to JSON.
To incorporate an Unsecured JWT into a surrounding CBOR-format token, the null-security JOSE should be removed and the claims translated from JSON to CBOR.</t>
          </section>
        </section>
        <section anchor="no-inheritance" numbered="true" toc="default">
          <name>No Inheritance</name>
          <t>The subordinate modules do not inherit anything from the containing
token.  The subordinate modules must explicitly include all of their
claims. This is the case even for claims like the nonce and age.</t>
          <t>This rule is in place for simplicity. It avoids complex inheritance
rules that might vary from one type of claim to another.</t>
        </section>
        <section anchor="security-levels" numbered="true" toc="default">
          <name>Security Levels</name>
          <t>The security level of the non-token subordinate modules should always
be less than or equal to that of the containing modules in the case of non-token
submodules. It makes no sense for a module of lesser security to be
signing claims of a module of higher security. An example of this is a
TEE signing claims made by the non-TEE parts (e.g. the high-level OS)
of the device.</t>
          <t>The opposite may be true for the nested tokens. They usually have
their own more secure key material. An example of this is an embedded
secure element.</t>
        </section>
        <section anchor="submodule-names" numbered="true" toc="default">
          <name>Submodule Names</name>
          <t>The label or name for each submodule in the submods map is a text
string naming the submodule. No submodules may have the same name.</t>
        </section>
        <section anchor="submods-cddl" numbered="true" toc="default">
          <name>submods CDDL</name>
          <sourcecode type="CDDL">
; The part of a token that contains all the submodules.  It is a peer
; with the claims in the token, but not a claim, only a map/object to
; hold all the submodules.

submods-part = (
    submods =&gt; submods-type
)

submods-type = { + submod-type }


; The type of a submodule which can either be a nested claim set or a
; nested separately signed token. Nested tokens are wrapped in a bstr
; or a tstr.

submod-type = (
    submod-name =&gt; eat-claim-set / nested-token
)


; When this is a bstr, the contents are an eat-token in CWT or UCCS
; format.  When this is a tstr, the contents are an eat-token in JWT
; format.

nested-token = bstr / tstr; 


; Each submodule has a unique text string name.

submod-name = tstr 


</sourcecode>
        </section>
      </section>
    </section>
    <section anchor="keyid" numbered="true" toc="default">
      <name>Endorsements and Verification Keys</name>
      <t>The Verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture" format="default"/> describes what is called an Endorsement.
This is an input to the Verifier that is usually the basis of the trust placed in an EAT and the Attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain Reference Values to which EAT claims are compared as part of the verification process.
It may contain implied claims, those that are passed on to the Relying Party in Attestation Results.</t>
      <t>There is not yet any standard format(s) for an Endorsement.
One format that may be used for an Endorsement is an X.509 certificate.
Endorsement data like Reference Values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the Endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an Endorsement.</t>
      <t>For the components (Attester, Verifier, Relying Party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <section anchor="identification-methods" numbered="true" toc="default">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes Endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for Endorsements in other formats. If such an Endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id" numbered="true" toc="default">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC8152" format="default"/> and <xref target="RFC7515" format="default"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters" numbered="true" toc="default">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft" format="default"/> and JSON Web Siganture <xref target="RFC7515" format="default"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an Endorsement and thus carrying additional input to the Verifier. It may be just an X.509 certificate, not an Endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the Verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters" numbered="true" toc="default">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft" format="default"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification" numbered="true" toc="default">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the device and therefore can work well as a key identifier or Endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
      <section anchor="other-considerations" numbered="true" toc="default">
        <name>Other Considerations</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the Verifier may be configured with a root certificate or a master key by the Verifier system administrator.</t>
        <t>Often an X.509 certificate or an Endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints and an Endorsement might have Reference Values.
When this is the case, the key identifier must be either a protected header or in the payload such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515" format="default"/>.</t>
      </section>
    </section>
    <section anchor="profiles" numbered="true" toc="default">
      <name>Profiles</name>
      <t>This EAT specification does not gaurantee that implementations of it will interoperate.
The variability in this specification is necessary to accommodate the widely varying use cases.
An EAT profile narrows the specification for a specific use case.
An ideal EAT profile will gauarantee interoperability.</t>
      <t>The profile can be named in the token using the profile claim described in <xref target="profile-claim" format="default"/>.</t>
      <section anchor="format-of-a-profile-document" numbered="true" toc="default">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>In some cases CDDL may be created that replaces CDDL in this or other document to express some profile requirements.
For example, to require the altitude data item in the location claim, CDDL can be written that replicates the location claim with the altitude no longer optional.</t>
      </section>
      <section anchor="list-of-profile-issues" numbered="true" toc="default">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, UCCS, JWS, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both" numbered="true" toc="default">
          <name>Use of JSON, CBOR or both</name>
          <t>The profile should indicate whether the token format should be CBOR, JSON, both or even some other encoding.
If some other encoding, a specification for how the CDDL described here is serialized in that encoding is necessary.</t>
          <t>This should be addressed for the top-level token and for any nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding" numbered="true" toc="default">
          <name>CBOR Map and Array Encoding</name>
          <t>The profile should indicate whether definite-length arrays/maps, indefinite-length arrays/maps or both are allowed.
A good default is to allow only definite-length arrays/maps.</t>
          <t>An alternate is to allow both definite and indefinite-length arrays/maps.
The decoder should accept either.
Encoders that need to fit on very small hardware or be actually implement in hardware can use indefinite-length encoding.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
        </section>
        <section anchor="cbor-string-encoding" numbered="true" toc="default">
          <name>CBOR String Encoding</name>
          <t>The profile should indicate whether definite-length strings, indefinite-length strings or both are allowed.
A good default is to allow only definite-length strings.
As with map and array encoding, allowing indefinite-length strings can be beneficial for some smaller implementations.</t>
        </section>
        <section anchor="cbor-preferred-serialization" numbered="true" toc="default">
          <name>CBOR Preferred Serialization</name>
          <t>The profile should indicate whether encoders must use preferred serialization.
The profile should indicate whether decoders must accept non-preferred serialization.</t>
        </section>
        <section anchor="cosejose-protection" numbered="true" toc="default">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
EAT/CWT has the option to have no protection using UCCS and JOSE has a NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, CWT and UCCS are allowed by EAT.</t>
          <t>The profile should list the protections that must be supported by all decoders implementing the profile.
The encoders them must implement a subset of what is listed for the decoders, perhaps only one.</t>
          <t>Implementations may choose to sign or MAC before encryption so that the implementation layer doing the signing or MACing can be the smallest.
It is often easier to make smaller implementations more secure, perhaps even implementing in solely in hardware.
The key material for a signature or MAC is a private key, while for encryption it is likely to be a public key.
The key for encryption requires less protection.</t>
        </section>
        <section anchor="cosejose-algorithms" numbered="true" toc="default">
          <name>COSE/JOSE Algorithms</name>
          <t>The profile document should list the COSE algorithms that a Verifier must implement.
The Attester will select one of them. 
Since there is no negotiation, the Verifier should implement all algorithms listed in the profile.</t>
        </section>
        <section anchor="verification-key-identification" numbered="true" toc="default">
          <name>Verification Key Identification</name>
          <t>Section <xref target="keyid" format="default"/> describes a number of methods for identifying a verification key.
The profile document should specify one of these or one that is not described.
The ones described in this document are only roughly described.
The profile document should go into the full detail.</t>
        </section>
        <section anchor="endorsement-identification" numbered="true" toc="default">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as Verification Key Identification, the profile may wish to specify how Endorsements are to be identified.
However note that Endorsement Identification is optional, where as key identification is not.</t>
        </section>
        <section anchor="freshness" numbered="true" toc="default">
          <name>Freshness</name>
          <t>Just about every use case will require some means of knowing the EAT is recent enough and not a replay of an old token.
The profile should describe how freshness is achieved.
The section on Freshness in <xref target="RATS-Architecture" format="default"/> describes some of the possible solutions to achieve this.</t>
        </section>
        <section anchor="required-claims" numbered="true" toc="default">
          <name>Required Claims</name>
          <t>The profile can list claims whose absence results in Verification failure.</t>
        </section>
        <section anchor="prohibited-claims" numbered="true" toc="default">
          <name>Prohibited Claims</name>
          <t>The profile can list claims whose presence results in Verification failure.</t>
        </section>
        <section anchor="additional-claims" numbered="true" toc="default">
          <name>Additional Claims</name>
          <t>The profile may describe entirely new claims.
These claims can be required or optional.</t>
        </section>
        <section anchor="refined-claim-definition" numbered="true" toc="default">
          <name>Refined Claim Definition</name>
          <t>The profile may lock down optional aspects of individual claims.
For example, it may require altitude in the location claim, or it may require that HW Versions always be described using EAN-13.</t>
        </section>
        <section anchor="cbor-tags" numbered="true" toc="default">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.
Similarly, the profile should specify whether the token should be a UCCS tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unncessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="manifests-and-software-evidence-claims" numbered="true" toc="default">
          <name>Manifests and Software Evidence Claims</name>
          <t>The profile should specify which formats are allowed for the manifests and software evidence claims.
The profile may also go on to say which parts and options of these formats are used, allowed and prohibited.</t>
        </section>
      </section>
    </section>
    <section anchor="encoding" numbered="true" toc="default">
      <name>Encoding</name>
      <t>This makes use of the types defined in CDDL Appendix D, Standard Prelude.</t>
      <t>Some of the CDDL included here is for claims that are defined in CWT <xref target="RFC8392" format="default"/> or JWT <xref target="RFC7519" format="default"/> or are in the IANA CWT or JWT registries.
CDDL was not in use when these claims where defined.</t>
      <section anchor="common-cddl-types" numbered="true" toc="default">
        <name>Common CDDL Types</name>
        <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
        <t>Note that unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949" format="default"/>.
They are just text strings that contain a URI.</t>
        <sourcecode type="CDDL">
string-or-uri = tstr 

time-int = #6.1(int)
</sourcecode>
      </section>
      <section anchor="cddl-for-cwt-defined-claims" numbered="true" toc="default">
        <name>CDDL for CWT-defined Claims</name>
        <t>This section provides CDDL for the claims defined in CWT. It is
non-normative as <xref target="RFC8392" format="default"/> is the authoritative definition of these
claims.</t>
        <t>Note that the subject, issue and audience claims may be a text string containing a URI per <xref target="RFC8392" format="default"/> and <xref target="RFC7519" format="default"/>.
These are never the URI tag defined in <xref target="RFC8949" format="default"/>.</t>
        <sourcecode type="CDDL">
$$eat-extension //= (
    ? issuer =&gt; text,
    ? subject =&gt; text,
    ? audience =&gt; text,
    ? expiration =&gt; time,
    ? not-before =&gt; time,
    ? issued-at =&gt; time,
    ? cwt-id =&gt; bytes,
)

issuer = 1
subject = 2
audience = 3
expiration = 4
not-before = 5
issued-at = 6
cwt-id = 7

</sourcecode>
      </section>
      <section anchor="json" numbered="true" toc="default">
        <name>JSON</name>
        <section anchor="json-labels" numbered="true" toc="default">
          <name>JSON Labels</name>
          <sourcecode type="JSON">
; The following are Claim Keys (labels) assigned for JSON-encoded tokens.

ueid /= "ueid"
nonce /= "nonce"
oemid /= "oemid"
security-level /= "seclevel"
secure-boot /= "secboot"
debug-status /= "dbgstat"
location /= "location"
uptime /= "uptime"
profile /= "eat-profile"
intended-use /= "intuse"
boot-seed /= "bootseed"
submods /= "submods"
timestamp /= "timestamp"
manifests /= "manifests"
swevidence /= "swevidence"

latitude /= "lat"
longitude /= "long"
altitude /= "alt"
accuracy /= "accry"
altitude-accuracy /= "alt-accry"
heading /= "heading"
speed /= "speed"
</sourcecode>
        </section>
        <section anchor="jsoninterop" numbered="true" toc="default">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per RFC 8610 Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- must be base64url encoded</li>
            <li>time -- must be encoded as NumericDate as described section 2 of <xref target="RFC7519" format="default"/>.</li>
            <li>string-or-uri -- must be encoded as StringOrURI as described section 2 of <xref target="RFC7519" format="default"/>.</li>
            <li>uri -- must be a URI <xref target="RFC3986" format="default"/>.</li>
            <li>oid -- encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1").</li>
          </ul>
        </section>
      </section>
      <section anchor="cbor" numbered="true" toc="default">
        <name>CBOR</name>
        <section anchor="cbor-interoperability" numbered="true" toc="default">
          <name>CBOR Interoperability</name>
          <t>CBOR allows data items to be serialized in more than one form.
If the sender uses a form that the receiver can't decode, there will not be interoperability.</t>
          <t>This specification gives no blanket requirements to narrow CBOR serialization for all uses of EAT.
This allows individual uses to tailor serialization to the environment.
It also may result in EAT implementations that don't interoperate.</t>
          <t>One way to guarantee interoperability is to clearly specify CBOR serialization in a profile document.
See <xref target="profiles" format="default"/> for a list of serialization issues that should be addressed.</t>
          <t>EAT will be commonly used where the device generating the attestation is constrained and the receiver/verifier of the attestation is a capacious server.
Following is a set of serialization requirements that work well for that use case and are guaranteed to interoperate.
Use of this serialization is recommended where possible, but not required.
An EAT profile may just reference the following section rather than spell out serialization details.</t>
          <section anchor="eat-constrained-device-serialization" numbered="true" toc="default">
            <name>EAT Constrained Device Serialization</name>
            <ul spacing="normal">
              <li>Preferred serialization described in section 4.1 of <xref target="RFC8949" format="default"/> is not required.
The EAT decoder must accept all forms of number serialization.
The EAT encoder may use any form it wishes.</li>
              <li>The EAT decoder must accept indefinite length arrays and maps as described in section 3.2.2 of <xref target="RFC8949" format="default"/>.
The EAT encoder may use indefinite length arrays and maps if it wishes.</li>
              <li>The EAT decoder must accept indefinite length strings as described in section 3.2.3 of <xref target="RFC8949" format="default"/>.
The EAT encoder may use indefinite length strings if it wishes.</li>
              <li>Sorting of maps by key is not required.
The EAT decoder must not rely on sorting.</li>
              <li>Deterministic encoding described in Section 4.2 of <xref target="RFC8949" format="default"/> is not required.</li>
              <li>Basic validity described in section 5.3.1 of <xref target="RFC8949" format="default"/> must be followed.
The EAT encoder must not send duplicate map keys/labels or invalid UTF-8 strings.</li>
            </ul>
          </section>
        </section>
      </section>
      <section anchor="collected-cddl" numbered="true" toc="default">
        <name>Collected CDDL</name>
        <sourcecode type="CDDL">
; This is the top-level definition of the claims in EAT tokens.  To
; form an actual EAT Token, this claim set is enclosed in a COSE, JOSE
; or UCCS message.

eat-claim-set = {
    ? ueid-claim,
    ? nonce-claim,
    ? oemid-claim,
    ? hardware-version-claims,
    ? security-level-claim,
    ? secure-boot-claim,
    ? debug-status-claim,
    ? location-claim,
    ? intended-use-claim,
    ? profile-claim,
    ? uptime-claim,
    ? manifests-claim,
    ? swevidence-claim,
    ? submods-part,
    * $$eat-extension,
}


; This is the top-level definition of an EAT Token.  It is a CWT, JWT
; or UCSS where the payload is an eat-claim-set. A JWT_Message is what
; is defined by JWT in RFC 7519. (RFC 7519 doesn't use CDDL so a there
; is no actual CDDL definition of JWT_Message).

eat-token = EAT_Tagged_Message / EAT_Untagged_Message / JWT_Message


; This is CBOR-format EAT token in the CWT or UCCS format that is a
; tag.  COSE_Tagged_message is defined in RFC 8152.  Tag 601 is
; proposed by the UCCS draft, but not yet assigned.

EAT_Tagged_Message = #6.61(COSE_Tagged_Message) / #6.601(eat-claim-set)


; This is a CBOR-format EAT token that is a CWT or UCSS that is not a
; tag COSE_Tagged_message and COSE_Untagged_Message are defined in RFC
; 8152.

EAT_Untagged_Message = COSE_Tagged_Message / COSE_Untagged_Message / UCCS_Untagged_Message


; This is an "unwrapped" UCCS tag. Unwrapping a tag means to use the
; definition of its content without the preceding type 6 tag
; integer. Since a UCCS is nothing but a tag for an unsecured CWT
; claim set, unwrapping reduces to a bare eat-claim-set.

UCCS_Untagged_Message = eat-claim-set


string-or-uri = tstr 

time-int = #6.1(int)

$$eat-extension //= (
    ? issuer =&gt; text,
    ? subject =&gt; text,
    ? audience =&gt; text,
    ? expiration =&gt; time,
    ? not-before =&gt; time,
    ? issued-at =&gt; time,
    ? cwt-id =&gt; bytes,
)

issuer = 1
subject = 2
audience = 3
expiration = 4
not-before = 5
issued-at = 6
cwt-id = 7


debug-status-cbor-type = &amp;(
    enabled: 0,
    disabled: 1,
    disabled-since-boot: 2,
    disabled-permanently: 3,
    disabled-fully-and-permanently: 4
)

debug-status-json-type = 
    "enabled" /
    "disabled" /
    "disabled-since-boot" /
    "disabled-permanently" /
    "disabled-fully-and-permanently"

debug-status-claim = (
    debug-status =&gt; debug-status-cbor-type / debug-status-json-type
)

location-type = {
    latitude =&gt; number,
    longitude =&gt; number,
    ? altitude =&gt; number,
    ? accuracy =&gt; number,
    ? altitude-accuracy =&gt; number,
    ? heading =&gt; number,
    ? speed =&gt; number,
    ? timestamp =&gt; ~time-int,
    ? age =&gt; uint
}

latitude = 1 / "latitude"
longitude = 2 / "longitude"
altitude = 3 / "altitude"
accuracy = 4 / "accuracy"
altitude-accuracy = 5 / "altitude-accuracy"
heading = 6 / "heading"
speed = 7 / "speed"
timestamp = 8 / "timestamp"
age = 9 / "age"

location-claim = (
    location-label =&gt; location-type
)

nonce-type = bstr .size (8..64)

nonce-claim = (
    nonce =&gt; nonce-type / [ 2* nonce-type ]
)

oemid-claim = (
    oemid =&gt; bstr
)

chip-version-claim = (
    chip-version =&gt; tstr
)

chip-version-scheme-claim = (
    chip-version-scheme =&gt; $version-scheme
)

board-version-claim = (
    board-version =&gt; tstr
)

board-version-scheme-claim = (
    board-version-scheme =&gt; $version-scheme
)

device-version-claim = (
    device-version =&gt; tstr
)

device-version-scheme-claim = (
    device-version-scheme =&gt; $version-scheme
)


ean-type = text .regexp "[0-9]{13}"

ean-chip-version-claim = (
    ean-chip-version =&gt; ean-type
)

ean-board-version-claim = (
    ean-board-version =&gt; ean-type
)

ean-device-version-claim = (
    ean-device-version =&gt; ean-type
)

hardware-version-claims = (
    ? chip-version-claim,
    ? board-version-claim,
    ? device-version-claim,
    ? chip-version-scheme-claim,
    ? board-version-scheme-claim,
    ? device-version-scheme-claim,
    ? ean-chip-version-claim,
    ? ean-board-version-claim,
    ? ean-device-version-claim,
)


secure-boot-claim = (
    secure-boot =&gt; bool
)

security-level-cbor-type = &amp;(
    unrestricted: 1,
    restricted: 2,
    secure-restricted: 3,
    hardware: 4
)

security-level-json-type = 
    "unrestricted" /
    "restricted" /
    "secure-restricted" /
    "hardware"

security-level-claim = (
    security-level =&gt; security-level-cbor-type / security-level-json-type
)

; The part of a token that contains all the submodules.  It is a peer
; with the claims in the token, but not a claim, only a map/object to
; hold all the submodules.

submods-part = (
    submods =&gt; submods-type
)

submods-type = { + submod-type }


; The type of a submodule which can either be a nested claim set or a
; nested separately signed token. Nested tokens are wrapped in a bstr
; or a tstr.

submod-type = (
    submod-name =&gt; eat-claim-set / nested-token
)


; When this is a bstr, the contents are an eat-token in CWT or UCCS
; format.  When this is a tstr, the contents are an eat-token in JWT
; format.

nested-token = bstr / tstr; 


; Each submodule has a unique text string name.

submod-name = tstr 



ueid-type = bstr .size (7..33)

ueid-claim = (
     ueid =&gt; ueid-type
)

intended-use-cbor-type = &amp;(
    generic: 1,
    registration: 2,
    provisioning: 3,
    csr: 4,
    pop:  5
)

intended-use-json-type = 
    "generic" /
    "registration" /
    "provisioning" /
    "csr" /
    "pop" 

intended-use-claim = (
    intended-use =&gt; intended-use-cbor-type / intended-use-json-type
)

oid = #6.4000(bstr) ; TODO: fill this in with correct CDDL from OID RFC

profile-claim = (
    profile =&gt; ~uri / ~oid
)

uptime-claim = (
    uptime =&gt; uint
)

manifests-claim = (
    manifests =&gt; manifests-type
)

manifests-type = [+ $manifest-formats]

; Must be a CoSWID payload type
$manifest-formats /= bytes .cbor concise-swid-tag

$manifest-formats /= bytes .cbor SUIT_Envelope_Tagged


swevidence-claim = (
    swevidence =&gt; swevidence-type
)

swevidence-type = [+ $swevidence-formats]

; Must be a CoSWID evidence type
$swevidence-formats /= bytes .cbor concise-swid-tag


; The following Claim Keys (labels) are pre-assigned by IANA.
; They are for CBOR-based tokens (CWT and UCCS).
; They are not expected to change in the final publication as an RFC.

nonce = 10
ueid = 11
oemid = 13
security-level = 14
secure-boot = 15
debug-status = 16
location-label = 17
profile = 18
submods = 20


boot-seed-claim = (
    boot-seed =&gt; bytes
)

; The following are Claim Keys (labels) assigned for JSON-encoded tokens.

ueid /= "ueid"
nonce /= "nonce"
oemid /= "oemid"
security-level /= "seclevel"
secure-boot /= "secboot"
debug-status /= "dbgstat"
location /= "location"
uptime /= "uptime"
profile /= "eat-profile"
intended-use /= "intuse"
boot-seed /= "bootseed"
submods /= "submods"
timestamp /= "timestamp"
manifests /= "manifests"
swevidence /= "swevidence"

latitude /= "lat"
longitude /= "long"
altitude /= "alt"
accuracy /= "accry"
altitude-accuracy /= "alt-accry"
heading /= "heading"
speed /= "speed"

</sourcecode>
      </section>
    </section>
    <section anchor="iana-considerations" numbered="true" toc="default">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-web-token-cwt-claims-registry" numbered="true" toc="default">
        <name>Reuse of CBOR Web Token (CWT) Claims Registry</name>
        <t>Claims defined for EAT are compatible with those of CWT
so the CWT Claims Registry is re used. No new IANA registry
is created. All EAT claims should be registered in the
CWT and JWT Claims Registries.</t>
      </section>
      <section anchor="claim-characteristics" numbered="true" toc="default">
        <name>Claim Characteristics</name>
        <t>The following is design guidance for creating new EAT claims, particularly those to be registered with IANA.</t>
        <t>Much of this guidance is generic and could also be considered when designing new CWT or JWT claims.</t>
        <section anchor="interoperability-and-relying-party-orientation" numbered="true" toc="default">
          <name>Interoperability and Relying Party Orientation</name>
          <t>It is a broad goal that EATs can be processed by relying parties in a general way regardless of the type, manufacturer or technology of the device from which they originate. 
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
          <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
        </section>
        <section anchor="operating-system-and-technology-neutral" numbered="true" toc="default">
          <name>Operating System and Technology Neutral</name>
          <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
          <t>Claims should not be defined such that they are specific to a SW environment or programming language.</t>
          <t>Claims should not be defined such that they are specific to a chip or particular hardware. 
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
          <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
        </section>
        <section anchor="security-level-neutral" numbered="true" toc="default">
          <name>Security Level Neutral</name>
          <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists. 
Secure Elements and smart cards are examples of this. 
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
          <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
        </section>
        <section anchor="reuse-of-extant-data-formats" numbered="true" toc="default">
          <name>Reuse of Extant Data Formats</name>
          <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
          <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON format for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
          <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
        </section>
        <section anchor="proprietary-claims" numbered="true" toc="default">
          <name>Proprietary Claims</name>
          <t>EAT allows the definition and use of proprietary claims.</t>
          <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer. 
This is a supported use case.</t>
          <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
        </section>
      </section>
      <section anchor="claims-registered-by-this-document" numbered="true" toc="default">
        <name>Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519" format="default"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392" format="default"/>. Each entry below is an addition to both registries (except
for the nonce claim which is already registered for JWT, but not registered for CWT).</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <section anchor="claims-for-early-assignment" numbered="true" toc="default">
          <name>Claims for Early Assignment</name>
          <t>RFC Editor: in the final publication this section should be combined with the following
section as it will no longer be necessary to distinguish claims with early assignment.
Also, the following paragraph should be removed.</t>
          <t>The claims in this section have been (requested for / given) early assignment according to <xref target="RFC7120" format="default"/>.
They have been assigned values and registered before final publication of this document.
While their semantics is not expected to change in final publication, it is possible that they will.
The JWT Claim Names and CWT Claim Keys are not expected to change.</t>
          <ul spacing="normal">
            <li>Claim Name: Nonce</li>
            <li>Claim Description: Nonce</li>
            <li>JWT Claim Name: "nonce" (already registered for JWT)</li>
            <li>Claim Key: 10</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <xref target="OpenIDConnectCore" format="default"/>, <strong>this document</strong></li>
          </ul>
          <t>&nbsp;</t>
          <ul spacing="normal">
            <li>Claim Name: UEID</li>
            <li>Claim Description: The Universal Entity ID</li>
            <li>JWT Claim Name: "ueid"</li>
            <li>CWT Claim Key: 11</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t>&nbsp;</t>
          <ul spacing="normal">
            <li>Claim Name: OEMID</li>
            <li>Claim Description: IEEE-based OEM ID</li>
            <li>JWT Claim Name: "oemid"</li>
            <li>Claim Key: 13</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t>&nbsp;</t>
          <ul spacing="normal">
            <li>Claim Name: Security Level</li>
            <li>Claim Description: Characterization of the security of an Attester or submodule</li>
            <li>JWT Claim Name: "seclevel"</li>
            <li>Claim Key: 14</li>
            <li>Claim Value Type(s): integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t>&nbsp;</t>
          <ul spacing="normal">
            <li>Claim Name: Secure Boot</li>
            <li>Claim Description: Indicate whether the boot was secure</li>
            <li>JWT Claim Name: "secboot"</li>
            <li>Claim Key: 15</li>
            <li>Claim Value Type(s): Boolean</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t>&nbsp;</t>
          <ul spacing="normal">
            <li>Claim Name: Debug Status</li>
            <li>Claim Description: Indicate status of debug facilities</li>
            <li>JWT Claim Name: "dbgstat"</li>
            <li>Claim Key: 16</li>
            <li>Claim Value Type(s): integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t>&nbsp;</t>
          <ul spacing="normal">
            <li>Claim Name: Location</li>
            <li>Claim Description: The geographic location</li>
            <li>JWT Claim Name: "location"</li>
            <li>Claim Key: 17</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t>&nbsp;</t>
          <ul spacing="normal">
            <li>Claim Name: Profile</li>
            <li>Claim Description: Indicates the EAT profile followed</li>
            <li>JWT Claim Name: "eat_profile"</li>
            <li>Claim Key: 18</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t>&nbsp;</t>
          <ul spacing="normal">
            <li>Claim Name: Submodules Section</li>
            <li>Claim Description: The section containing submodules (not actually a claim)</li>
            <li>JWT Claim Name: "submods"</li>
            <li>Claim Key: 20</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="to-be-assigned-claims" numbered="true" toc="default">
          <name>To be Assigned Claims</name>
          <t>TODO: add the rest of the claims in here</t>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations" numbered="true" toc="default">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations" numbered="true" toc="default">
        <name>UEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Any set of relying parties
that receives tokens that happen to be from a single device will be
able to know the tokens are all from the same device and be able to
track the device. Thus, in many usage situations ueid violates
governmental privacy regulation. In other usage situations UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>There are several strategies that can be used to still be able to put
UEID's in tokens:</t>
        <ul spacing="normal">
          <li>The device obtains explicit permission from the user of the device
to use the UEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID.</li>
          <li>The UEID is used only in a particular context or particular use
case. It is used only by one relying party.</li>
          <li>The device authenticates the relying party and generates a derived
UEID just for that particular relying party.  For example, the relying
party could prove their identity cryptographically to the device, then
the device generates a UEID just for that relying party by hashing a
proofed relying party ID with the main device UEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in multiple UEIDs
per device. Each UEID is used in a different context, use case or system 
on the device. However, from the view of the relying party, there is just
one UEID and it is still globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations" numbered="true" toc="default">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the device generating the attestation.
For example, many mobile phones prompt the user for permission when before sending location data.</t>
      </section>
    </section>
    <section anchor="securitycons" numbered="true" toc="default">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392" format="default"/> and Section 11
of <xref target="RFC7519" format="default"/> apply to EAT in its CWT and JWT form, respectively.  In addition, 
implementors should consider the following.</t>
      <section anchor="key-provisioning" numbered="true" toc="default">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manfuacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949" format="default"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material" numbered="true" toc="default">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="transport-security" numbered="true" toc="default">
        <name>Transport Security</name>
        <t>As stated in Section 8 of <xref target="RFC8392" format="default"/>, "The security of the CWT relies
upon on the protections offered by COSE".  Similar considerations
apply to EAT when sent as a CWT.  However, EAT introduces the concept
of a nonce to protect against replay.  Since an EAT may be created by
an entity that may not support the same type of transport security as
the consumer of the EAT, intermediaries may be required to bridge
communications between the entity and consumer.  As a result, it is
RECOMMENDED that both the consumer create a nonce, and the entity
leverage the nonce along with COSE mechanisms for encryption and/or
signing to create the EAT.</t>
        <t>Similar considerations apply to the use of EAT as a JWT.  Although the
security of a JWT leverages the JSON Web Encryption (JWE) and JSON Web
Signature (JWS) specifications, it is still recommended to make use of
the EAT nonce.</t>
      </section>
      <section anchor="multiple-eat-consumers" numbered="true" toc="default">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer should leverage a secure protocol (e.g.one that
uses transport-layer security, i.e. TLS),</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then transport security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner">
              <organization/>
            </author>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC7515" target="https://www.rfc-editor.org/info/rfc7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC8949" target="https://www.rfc-editor.org/info/rfc8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman">
              <organization/>
            </author>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7517" target="https://www.rfc-editor.org/info/rfc7517">
          <front>
            <title>JSON Web Key (JWK)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key.  This specification also defines a JWK Set JSON data structure that represents a set of JWKs.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries established by that specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7517"/>
          <seriesInfo name="DOI" value="10.17487/RFC7517"/>
        </reference>
        <reference anchor="RFC7519" target="https://www.rfc-editor.org/info/rfc7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC7800" target="https://www.rfc-editor.org/info/rfc7800">
          <front>
            <title>Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="April" year="2016"/>
            <abstract>
              <t>This specification describes how to declare in a JSON Web Token (JWT) that the presenter of the JWT possesses a particular proof-of- possession key and how the recipient can cryptographically confirm proof of possession of the key by the presenter.  Being able to prove possession of a key is also sometimes described as the presenter being a holder-of-key.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7800"/>
          <seriesInfo name="DOI" value="10.17487/RFC7800"/>
        </reference>
        <reference anchor="RFC8126" target="https://www.rfc-editor.org/info/rfc8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <author fullname="T. Narten" initials="T." surname="Narten">
              <organization/>
            </author>
            <date month="June" year="2017"/>
            <abstract>
              <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="RFC8152" target="https://www.rfc-editor.org/info/rfc8152">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad">
              <organization/>
            </author>
            <date month="July" year="2017"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8152"/>
          <seriesInfo name="DOI" value="10.17487/RFC8152"/>
        </reference>
        <reference anchor="RFC8392" target="https://www.rfc-editor.org/info/rfc8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610" target="https://www.rfc-editor.org/info/rfc8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz">
              <organization/>
            </author>
            <author fullname="C. Vigano" initials="C." surname="Vigano">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8747" target="https://www.rfc-editor.org/info/rfc8747">
          <front>
            <title>Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="L. Seitz" initials="L." surname="Seitz">
              <organization/>
            </author>
            <author fullname="G. Selander" initials="G." surname="Selander">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="March" year="2020"/>
            <abstract>
              <t>This specification describes how to declare in a CBOR Web Token (CWT) (which is defined by RFC 8392) that the presenter of the CWT possesses a particular proof-of-possession key. Being able to prove possession of a key is also sometimes described as being the holder-of-key. This specification provides equivalent functionality to "Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)" (RFC 7800) but using Concise Binary Object Representation (CBOR) and CWTs rather than JavaScript Object Notation (JSON) and JSON Web Tokens (JWTs).</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8747"/>
          <seriesInfo name="DOI" value="10.17487/RFC8747"/>
        </reference>
        <reference anchor="RFC3986" target="https://www.rfc-editor.org/info/rfc3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee">
              <organization/>
            </author>
            <author fullname="R. Fielding" initials="R." surname="Fielding">
              <organization/>
            </author>
            <author fullname="L. Masinter" initials="L." surname="Masinter">
              <organization/>
            </author>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RATS.Architecture" target="https://tools.ietf.org/html/draft-ietf-rats-architecture-08">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz">
              <organization/>
            </author>
            <date year="2020"/>
          </front>
        </reference>
        <reference anchor="COSE.X509.Draft" target="https://tools.ietf.org/html/draft-ietf-cose-x509-08">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header parameters for carrying and referencing X.509 certificates</title>
            <author fullname="J. Schaad">
              <organization/>
            </author>
            <date year="2020"/>
          </front>
        </reference>
        <reference anchor="CBOR.Cert.Draft" target="https://tools.ietf.org/html/draft-mattsson-cose-cbor-cert-compress-05">
          <front>
            <title>CBOR Encoding of X.509 Certificates (CBOR Certificates)</title>
            <author fullname="S. Raza">
              <organization/>
            </author>
            <date year="2020"/>
          </front>
        </reference>
        <reference anchor="WGS84" target="http://earth-info.nga.mil/GandG/publications/tr8350.2/wgs84fin.pdf">
          <front>
            <title>National Imagery and Mapping Agency Technical Report 8350.2, Third Edition</title>
            <author>
              <organization>National Imagery and Mapping Agency</organization>
            </author>
            <date year="2000"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="UCCS.Draft" target="https://tools.ietf.org/html/draft-birkholz-rats-uccs-01">
          <front>
            <title>A CBOR Tag for Unprotected CWT Claims Sets</title>
            <author fullname="Henk Birkholz">
              <organization/>
            </author>
            <date year="2020"/>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="FIDO.AROE" target="https://fidoalliance.org/specs/fido-uaf-v1.0-fd-20191115/fido-allowed-AROE-v1.0-fd-20191115.html">
          <front>
            <title>FIDO Authenticator Allowed Restricted Operating Environments List</title>
            <author>
              <organization>The FIDO Alliance</organization>
            </author>
            <date year="2019" month="November"/>
          </front>
        </reference>
        <reference anchor="EAN-13" target="https://www.gs1.org/standards/barcodes/ean-upc">
          <front>
            <title>International Article Number - EAN/UPC barcodes</title>
            <author>
              <organization>GS1</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID" target="https://tools.ietf.org/html/draft-ietf-sacm-coswid-16">
          <front>
            <title>Concise Software Identification Tags</title>
            <author>
              <organization/>
            </author>
            <date year="2020" month="November"/>
          </front>
        </reference>
        <reference anchor="OpenIDConnectCore" target="https://openid.net/specs/openid-connect-core-1_0.html">
          <front>
            <title>OpenID Connect Core 1.0 incorporating errata set 1</title>
            <author fullname="N. Sakimura">
              <organization/>
            </author>
            <author fullname="J. Bradley">
              <organization/>
            </author>
            <author fullname="M. Jones">
              <organization/>
            </author>
            <author fullname="B. de Medeiros">
              <organization/>
            </author>
            <author fullname="C. Mortimore">
              <organization/>
            </author>
            <date year="2014" month="November"/>
          </front>
        </reference>
        <reference anchor="CBOR-OID" target="https://www.ietf.org/archive/id/draft-ietf-cbor-tags-oid-08.txt">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="Carsten Bormann">
              <organization>Universität Bremen TZI</organization>
            </author>
            <date day="21" month="May" year="2021"/>
            <abstract>
              <t>   The Concise Binary Object Representation (CBOR, RFC 8949) is a data
   format whose design goals include the possibility of extremely small
   code size, fairly small message size, and extensibility without the
   need for version negotiation.

   The present document defines CBOR tags for object identifiers (OIDs).
   It is intended as the reference document for the IANA registration of
   the CBOR tags so defined.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cbor-tags-oid-08"/>
        </reference>
        <reference anchor="RATS-Architecture" target="https://www.ietf.org/archive/id/draft-ietf-rats-architecture-12.txt">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="23" month="April" year="2021"/>
            <abstract>
              <t>   In network protocol exchanges it is often useful for one end of a
   communication to know whether the other end is in an intended
   operating state.  This document provides an architectural overview of
   the entities involved that make such tests possible through the
   process of generating, conveying, and evaluating evidentiary claims.
   An attempt is made to provide for a model that is neutral toward
   processor architectures, the content of claims, and protocols.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-12"/>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122" target="https://www.rfc-editor.org/info/rfc4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach">
              <organization/>
            </author>
            <author fullname="M. Mealling" initials="M." surname="Mealling">
              <organization/>
            </author>
            <author fullname="R. Salz" initials="R." surname="Salz">
              <organization/>
            </author>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4949" target="https://www.rfc-editor.org/info/rfc4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey">
              <organization/>
            </author>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120" target="https://www.rfc-editor.org/info/rfc7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC                        Required", "IETF Review", or "Standards Action" policies apply.  This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation.  The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IDevID" target="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">
          <front>
            <title>IEEE Standard, "IEEE 802.1AR Secure Device Identifier"</title>
            <author>
              <organization/>
            </author>
            <date year="2009" month="December"/>
          </front>
        </reference>
        <reference anchor="ECMAScript" target="http://www.ecma-international.org/ecma-262/5.1/ECMA-262.pdf">
          <front>
            <title>Ecma International, "ECMAScript Language Specification, 5.1 Edition", ECMA Standard 262</title>
            <author>
              <organization/>
            </author>
            <date year="2011" month="June"/>
          </front>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/geolocation-API/#coordinates_interface">
          <front>
            <title>Geolocation API Specification 2nd Edition</title>
            <author>
              <organization>Worldwide Web Consortium</organization>
            </author>
            <date year="2018" month="January"/>
          </front>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://webstore.ansi.org/standards/ieee/ieee8022001r2007">
          <front>
            <title>IEEE Standard For Local And Metropolitan Area Networks Overview And Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2007"/>
          </front>
        </reference>
        <reference anchor="FIDO.Registry" target="https://fidoalliance.org/specs/common-specs/fido-registry-v2.1-ps-20191217.html">
          <front>
            <title>FIDO Registry of Predefined Values</title>
            <author>
              <organization>The FIDO Alliance</organization>
            </author>
            <date year="2019" month="December"/>
          </front>
        </reference>
        <reference anchor="FIPS-140" target="https://csrc.nist.gov/publications/detail/fips/140/2/final">
          <front>
            <title>Security Requirements for Cryptographic Modules</title>
            <author>
              <organization>National Institue of Standards</organization>
            </author>
            <date year="2001" month="May"/>
          </front>
        </reference>
        <reference anchor="Common.Criteria" target="https://www.commoncriteriaportal.org/cc/">
          <front>
            <title>Common Criteria for Information Technology Security Evaluation</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="April"/>
          </front>
        </reference>
      </references>
    </references>
    <section anchor="examples" numbered="true" toc="default">
      <name>Examples</name>
      <section anchor="very-simple-eat" numbered="true" toc="default">
        <name>Very Simple EAT</name>
        <t>This is shown in CBOR diagnostic form. Only the payload signed by COSE
is shown.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
{
    / issuer /           1: "joe",
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /            11: h'0198f50a4ff6c05861c8860d13a638ea',
    / secure-boot /     15: true,
    / debug-disable /   16: 3, / permanent-disable /
    / timestamp (iat) /  6: 1(1526542894)
}
]]></artwork>
      </section>
      <section anchor="example-with-submodules-nesting-and-security-levels" numbered="true" toc="default">
        <name>Example with Submodules, Nesting and Security Levels</name>
        <artwork name="" type="" align="left" alt=""><![CDATA[
{
    / nonce /                 10: h'948f8860d13a463e8e',
    / UEID /                  11: h'0198f50a4ff6c05861c8860d13a638ea',
    / secure-boot /           15: true,
    / debug-disable /         16: 3, / permanent-disable  /
    / timestamp (iat) /        6: 1(1526542894),
    / security-level /        14: 3, / secure restricted OS /
    / submods / 20: {
        / first submod, an Android Application /
        "Android App Foo" :  {
            / security-level /  14: 1 / unrestricted /
        },

        / 2nd submod, A nested EAT from a secure element /
        "Secure Element Eat" :
            / an embedded EAT, bytes of which are not shown /
            h'420123',

        / 3rd submod, information about Linux Android /
        "Linux Android": {
            / security-level /  14: 1 / unrestricted /
        }
    }
}
]]></artwork>
      </section>
    </section>
    <section anchor="ueid-design-rationale" numbered="true" toc="default">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability" numbered="true" toc="default">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion datadbase is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table align="center">
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and SW so this
simple approximation is used. See <xref target="BirthdayAttack" format="default"/>.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
    p = k^2 / 2n 
]]></artwork>
        <t>For this calculation:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
    p  Collision Probability
    n  Total population based on number of bits in UEID
    k  Population in a database
]]></artwork>
        <table align="center">
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's 
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of 
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
  t = 1 / ((k / 10) * p)
  
  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table align="center">
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid" numbered="true" toc="default">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122" format="default"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this 
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality 
random numbers, but do so by mapping into the overall UUID 
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>UUIDs seem to have been designed for scenarios where the implementor
does not have full control over the environment and uniqueness has to
be constructed from identifiers at hand. UEID takes the view that
hardware, software and/or manufacturing process directly implement
UEID in a simple and direct way. It takes the view that cryptographic
quality random number generators are readily available as they are
implemented in commonly used CPU hardware.</t>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts" numbered="true" toc="default">
      <name>Changes from Previous Drafts</name>
      <t>The following is a list of known changes from the previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences.</t>
      <section anchor="from-draft-rats-eat-01" numbered="true" toc="default">
        <name>From draft-rats-eat-01</name>
        <ul spacing="normal">
          <li>Added UEID design rationale appendix</li>
        </ul>
      </section>
      <section anchor="from-draft-mandyam-rats-eat-00" numbered="true" toc="default">
        <name>From draft-mandyam-rats-eat-00</name>
        <t>This is a fairly large change in the orientation of the document, but
no new claims have been added.</t>
        <ul spacing="normal">
          <li>Separate information and data model using CDDL.</li>
          <li>Say an EAT is a CWT or JWT</li>
          <li>Use a map to structure the boot_state and location claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-01" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-01</name>
        <ul spacing="normal">
          <li>Clarifications and corrections for OEMID claim</li>
          <li>Minor spelling and other fixes</li>
          <li>Add the nonce claim, clarify jti claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-02" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-02</name>
        <ul spacing="normal">
          <li>Roll all EUIs back into one UEID type</li>
          <li>UEIDs can be one of three lengths, 128, 192 and 256.</li>
          <li>Added appendix justifying UEID design and size.</li>
          <li>Submods part now includes nested eat tokens so they can be named and
there can be more tha one of them</li>
          <li>Lots of fixes to the CDDL</li>
          <li>Added security considerations</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-03" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-03</name>
        <ul spacing="normal">
          <li>Split boot_state into secure-boot and debug-disable claims</li>
          <li>Debug disable is an enumerated type rather than Booleans</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-04" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-04</name>
        <ul spacing="normal">
          <li>Change IMEI-based UEIDs to be encoded as a 14-byte string</li>
          <li>CDDL cleaned up some more</li>
          <li>CDDL allows for JWTs and UCCSs</li>
          <li>CWT format submodules are byte string wrapped</li>
          <li>Allows for JWT nested in CWT and vice versa</li>
          <li>Allows UCCS (unsigned CWTs) and JWT unsecured tokens</li>
          <li>Clarify tag usage when nesting tokens</li>
          <li>Add section on key inclusion</li>
          <li>Add hardware version claims</li>
          <li>Collected CDDL is now filled in. Other CDDL corrections.</li>
          <li>Rename debug-disable to debug-status; clarify that it is not extensible</li>
          <li>Security level claim is not extensible</li>
          <li>Improve specification of location claim and added a location privacy section</li>
          <li>Add intended use claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-05" numbered="true" toc="default">
        <name>From draft-ietf-rats-05</name>
        <ul spacing="normal">
          <li>CDDL format issues resolved</li>
          <li>Corrected reference to Location Privacy section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-06" numbered="true" toc="default">
        <name>From draft-ietf-rats-06</name>
        <ul spacing="normal">
          <li>Added boot-seed claim</li>
          <li>Rework CBOR interoperability section</li>
          <li>Added profiles claim and section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-07" numbered="true" toc="default">
        <name>From draft-ietf-rats-07</name>
        <ul spacing="normal">
          <li>Filled in IANA and other sections for possible preassignment of claim keys for well understood claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-08" numbered="true" toc="default">
        <name>From draft-ietf-rats-08</name>
        <ul spacing="normal">
          <li>Change profile claim to be either a URL or an OID rather than a test string</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-09" numbered="true" toc="default">
        <name>From draft-ietf-rats-09</name>
        <ul spacing="normal">
          <li>Added section on use for Evidence and Attestation Results</li>
          <li>Fill in the key ID and endorsements identificaiton section</li>
          <li>Remove origination claim as it is replaced by key IDs and endorsements</li>
          <li>Added manifests and software evidence claims</li>
          <li>Add string labels non-claim labels for use with JSON (e.g. labels for members of location claim)</li>
        </ul>
      </section>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAEWlsmAAA+y963LjWHIu+h9PgVA7dktjkpLqXtUx9lZL6m711G2XVNM+
4XB0gCRIYYoEaACUilO7HPMajjjn73mweZKT+WXmugBgdc/Y3o7jsMPRoyKA
dcm1Vq68fjkej5Omzcr5z9mqKvMXaVtv86TY1PiraR+cnDw/eZDMsvZF2rTz
JJlXszJb04vzOlu04yJvF+M6a5txnrXjVdbmTZsk98sX6buzm+v0p6r+UJTL
9Pu62m6Sr9JZVTZ52WybF+nXu7z5mn5qttN10TRFVba7DbV7dXnzXbIpXiRp
2lYzew//mOeb9pZ+ecT/bqq6rfNF499oduv4h1m13mSzNnhjO/W/lRX/VC9m
+bxpd6vcXmuLlv9xc5unlyX9Y5eetTytrKUxpjfVh7xMDy/Pbo6SbDqt87sX
Kf0jyeo8o8GXbV6XeZt8uCd6FcuSJ58Fn8+mVU2TnhOhXqQPTk4fjk9Pkmzb
3lb1i2ScFiUN//tJ+opWZJetaXxC7O+LupjfZnXwoKqJyP9rm61oRuv0Jp/d
ltWqWhZ5Q6OYTXi2RJ+cZvr46dPH6auqzm+rbZOnF3VxlzN1aGov0uusTC+K
fFkxLfIljfFFep6tikVVl0UGIm7LtqY331+f0T83t9gmB397mj57/Cx98vg0
fUqb5IAe5eusWL1I1zLE//nPbTH5Zx3fhP5j03s5SV9uy/l0lc1zN8GX2bbO
y1kePcIUr/PZtuZVoAWp6l368uW572u1XP3PollRj+M65x0RdvRqkn6brVZE
+7yuGtfVq2K5zVedR/+51AyI+ejB8+cBLacyyr3E/HGSvvn6oiqr5e3WU/PH
vM7Xu/jJr5/hg6fP0++yuqStWm2Xt+m7Kpu7GQYPMJ057873p4/Spy+vo/mV
RZvP09/RAZhX62Cqjx6lpw8eP0gfPnl4+iyY6h+qOQbbn2pSVvWajs9dzkzh
3XfnD05Pn+ufTx+fPtY/nz1/FPz61P/pfn12cmLvnj544v58+sj9+fiB/fnw
ufvzyan77Okja/fh82dogf+PfyFuNzmrZ7c061lLe1metVm9ZJLetu2meXF8
3FbVqpkw05zQehzftuvVcZeRZkEr45Nn0o7wpHf5umrziB+9rStiYPRqk4bd
4yvjK/z3OF1sVyvZHj/k5Yf026L+cFut/oinxo8enCT07/M315eTf3h88nxy
wWP7q6Yyq5p8/JHa6Ezh4PzbN+/SN9M/0DjTa+OQ5Zx47azebTCnQx7AEY+T
+ECdbrKahk0ntUnpHKWzrK539hUx/JwZB//7HybUXTrL67ZYFDO+ig6+SAY6
O9ez2wybOyIBVpTHOTmnxv46ItCGbZumKoUQzPbHPLIx3z+0WM345HFIFlCF
SFDNeSbVQidzHkyGyMIvhT8dfXF+15P0XfbHbHB2P31//exRf040pTyr29tx
US6qSbnMJutidfw9Ufr74812uuJuaYWa47Z+9vDxyeTB8f2yefZoUZSTzXwR
Tug1XsxW6dU6W+bEt3m1XmWbDc/vbElLthMmRE2uaGNviHmn0uaIWH1R046Y
F9zGwBzBy35FD9HUT04SPaxXZ6/PJuc/3UzOV1mxbgbJcH9/PymyMsO6Zg3f
5eu8bJvj2X3bW7if8qkJBtTsUSrthgNPw5Fz/8HQFtmqyRMb14+dcfX23N6R
/UFHZkP78frN63BoP3aGFo+tN7ju6N6fn1+HZ+EvOAxT5TXC4LazGW3/02is
Z0LIm2yJM/6+3NQVszK6QoiiOmqSBdp46DbyL/G2DnO7uaVb7vu3bydXry6v
hk8178VsNXm43Gwwk3nefGirzbqab+kyPr7e5DM5gTgK0T8v8pZus2aSNZuP
f9+ET67mv3364Hm4dR7SHv8+L/NaOTkdPPpHc1tsmKszg/wmOCJRNyJQp+ck
hqSv8/aexGxs/5u8Xhd0Jppv0tfb9TSv6SyM0mw+Z5ZjPLOY03ZxTe07Xg+J
RtH5OX2eMv2+u7p4Mzl79+byRTgX/jU9o1a4aWqY1vBstaruaf3e0V1VF1jK
NxtMlsZxWd4VdSUbN31ZNO3gQiyKeUUCEO32WY6VYIo2+Hm8zRbju9PJyXgx
H/PgTk9PH8uTTDoe8yB7r0x4W+6bM8v8MhPtNCDA6+ouZ4p6SlyevR6fPhze
QnxIl82pDJr1q6yeN8dTuttJYmqIyZbj7WYWUlBUB+NpZ8TkZ6tcV5HGR50d
v397nloT+6bw/fVpZ9Vwo1fXP11d/FUXeZPN1nyJ3Rfz8emTiPVVdO+SCHxd
Ldp70n/Sq2hj8WFuhgkoJ5F2Q3l1Qa2UtNV5Kw+Pr6LXivmEtCpdfvmBxoQP
6X9JTjr9+cSvrI5P2k+1AzkstBtIcKZP6IzLTsxr+iNLm7xNT4dG+4yJ+GiI
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
QsJk5XBAAchaCS0L5RfRJ1YrNZSoqUUXofHxldjyOA3qPRVHkSrP1popUvlq
DscpLbg57fgtUjeKao614PGoSTfuEAbOuarz+oE2y8xMDSw0Z/YzXapnSa4b
n71BmzLjBjP2FFfidCQmZMGnCc1JGU7xUV/lUazgwAep0oaGQYpZqyaTFUJ9
STPLizumgb+HeCnomG3Z/GfLi/unmhXwXwj7DZMIiS+FC1jQ6JaSv7Sah3Zf
2ROuVZVag+hCnPlVBW/AWBLeRBtnSsph5GNG+1w+Suwj9o9H38EOIavA1FZR
F0wva10gSoKPfE+c5AGJhQhTbAq9LjJtSN0pcUeJelZ9s9ofIstYwuP4w7qu
2FVwlj55NJ6y1KfcsxMTj8tpU/GWLtYi/fuwtyyl87nEXP/2eJw+PjlJp6zR
V2WyI32rYZVXXDDMbWVOGH2Hoo7+kD2rNEEgxob3gpi5l9izum4sTovNYOJi
L1gqCEXUM7GWE8mZ2yj3Bes5EicTzOVqydSoXOVM8CXdif7HjEVhN9SUKS+R
aG6h2132ZSmPcqcGsREhy1BvVNKNVVJ7D1xXLq4L1mQRUeBj493lD3biDrYf
kTIZFwc/N0lV3tVkDJmKSTOR6tt7AVStQwgAMz+wbMtnJolF2Z1fm/iK4o+Y
1YaNW6xztmJNeKdtsE/W5cxBKNw24oywSKBnRHuAuz15BGvWERwJ+X0u0ZLb
UrxkiVgWxOrG+uw6+1ist4iq5y/RBpQXjBDmM/FK5WuWrSXGgiYuV0Ysj7KJ
QOfacGSknAhz/+Q4jWqxxOTGfnKeDprg19qOFD9S0vpWc45oz8t5ECIY6ycs
XJHgUbAmijZVwlIgKRbSZ4iK57ss5QwxGgUzxdC1lmRux27UF88mbCG/JP38
C/0f/sKPY8iXv005AT2dYKiHzyaTJ4+OEn1BVvi36SHc49LSb/8uDb4+Tv8x
ffCb8Jd/So7Qj0RHl3Qf1MReLRPDi1PbvJhTR+8vry7+/Kd/bbytI7gxAs/i
XM4Xy6jH/USFpJMMTddRi6jKFm7U9FsSQ0mJYj/RJqcLTcOhSkGWIM3JB8KT
3FtnzlvuRmUnvHZOCLTgsykQCTYVcz8+R3wgbyTfBtGnGZlfmiWAVQYvLl35
OiVzdWcfilLiDBpR4kvgYTFrEh9J0D5YoCStNnReubNsNQlIa2dva6uxEh//
clVN8Q8VLjVnLPTnNrqrtqIfTFJuVFtEVoQ0G3zdSa4GPZoRa2IqxotUoNAx
crotUWEgYiZqLtHm5Dq+r1zMGpu0kIRlHqYyFTNwy4521xrLFVvR1SW0jtk/
NeO7i+YOPhk+ThwhouvHuWWZOCS1LmLVWciM8bsVcFZUUlXVaBTeQdyDSFOq
J68lWpa7SyQzbPbB8gW/mCXLidd5vnFHxoT6xNxq0YyPIgeJBR+Y+KFWB0AA
0Uy/hqMhJ2WTz7K+HL8LyylfAqBM4Hwk5T4r4Ty6coyzxI3JCYxLNdZLCp5B
Hxy7KEiOkVCP6yjgvEzsaQ4Zh2XZ9ZrtsiQn2UFgrGqEisBeS5fasr2dwPSy
z7BiATUq2SYybW+iefhQbyBYEg5PRWXnn7D7Hzx+InebZn65mwChyXKPQRhD
kBydJmuPqPaTRpK7ODxcY9jsrRJU/Tvsl5I+YU3AEFSKSHxQg4wT1/6FisGZ
ZKPyKorJDgyqc/Uk4dXjD0pwkiSvr3+CsJktUiXRGBteUTWKQVzM7qqCVXZs
/UWuCFPmKJcBEXuMYkxCWYZJdR5odmyylK/UCcgkcXgx6ZnZRxQLGRv0f6c3
TLNvmYT6N9v56e8Yu+t/05snH09O6cG7s9cX/K6zI58+eDZKT58/YLauy87i
xJw0Z2HdgYhXmc0B+EROwPPIDj7E1626yKr0T1aLSkXwk1xPbw0ARZH9v91A
UfDSmw6CKKSj4n3phc2F4Fao3851grhI8cpncYYiRz3durj1OFNOQpOjtxnX
mnfxl0kiktuUlleBBISVrYpFBysgoJ7rWk8/fKGmbtCqYKITW7sHtGiw3F++
v7L168Us4wULa+5kpHsRmdMvqZEgBR8/jB/RRuD/fXLCewF/PdLovTkWRvJB
37y/GvF/xg+fiChxzgfan6NA1OwOJWftDBRgs4Fev8RSxwZ34d6bcP9qiF60
ylAsggjBG+LQp23z6uzc8FKdUAxW4vJx6Q1MjtW4aVPx5SruqoXO89GzSZjn
fH/LIpldPFB3107KVexWB1bX+PRF91I0pJEPGYRGypokbhW5KaSbIzbVh7Bj
bP789Mmh2n3+bBvhIW+EV5dX8SF+NJ4Xy6INDWwaAqzbkeb+TN8Bn2CsV90Z
5yTWSUxR+kRfiWQ38NTZvpDQkRqfxHM7zZ3xM2uEt6u9k8YgFxc7U8UZz3ZD
uXIUK4f7/lqt5qw5y7E6uz6/uvKmYjtP/PI3/s/0ofaMlDMm1Agn6+Tjw4ca
IQWySeM2SOdvtt2SvtzelpIY02zhXrz+/eswGWBCyxIhEmNpPr1Iv2JhAqpE
Mxa/PWC7fnuAxT6HxU2sU7wAzcHnxG5lk7do7GKY5p2h8VXQu3fism3Mv0Yi
SykLK+E0Bh3gdhNsIGUF7wDrIx3zijfxq5Tj7AWHPaPCkTSMSUC6aPnSsl+g
wwQSa7XJ+Ez7NZfb20IaFOBlZ0yLWbmCV66SIHgmSq6GTBpISlsN36TD4ZyT
Ij0kYJQYWOiE7m7ZmCVPUs3OQkcWaGadVPm6mMcWA2fHJWUoh/Ae+pYgB4gS
nTFAbvIbVT3kcmdmcQc0CtpCK/XtM0uIBqgmi5KWD7651044oKGrJqP3rBlW
I5KpMEXkeCrkYNdWGryfTjOk12vwtAjke2UVjRvBUC4stibUNzpKv4nCNjcM
RkfOklnqIsdpL0gQCzLgMpar+2vPU2WkVvnXLCsRpU7faVJoUXeEN85DIxYj
iFDiBFBynIK0vFVSuVWpM8wH2o1igCCyKoiCtCyLiD5FA48s7QhZj46aKpfb
hN22sGYwcxBjBv3gzBmOZXSsGU8nE+JaiTyPjRnS0m//LnXfOrsFGy7eXL7q
ojoTNSAYHGIv003zFf74LEcfjzTmHz49UfpMXAAviu4zzS8xyNNGU49klFuH
bcWOhCkirYOTSKNTk6aiypjWl3ibsYclsmCFV2fjlyP+7yv899rQ/PgZCR+J
Xp3vzkgoZtQv/YBZdl67fEiJfoD0gjvzgZigcR8kMGvpNSR6yW22WghnCWY/
wShM+ljttKVn3FIiNwsoELXkeVTQkshBPBs/0MQNVMQrPscPn/hR0uQkcxnE
hwajtksxXW9rOng0kQSZCAtxTrDp8ZzDFVVTiyfuXWQQriQOEJRKhIhsImSm
y9tgK5ABHYrIOnAuAeAykZvncXeTEHdXJUeNVEIASijhZBJZakiRK4DXJg7m
Tl4WSNvPtHvPHRkEGQMimBio1WBvNOBtmsb7OJ2STPOhMXa/KdgsUeY6BgmE
5VYt9k7YjBm70PmaxbmR9sAcMP+IQiGiGP1APIyRAddSLCO4fpOeqCcrwxE/
uTjqzok/ShEB88b85KJ/zEufOC8zX1P1XO41tSsLwwJLyerA0KMbU16Xt5L9
I+3eKnKyJMrxgITqi0sSnQ8k4yEJRD9q2OwLkPQ0kOPkI8cxnXy8uOT/stD9
ncVj6ZfiV4DILKLtYluDFTAnefJoW6/sTTUSy/XcMRLjxw7blBeJbTJNIo75
g6UT/p54N+Rh8SkcWp7h+E4eSIuNOnZdFqI+dYgb/JLAgEicrteMBDpGjB8c
Wap/Rbmv5qqVpEtTGjX3cmLwabPMuVlS5QjTwum93iU52TPWMIIMESQqsKFn
ceQBqogFe/VR0C0CgT1OaeTWndymqp3EyLgdiaUMO1FCKXgSozY11rdR2iKi
OcIPHErKIRALkD+ceW5wFUyXFxwszkVJTx+qZnO55fBYIDRH9Ro+fZLiENwy
iMz/cEwzvEG+WPYBSe9Nq1BAbK5mSk+zGoW3oqtSI95EuwF9+k5QpjNvAx56
o5owhH/zP4dtvzdDgOsC1m5I5zvnruapmUbnkkkc7regiE2SjhBWBFapniTE
gd5TcSuHDzAqWb3vr09pvb6tdAS68WzJdFugpJSQXZ84Idd5FM2tBV5maz8J
jj4fq/i8Og4QPmJG0AojiD+RjfeFL21rUgN/E//EbeEM7+k/ehYOIP5ocARD
r+wZgsJpDY8hfhgOovPZ4CgG39kzjIQLpqhki809IYmSLsj04B9Pxs//6ROd
tAN56QtL1n3MfVm73An//SWS954PNfBFgvVf6Dax55ZwLfx92p/gSJ8MjN0e
DY1qNNRguFLD7Q698YXltleG1yZ8+oXh7yPsiEnmvKyuDs2FD2AEH9Cr2ILj
zubzKMjUR1LKdaBxb8QYHO75S6BgqcvWAZbhBj5KQjYcIgyFkM3H6r5IfHBn
NwbM0MXchT/LNq0HXrDkkA/5DjL+MgBCAddt3a/I9XT2PMRuT3eSngEVttrW
XQS6OE9hmpPy7VtQBSVROwJitj3IjlgSgvhmfuc7jm0QzZGBB0uW3tNDxuQ/
cqD8dEtGhQXsGvYhUB643UYbgpc5lywnuyGqq0l8/reDb+AcM4zimJpF9JEh
Lzuo5m5SErVUzH1OoY7GAa3RME/T8Th9X9a+tpXE6YtlFlYQYk9EIZOi2NYT
gIGyGzMJUJ+jIQQJ5U1qSJlYp0n6hgXY+6LJHYaI03HKyiKbGe7KkYyu423N
9GbEpOQBjdtX5KJBX1o8QdRRx5eoobljUgo50i/ILo/wDh2moMXoBrEJm41D
FjT/9Si9z6ecBXvfwOyjlgDOWlKPdnGHGWw2rnCCwYRZZEBrxzQPC43JHOik
5rKXjxyiFqsojjSCOKjKiQsTdKJw+lMx/q5IXTzDKFHUf4mOQCS2QOJ4YPaH
vDF6A9pPZwhV6zxXhFIrxhAcJytkweaw5JeLqemh4uJnbMDozerm8vJrobXL
MxOJmdpg8VDr1IzFpGekmqQvWU3D0ebxOBIuq2w18hSNJ1cE3Ey4HbAwc04X
Vq4HsHC6MbJVnpg35FjB/j1L1JcDM2uSPGJKm7r1CwS2yfNScl5FAW0ICI/E
krX1ze2ugZYMrCc6mEib+cIgtFyA25INW73nkqtetRKAop+TYMs2DWHpqmUH
PjzWMxgmU1UzgMLa0vmVe/tKFi7GsTS1TLmcHlyzMUvCIu2aLqQjx1DShUx/
m0Fd3qwNjTY3uHZLmAcuZAWlv3IoXpnhlAa5gnB3+SsYqKtR34MYKJxtlIVZ
rp0oNQupaEKdxBLusjkpFMSaR4ZxqMkKBko7kPyg/lIfVOqSY6aiWrhOoHXN
SDxpcoez1pkX6iru60saqF289tzDxMQaHMKkLCZIP9qsspnYjRea+MFExr2m
gPE+aMvlLXsru+fAku/jLPVc9CY9fXQChiH1bz5/ThOoRNGL3ToxrDVHVWWY
zfAGdFbXeZ76m3CVI2sXUAXBCwblqwKCXq1VrZaYWMbqmmTip1rsTrSD/yFy
8ja4ml+kpyJIhj89kJ8koHIcPnkoT0wSf5E+Yimz0yUjYVuXeP0g7PEglVI3
BwM/9Xp0T6zHg15vsRbRoQ1pEHvpcdx95MYdhicqP/mWg+BDGTcfc1y8WqjE
wMsWgXrrjkGu8L25RNBzEACQSuYTa1R/T0JUUHlFIkBh1DfMLRfJszZErgD3
Tu9gDYudi0+6rStX2UEZYOxXMQ+2hZckgQtu3sUSFU/G5yj2RDA3IIGbflEA
8Ordm1fAQ9U3JOuwD18d4BXnc8MRSEITm0VV31cuVTo8BbIKg0dAHg1tD/2I
LZRVtQoX+yKfbpccCtRuG1vtOf/GleHoN9NnIHRJPSKh/BiFIHgCFuwpv+Bj
QxQqcueDkeJQqYta8zGisPj+eHP2vcZMZcuy4qA9b3+bbotVK7lZmsrP+ZV+
RHzFuuXoDQCorgpCQVQYJT0EbAaeYlSDVc4Yy64lX3EomrPGUNPtvxGdZ4TI
wxCWMrgTGBJBu3ENY8a0S2qgN3YEWr0EvOaopjSIE66EVWeOVnJDzxJHVbL8
MF1pQHU635XZmmjKSYDYpmn43DJtJPzQZwpK8Z9K2lUQIAOgQayPVb9hoHDt
IXyXc45Fr5JyVHGBnxCToq0M1QhzWyJz0HfAEFh+fDJ07WOqoXyZ3y+LraSy
eowFX38jMX+xhMNbZQi9biWvR1B+ZtAme2DsCDFOJOCg5XjqYjEwMRiG1d3J
aL+MVQDC74KYpERqwEGz49RvKwvi0l6FA1oKqYss4MVXJG65QhknNymchObT
Us8g0OT1ncBrOygCGacgn8jOggLJGFAXti9QjQZHbSZRvaRycCzq1JLdWllB
6SsBvYeySvtCzb9dghQaCIv6ryM/RrP662VIFfJrM+a4lv25CQzuwuO6byQW
ZShNQG1mYoA8ab5YEOujW72Q1EfOs7tnrUJ2pbWeuNbtUsMl8HWjvbFHa1uz
+wrx6LLvpAidRHBI7wYapcG5VeXisQUpryjpH1wZU86IldJh50CYiyCJA1vk
B4LzSoJCFKIRNotzsREGHwVs1D6PM3EQt3q/wRVvnRjYLLsV15vMYdPJuwjh
dcODiW7bIFS/3gXDFrDOj3xFAIDZWcF0cyR+12is0J3hKyPDKYSo9NHzmfP1
MUabsIDwbikkIZpllMVCeKkfUiAG1Rpf7TLADXZaYRd6bUSUkZpNYTbkXimh
HwiJgSb+EoyQuTarbW0JBT3uAfGN6cVba6ERwjz5kZafEfiyIPGcobD9LtNT
FoE6s/onVf1IQPE4Qc7N5AGRs3jkOx8gYx6o+1vSkzqAQ4DEMCMfsmORyi9v
uWhUv500fwJuVU9FNQcgU5/1Sj55icIFGFW2LlsC4xjbOORfujSRBLJTI4F6
HQWrJhtIIgQvDUreeXZn/MZPIG2MuQwddBWJL0XgScDtUbImHJbmvUQqgBMS
vKDZjKCSOE6kUlSIihIYj6Ze3bFAAbsy9a5Ti4rTiTx7DSQ2IOH3mB9ft4nu
GIf052WjlnNerIrOlic00nsijDNP/JfKnRQA3sRDbWHDVvlsoTBvsYR+zIDe
Krey7pDPuVBwDRCu6VYb3TOHmCh6SbA6+W+nDyRbsIEpp+k0ld8l6a8cf3d4
b02sXO2+MD4W46N91BnqJmjFDdafecjQCPys9UjThbpBXTNB4/Pry3iqnOHZ
iwm0TWfL9+by1dWFOZpQgCVoA6iT2A9+Hp27/q8mNtNTqNml5Xdby6L7Zap2
RjPLNuIMKwJGKEuaBEuqfKxD8u7eCzXYrqocPhuyFekheZGeiOXHmnZ2I/th
DGpAs3YGJPcsGJyzIbmHCybTmMgUv/ZIfOXB8Pp2JR2dsxJZm70fgtH1nwXd
9h8Oju6gM7Ku8z6g92//Lt1D4+N0eHahQeLKyc2/I63I1XQMaof20mjYA+mr
c3mdSiOI1H3msTfTaSF1GcV5KQCscnNB6vTgz61Lb5cbXx1e2J8YTRNIFB80
mhgR2NOdQ9TrBbz4V8PwE45xtGDOMqi1QNcpfOGaOIa8z4lPhIP/xSOy+jJx
RAelDUM5tjFQvlYT8qNx4UFCF6aQJXeAa41C/0RH04ox5jxQFpez9pBnHMTj
3Jg+6TFErEKUFqNHb5sQjzBMG1ZFzLT5sG6m+y2EMuRNBEwUBtvR6DNNuVXc
PwVlYsS7nxlwTV8KwO8w5w/aUFBLc7ghvPBTPk27jT19fPpUSoWyT5vte1q5
1KF2rzXcbq3IpvCl44NCA2Q5L1ChDHKDrkEolOxcSa0xk5ErjNrv0exFH33G
sQ3CoiLdANKgUBGNA/gIEbwXn4ygkigbbFXHNqAFT9Cnj55K9hET5NkJOxnC
DDkOlcaCOzc2D8Mj6E7SRKHVDNIkPorTXRC/4ZP0uBGO5LiR4PA9IwQQ/Jrx
z8P0w7CmGCR8h/+mLpjIyuAOfRokq2qk3UDPRZOGiBZWwLUDJWm4MBCCrQda
7DX7Ljm5uXXwZBsrecx8ClAjk+TCBYky83OnQ+wVt1UlcfSuF7cDXAcTB7mp
VBmYiSUHewRlF0uXeV47BFU44fIzSH4ZuW9GYZYm7JUwtXnhXevxjRSV2Yz/
9AN3oymUFvGDy8Hl+2OLuaCely5TTYzfFruofg4Xyiiz5KjPRg0ecYksZY+G
b+tq8vXCOYICfeopntOpvcvnPlz+p4fn6fd55bo4e3tFJ4Z+ndCvNGDlIikD
7baops2Z1vpntpIfJQxoRmIdZ6trtGYp+PNcU++n76+fPbKW3EcCyAKICMau
qzSR372eMsDRpiE2JB8yU3GdaCg2hDPko9HXkuYXtCrfMXa6GnAB/U2qtpnq
tUAcHEsl1yaHLS/0swO6GDGyteLSBM29zl6nhx04Hro5xtlYhnKkYsGGGahq
rLe0KH+spLw259KVua/mrZ2ywD4DfLsjzwZnBLA9ethdHmG3fyUC530wxO+s
kODUKKrG8b5ts4WvyF16ZhvV1GbfwKIDUuV2pW0t/jqLrFfOYKXZ+7WvxOpN
pJ2BOtQj902QWmxoAHoRhWdj0jlDzoYDfSJA+so8zFcawXzxBZsYRlnfFC8G
bN/kuii3raA6EmlrgXekhhKvJQKvC+LIrLUwZy6U7rC7JumlL7vscZwYEX2Z
B+CwndKJ/7zNfEKgTk0mpYlfrqnEt8HuFNxXtQiAHIUBVdMfhGLtzE17u7/v
oCLwxim/bsXSgprA3Iw6CDT/KXBU2uuKGjXj5BUt/lbgQZMLnnliPlVmJk1r
2Bv0zQFdEx/y+kC2F49NY/A4WxB9szWf+IMY6RS6jIdsDxyifTajzdoUIW91
RewxfcFMYD+N2xhJwpAb9trYPH57oDrg3LWX9yB0aNCjqJM+mzlWJV2HqqJ9
gjJkXBmgQAJQI78bj+4++HvPfvtPjLfu/Wa8/xXjir0Hwvx6P/vdTo/+hf81
puVxHS4xvi0Dsn1OEj/N9JQ0uwP790ESTDR9gEf2w0HiZ5o+5Ef274PETyN9
hCf6b/9NMNP0cfjx2L/rppw+4Tf0nweJzjh9yr/iHwdJMN30Gf/ufjjAWf9t
+hy9LDkGw611rPm6nwG5yfSJNkWo2fLGf78BezO0J/zLwBzlX4bn6ICjM421
0ODkSE1z+BWJ3ENhthqdgQ1i9hzrMyw289kDnhD8UCxkutu3OsZ4r8uvndnr
q7YrOpNFBMk1013ni/CEhn7QKfsXnDScGRiGYnNrRjFNKjDmKTY94BRQbAQ+
epcLVTjBTCzb6gvyuVJoQ8VjSzGV/gCXKbev2hEsu9zJteHVGoq4HNTkrrNB
RA/Y0ItAFP2Qb1qt0xfmmTgy9RI19HcEcnAGXJfiVxYtxuk6SnSLIBsTtz9C
VZ2vnVPCANdUpkcuha+KHlAsClGQ+yxsV2O9fH5lGXo2pWQO3E0GBSDws+4C
wJi3bJEwP4CCCoax9MGFB3Kzh2Eh2brB8DR8VeujWf6/mAhZIqO75dbdNXEN
Or7wkGEr4HMI6v6el462QfLC/RkK897Y0RmFjyYP5w1Ppstz4sjo7WbcVmPA
CIUh2rQ314EMKl1KgLWCPaEovASVQ9eyMNciaNwSxcZCtGB4nDCLSUoAuM/G
DyNnHaCToa5IuoBgxN27uluWV+3GUqWJ8+aXEbkCG5eIkwEMgIIiWcXAaHuR
ACJOxdh63FWtujGTsjvEEsdOi7A/C85+GxT+CCdvTpig7qIUO3RbxiOI6/C0
bB1KCtmKM/x1N+Y6wqEPK4qUdABESGdtSM+Z2zs8IvOE63kStZ31X23D7SG4
NzuhcBt4Xi3WQudsodPnQZWbq4Z4IN8ah+GvVvbnHcPpNe0RUUsewxbIITBc
fYZpd3h+9nVzlEYD9svUuIHAyVFYZ+y6991FcVtEMeBtI5vA8l+D+q9nZWJG
4oBFhFstLOJjFuFaJkLDvX7HGG+PdT9UC0ZGfosSwo2cibMO/+qsxZ49zk9m
imYAmP2NNb5xjaeHb6u3R3w4LYQjfVXVuSp5OSeBZym9IqCp2cw2um3yJIid
cYEwBqzbiz8cS2wAdDYxFbmD1OSIokSuvdmOEth/2ZSup/IDI2Xwj6EtWahe
km6YN2z7pmFImSW4Fb+4JRmtylKarCaEsxMhYoCnHnAulVFC7tCVVMJnQw6e
pfDxIA7YcwXnyAmPiHPgzJr6RfpIX6g2L9L0Mbtsog77LhvtL4gC9v25H8P+
3I/Un3+h2hyknb5i8SCiCUkIe+hwnA6PtytLvJWCPSZGaP0eRvjQP6X7z6J7
ffpkBX5IdzJbvtRizy2w1sVfZFYNiOM/7G9sah+fyynhitSRvn/3UmE53sCK
u9vIbhbbz/t3VyIGestv1nNH+E2mHZ+hMe4URbgclnwAcmXTcN9YsVDUoDNw
TeeOZfgZ4tuTKDZp0PTC+GBzP0S+ZiBssu8U5kzEV4rHqS7WfKbM86THx2jm
s70rncCqA89qb1qNOTECZL4Ci1uJG50EwrYd1gIcJ8zFaqti9ekT/zZ+w5ny
LimOF6HzFpv7nz96ziZGZGdLpPZ9zaWLDItga2GXS7ULvjE0EQhkGSOqbRU3
UpAwzTLijILqAcI4BZoNeI8BJoBNGWPkaAnegSF8mL6g2yvxYG2QqGS1DkgR
+VmJdYCtYWUFCo8f6k24feBnnHH52qDRxV9EzXSRpkO8CUaWSL96Mnl0cnJy
yAATR+k3qaSuotKiSH2KnI4axzMJD5fBMEFpJZIkOrWOadj2YIWf2DRxh3+h
Hru8wOXSvsrKYkGc38WKr+2HTuKraa9R9RB4UMLgarF/NQEMkuVzicvKta74
uHSFAMYketmbv4KQ/PBlgSlxqmQsGOh7sQyaXIW/Ym/spNifyMTzeRPMpAoG
M3JlNl2JubAH4VgIA9GfIdRzehlb+0I1SwEvUr7zbpwnirN8I2hbEfizMCLH
ULh2MVH64BoxU/GJtkGJoEaAXlcSzbV2iZNRmLtS4PcWd6i10/m3uAAnqpRL
mFymwZBNLsx7mqdxKfTBcYeRayJh7Zw459i1nxXqhQR1mRLbvzZTFw8nknnb
Cbr5ugnKoR+K8t4ZLZDth8q3uw+PeDtZaIFNe/hV13hrYXSkeMQh1Or2dFGQ
5tG12duRiaIOoicmsGXgmWN1fkqyO3B4/uHVS/sVwCg+DaUD/mW6ukbUuw48
A0cYvLDmbAk6iI9b6q8u/AgbPwB+1ew6wkSnechHwehQeoqvALo+7BtzQYZg
+1etGQ4sbI5hs8YklOdj+ROF0OeKTiVLzDLwmg7bOluFF3jTqxlgCIfOekUH
p645xUIrdov7wfMxOndVWG77FklNi4VLSDASIlgZLhXU8ymmNXxdhpLj6KyM
1qTl4FZTu1bFplEZebjcAWdtNAW3gechDJQIht0Lp/cj5dWH2cQXNCq46Epr
bFlcHeoKB3kW4l1wgNLRbRzXzQu3z42aU8TVVIsdLfA7ha04EF9+gCZ43yAU
BlUtCytbQxtHzXRdWMfuvnbxAyG4XCxINNInL6uvgTFENb1pKpMyFXU67k6B
iZDk+/7qxn8tgGB6cBSW5xfXyLkToTP9pWvlSlW49egtVGfzxWu19cHvyx6l
fxU1hohPjY26qyA5gfES9Ok+CcS8rLuI5tSzkjZREyRugJebWAlRU/JjDd6q
ZjpDxwgSpFx5RXBYe/fq+s3x1eV5evr86dOTVAFHvIU5DAJ2kf9YHPjmI+5U
iIPKnLWgoBpI4/IRnkuXLqQDX6rT68a1L2J0ru4G594Ouh28nbhXd0N5VlMI
cp4478Qv4d5y1z3x4Q/ZUsMIpNyJ5uWoqCjjG2he7zXeNJ3bcdKRO3hjBpHm
sTVc8FrN8ooz4FHIrEKBDwDqDyTEqfegYrbghdWzjBigFd62WxCOe9o+VozN
YdE4xcB115HoPT1IpvcvGaRQ/At99Y9/m/6N/ai3Q/NPSfJN+sqfeOFDNkY0
1fsmPf6twvJN2NgAwPSiycfNPUOJZsvklz9hJvfzZSmx0T/fZMslx9QPayKu
TJ0oIp+ae6PV51/WREa0sZoWyTbaitSB9LXALB0hUleg+DcDqspe4TyGTDNR
naMxHSfriOyuNkBHydFa6XcAjCFJwPzrJpwxCEyENxSPf2DMMS91g5xX2Hwu
TClA8RzWJCDVwd3ghNs9TfO3KjaHVtI+1o1WDwpkfRPyC1/kwhVOH8DKsUTI
LRTAbSs6YnQ5uqXXc6nxj+wFinmau7ng6fMpo7gYvygQ4yO3LxHgoXeLC3AP
k1EdY44vHCvL5iIf4wGFV5fcQvEQg9BbZy6BSEEbyH50YijETt2CgeA5gY0P
G6hoZlsxXMsNsW+wfykL7HC6RlhgzBavQ/7nCdvNePcUZzAE/5qxwM5PygOD
X7/IBV3jwgb7n/0yI4w5mr+H3jowXymzeSh3FNtWrvnyspQysAyBRhqxs59X
CnqVwyZqosx8diWdRdWgtMQqV9BVCcVVjEDwgCtXXJVlrsBLQa6ibqz1els6
c4XCxwtIElBsSKvgk3YUNZ0EY+RWSF4YbyoUONvOiwpfMkGrlEvVTUkYiEcm
alUCtcqhWQhyEzJuXONIss8Y4EgqScQwOaHmJgOBaqVmENEYURgWguBSJb4o
DVKb0DUK0eKlJl2tOeh8kCAebI61MrhUfeAFy6Vw0giZ8ogndK2nPhnVlXaw
vrg4LdqOau/F1nO+ZFxIPKJTJlZGK93kCq3Z+nwHq9iWKO9UxGBN7ewAW2RO
8azDeseACSLVmFpNEI4ci55aXlIAhfaRTSRIjlpLJLyPs4RlLDUvIWKapcA2
3nQdw+YHUIpF8GPS+RFQRs1koo6km/tKSibwC/4oJgmKFvPyOAlZg2ZA+8ZB
QN8L5HsDMP4zqNAq3/rEYzV1ZlYlXreBVGFY7UIWHWxI3yc2G1rP4f6E69c1
inwdwflmlhqmdtpt6wrCY9IoIqmjDKccAPxtgNITD7c/Soni6IwzyISH7hRi
K3bhorFHtzWds1L9BjwmsC7NEw55WD+Ppq02CnsTho14ZpFpRajML5574h35
UmwCNUpc6Pt2ClcG3MVRDjJu4KBxp60JqY81V4FPTlBIG17Zpo2H6VwggRsj
M7YWGEKZWFKhmYtoWnuCqe6xAS3MvtcPpyJc+QNW9PJhDjOrFU9TOj+/Phq5
lMfOVvZV84LvJ1HrZTdJhlr/8aebX9Nm/KGJEGYE06wIk5j8qgCEYlYRIf4Y
BtFrUoSUHqPmBSPEB9Ayifghb3KzjjENpAPZ8guFEGcSysFxB9DOy+B44kPp
FhTmaA+OabqkcwTmH2ccEWboGhCNuHwMxA9eGfWCbktrkSg7SRxfEMoaZ4Cq
bVxCzLH2mcRIccoTt/gj/e/Ixb1JDEsoe9veC7LOwkOrfgK3iYKxySmNRjfl
am8OKIr743b8th5KweuxCHfogrogeiZR7biJ4ApwU5q3zqM9WCJzEWZwIcOK
KVSuOKymRMFeSMDYAF8Rw+zNPDgLLBHs3J5QJ4rOH8M4l5rcc84gWBumo1mU
nKly2I+JAxoZ2eTg+VfUkGd3NHbHVcfb2XmHi6KzF54HFg00MBY7xqHbyHy4
sO6H+ofIUU2BOJJyDucWVrbRWnMyPbUJNkEod6BznL290usCToDWvP0A57EO
p1vm3rhDys2WmYUeTZqHM+i4AAKenDNbVvbLW8uafCXZkJMEJ4LETk1YKV2T
Ul3Zm2uQLSgGip9fWS6lOKj14Xu6/cLHuhDBDQ4vQ1RSwl1l5ziRgXskOswA
lAnuGVdmfdQZmWZ5RqlPHDslECMKIfuFjR1wYzn6bv+GOwXnPLQQ87Z6/Pjp
8+cgNxv9ANfPFswgBrNoDaJFG+PdallzEaHc+cXBQWTCSMufMDKopih1qjjg
fLymozGSglvIOiMlVkIgkL3eeK4j+trJx/nz+fPFU6xVU/VPisyNh4KtKQuO
tsKK7UBUloqVqbqowsgLnMrkTety9ngAnl6BbXWEHxAXK1fUTxy7G9G+m42q
hZa9hADMfVSRlgbC73tnvHExLtP8Vx8bKbjSPxDuuNi2YwEgOGHKUtP34W0m
PAF33Y1Wxm1iIZWDemdVvakYM8XuRVcGPOD7sYW10cyajvSB5MPCJcRKuJ4W
mikYOasNCkC2QUiuDBH7W+1QoZy4iUxsWuUMA81gnKJjDclfZWynm2QBJJpG
2g6M2UJf0KLL8rL2/bblSf3BCVc8GcxqaLxOGVGtNs57jY7joMQTIIKFrMpW
9lAY1JFKF16iEHAQv4aNhgnph1qkS22SJFT5kJdghKgjqfMckjAn/W1Txtuu
t3Ugt5AMN3bhiywlyc0H5ECXwC4sSNMhSfhmd4BXkVgh9u+6Rdi7Hb+8wdUA
4Rk1zj+ejfyO0OSoKMKBvUYcQCohtVL2BCe7EgH3FwkkmHhR5z32sZdsPWp1
wdS7Y9N5oQvV1F9X6ZXH/3G2F6emmTahe0WxgnzkjlMMvB6bqH6U7muri73l
ECgcpFlRJ1oNx+Hjow9O0EbIHSxlMsmVYWaXrtYtBAPhQLWeJFpjgPwKpgGr
4tz5Tkwekv9vsOgBHlIifB7nTswmWgiwUyXP4dxpkTy9/zu1DRolb4zTrJwv
2rY9kulSi6TIdZsgR4uIU3NWd7YytC0Xm+0NC9aK5aRo7UnXZYSXdtVqldqy
AvC61cc2aLcF+s6D6gZaD16VZgPyX0TfKHaehzrf48VN2LLYaSrEMuYx8ysb
SBqwjoqtndpXo8Wb6yPLd3E45kz3aoP0aZdagVRoMwmF2pRgnu2c7iaV0AHT
wLCB3kgaJx3snVPpis4roiyHpqm5VGREY/lcClp3iWS+sc/byt52QMci+1lj
BjRRXBLVHBg71Epb+Lv5ddV108al5blHA8fV1jvB4N/gbHeNjJ3IBUV/iezl
oamUWnGS4gA4jC9kp2bQkVhss9Dm21bUym2Fo9HrLtF93YwxUufJ0DmxG0Of
Ox9G8G/OPE3/Vl+RXz4niU7d6aLBgkiUEzCjLBnYX/HekMuHiVrR35ucxpah
EKtaFZV7vg43JK5v0w8lJImLAH0j4iMXBHKTtbGHcx1jD6EKjgIZj3kkxzoI
ZQJHmJ2vWoeF4n5GsfdRUKPRlrs/1UjBFyW1YRXwuo21v64xuhh9I0kSDtKK
bh6jrW9SDPkyPhi3EAM08DzU9HVfRzRBO9yMeo/Sy3Je1Y36q7WwjXdFAvjm
01d07F01ThefiWtNU1B0khI2zEziXoXHTV7zxPSFCHApyG9hgfAu7FfdQJIA
YkcaUn8YEKk1BWadJDpzO8HK0A0SiroxeCcLtG/FP2JmhnXe3nLmvYKVd77U
Sg1e0fGYUbAV79b0fa3oSYrRLUKEaAcRDJuvj6w1q3DNX0iF5TO6BXZrxjM6
C7zUhxdnZ5xw9O7s5jo9C1EkP33i3ybhb58/BwS6V7nanDNluAs8CiMMeJtt
24vMNbncLgxVnAsfUFVjb7AAEiDSOHHNmaHRkK9Uzz7zjt2fX/d0xb0QrYP5
x13sa+URYbptvXOZHb+XpDualzAxZGV50zmSrep+lHfUs4/yjnuBrGUcEGA0
gMYxxwUAXCX2XKgaxTYzscI1fgdNoImhatt0l7cStGw7VZjHYXNkoVrRgr4p
XXyCiHZBpFL/fYsumzw+eR5mvE2S8CWYwLFJe2RFOkNEBVd5Mqtrhc2X5u8e
GoyzlOFR7kkjG3WXXjdDb1jOFjx0uoE5Mhxe0Z3xau+bfZaxhx/EXyM6ouE6
60Vz6/Jw662PzQjPRGZnIgSy4irRQfFrBuhOzSMarTCcWsKDFXiGhEU7ZiN3
ckfxbhv9+U//rxZPD0NaUN1qHkfESNq8RPFz4t8u9cjagnAd6dIqv4vneAcM
tyFKxtlaXB9yaxlZRePC2I0NaJKJc3Qo5osfeX/EUnatE3D+Cmy9YaKtFPYd
1zVHcynolURLCv8HV+uvL8OiO8/4AK08DhiOalTsl92hZY6jzJ3SiUCNdtlX
CzcqQ+uP7+h64BA0qhYZ2JVzCrpwXf5YMYgV/Q5hm3GeWtRRYekGFv7I2MGC
kBjzCx+PoxFoI2R2+7adJ3ptEfm0vQ16LqgQLzI4X/PHP/50Dei7qwshitz9
xu4YkIMGxqIkUJTQvryeHn7gCuIBi+OyIXkPic/A9B6jTjPsiXlmsFwBKJpH
ZeQchk1ejpH1KDkBZo/I4DukgQG2o9IYD6svztIACWm3etJCKSG4YbP0dxff
4SdLgt5Fu45meXj2uyvH4fuM0GdY3Awdl86ZvLc8Qpnbn//0r00wbylaysvB
K2G2We30ByH/WyN/oxSUp58+8T8m/0B/Ty7qbNEqxR2k4XWxpF5UULFFcJiM
Krx1l5j42cfH7Sj9+HgrbEuyKOTqUb8WXy/gbgPnA2fQCgaHu0P2V5+aJtbF
e90dLNeXBRICJ3xAWnKBR9SYJIkOrJ0L1Q25uhiUUEe2RwzYNzW9GZ4cgapU
hXO7GQxrFMZEciDj5tnF46W6yjsUhU52INnEF+bwY7GHNgFdPlpeXGaIfcNf
vxYcqnhFao/bSRddt5dGU0Qn/JttJNBEa5nbZoUICpGtBdeGku375xMhOGBd
7I8y5Jg0e/0mLFqJ6ERXQRLBWFF4lLeSDOzXGe/Xme5XoyW00W8RYQmGFd0p
co9LlZPewjFMoZXqyDSdaeyBTGJe0UE5g1WXA1S66b1FVFF0gGAonmepPd1e
0vjOCPtXe+StxpNk87uMfZkqCQ+IS66YBBdN8GcqqhZvApMY7OyXZs16TK9L
hiKOe+Vft6UWNhA3hBn8gyJ+qI6gdetd3Wj+NJi3h0MKfizcOOUK41Oioacj
tSaL7Q5bpRGjqRTfTM8j5DBEQ6OAiwVD197/iu0hwPg6p0GxSpRTN1nc+y5c
QO5dCKP3DI64C8A542XRduCtvUONOEYPVCVRb3NJ0gvE1W3L8BRTLJULIzat
UQB47YSJ4NPbrN7KIFsdWKHLrcvcy1CFqXv9sa0MQjRPRC2oriVlf9mck/KQ
e4fKcG9Qsnzfhdph/6LAhB53sPRhLSGa1GAHAfKg4FXwVmV4EBpdYQaZzhCC
b7qalwutiV0IHp852Ky2m1x0g4dcVVYmYgwkb42f9kj0+wqTSRiO3j3Qwc2Y
QE2hXm8QyRYnHZkd50kqdqeu1G5xXSpBqLofSBDMYQ1vovEAE41lcoBVqMCu
uEsmHC+zrVRiSeOiupnLOC80jiTUeiZaw64urACzxWLF3RRBBFCqNaHW6wpw
TUwJrge2EsRvFigC4GkFjDFRrqTdx8GqEFGjLkQV6mFXowVqnfho2A5mQnPW
8jPBpKZaiCOSIPXeFASD0GStEWChcqbZH3EJvBjq47MoZd9plhvLxIYScqGy
agjo4TE4QoBJq7EkhVG9CmimWC9zwfklhtFRYIPDCcbbK+EcQfW8XoY50tqM
E2mWjSHpsZFL37DlN0Hcj52Lb3yEbKRV0nRy4SHockEH+yEXqEEeBrifshQx
uPBIhqJrdk9qRGuuCh6sA77qgRK7g+l6oouYg0+ZFWzkNpaVe6l6sq0aAz2Z
G2cxrFIDj/qcQ3zYZD5ipWKk8Um4Jp2gWCnIg2ZUGp3MHzif10D3SkSaei9G
U+YLIxd6yeJwvIF9vRphu2GknMW7SPaO8zBzYyNtGPI1L81dXob2GB8hdLUY
+n0UHEl/TM0WgmWK70GJdRDwdTtqHGhlCZNFHEoo5m83ZCVOmBfkApt9qLCh
mcUOwM5d5Sgnl43DqEK0UuinkWNoRlhWVdxgXfDwJg3GMEkCneJVtsGYzpAe
ealf/rq1U2NTThMsl8CFoTaa43W2aSR8fe9j2yPii5HQTw5/RR4LfZdtV61C
VggkJNxwX2hQ6k/RsWGQwDaPvkVH9q1YRr80NssDlGxn2/UzBPTKTc1WWI17
lJowakZZFEA/kbJfLBB7mPNKXHOAj2fJ3+EzF6V/iRmGFDzsDs9v814RzyAr
w5vQRxLjZiYD8VwbTkp0s0ab4VqcVv+2XSCer8EdoI/+fVZfG5u4aotr3cqS
6RtwAMcO9w5IWfU0L+mFGaP5LUwJVM2mK5BEdHvroJ+vw7oNv45+ue0liIO8
/h5JOioDMfmVyxE2p/uWQxj2thqa/Hi3vBUpFBM4t5sBT6KMMrsmJLpFolZf
nZ1rSJCPatXYVaIY7c9j3pemHUoLLuS7rEwA9uifCIMK+ucL7fX7ly/DN6UZ
Q3MN8+z9MYvaHknVAt5VGLL+ZaUMSht8CNxztlqF4okPWGezibtERxJDa4dP
Ru83Ob8saJ0DK4l7WuU4HaiFATkFeSMlOhF8h4JLutZuoj10NO4o99yKjeLw
fjjKIJygkYKH5pRUg7hHf5PvR+xKvgX79og2Vx1BPa5FIYSuQWWFgvc1QATf
QBXoTlVPRJaS8OZiSaz4D9qCB1fOLB7ijDat7YEK+qTGr9Mo2Fax7yCHsTV+
ggKyFlIVxXVR9Dxg2V5ldzCgqgZ4Z6hMvgih2mB4vr8tVhpl4ylSKP0DsIR+
ISTzwgbfOcsNgrT8Duqf7rPVkg3bt+sm+aKN2m1HYQHuKxML4xgERyoZYZDk
RNu0ASxW4H5Zk/R43SsKWObLSiGfOwYI43V+08Lm4Yak+zV2UtnUu8EUPXvf
tfKRT58kxiJ002cemdu5ooJ0cbE+Dwc0/KL1f8gdNWigkebocRNrdZ3iMrUi
TaFWTlBfdP7l4SwrH0nMyU4K9mjkC+0ePcoV64I1vrYaofS2Hh4niBK7/gXq
jyLNlXnHPacUMOcI/JY955uqnoHb8getaVw6LJj9AweLUHVqpADPWTNoeWsE
/wWU+I7O1y0tAh2cH3G3ImlSUjBcLR/FrxRhHQKEuIzZf1mKGGI2U0l3Q7qY
lAMxhPJMdNqdRuZwqJkK7gPXhsOSYUItbIjgN7PbIncBzWbbof//zr9VaqDK
eG+giihVClZpdyvAHOWCqqyfVLGLQKt3FvsOY3vTN2aAvWhkwj3CM6w4tkRe
Y2zR5lnQptzW7liTlHJbTIv2L+pDgGd+fSdn3giundx0tqsjP+8bpMG5qlKu
XlccgOHSAqpIqVeyiS9GoFAunDM/6fWL0h5z9npYG7SFGbdbTGWdVO2udqll
Rr1SaUWDhs0ZChwVfIET9sNPTLxGxSGzQHsWZQDur8enDyN5+SZbNoMykHeM
dq0DgY4N8epGEllwOpUNGYzsX9Wmy+mwRsWOK+qTlzUd4MWv6AjfMiCq9xRa
4x6x6t135+mzh88f+Bvcfxbg+sukgZ1m1nLLQNmWpRk2g3LOUXx/6Jf1FQZj
75NGt4pTToRULJgHCgV62TBqzy+tJjt8DVQjlIe7WIeGlamdOISO4DxFpwBR
DMtKQ7mazPoShRdYKB6xtNWcLj8MWUobDL++cVwF83eqcPrpK1MoP4sKLv6v
rUfylRJ7QUowrEtnG06+LT6mFyNSrzV2gvRFzj6YKBqINqD2Sy0iZ4JRkHbg
AtjCTmhbSFwFbSJi3Apnazb55/JT5tGNUfVPY2f5zbAAIEZwnxn4PmZnmKye
j8mFqWMQc+S5lDrE9wBhSBIrOuPji2aWMEALu6lmt2MBueEXJfCavYWAgkg6
VbdcsRTTWP350fReSe1QB4CW1x0xTrAstJX4YOBgPjYBASN44xuDXhWXkg/k
VeJbgCEgiCMMG7w1ruoxY++6EF9HBAD/nnIJDwXk5UhpUA74vpLRN56H7N/y
0u3idjU53CdwLsmaxDvCcERY7S+x34FJ20Q7Rb1TFuki78TZYlh2S4uJ4ZTh
rmWOMQLuvybBbOdFcF59WG4YEh0kiQiSM6OlhAMLQ4Oe+zqbWEfIeL9mJf3S
/M3fcKS3C3FMj48tUv3vZeg1h6nDN2FFlWRm3Z/d7Dq/094rtPQFP+HtrE+4
Wp1qvZ0n6Hg+ztrug9l9Oy58XZgRYOl1lOlp4oaWPkj8eNKHSTiI9FES9pw+
ToLu0ieJ9ZE+DRCM2M6u0Ubs4nvJuSCNPMcjSUIIAuNqQ2xDgPohkkeaIw6Y
k6QCg1wYGwa52bmTbU690yoc8B8HiSRR8b/x10FS5Wt9AX8duMoDaknnJ/QT
/qEPpT6yPUGt5KjMMZ7Mp0v+14ErAYVf7R8HWhlJRiYlnAxrG7/xNjLk7wi+
H0/pB/rzwNf8wa/8rwY1qiwFBEOUv8PCVfxzULXKX4j8wP3rIIC8kpbcPw+C
Ql6YlkzUCnjJTLmAlhP2+Cf6R1CwC7/MZvVgqS59fawvWH0u/rlTnAsDk8pc
Ia/TnXXV8XTS1cqlC9QB+pmUK37Ly2a2fZhNQFp6cnrir9VL4nUeSQ5yWeI3
KVilXMxZnYdo+OgEydS4cQD6gzSP8djZ2zqJ6Pmc3sEOCd6xJqmp11xQpJhd
IOsyVNWNgz9gnhpxtt+k8cUx3LCY5d/UgL3/tQ13mhNWi3cePn/2RN5hSHp6
J+gqMy7t3coIPHJB1DmXO2g5OWZOwh17bonVRAkjkIWY3x+cTh5MHjw+mZwe
HKmYQMJ/oAZ0d0KSSI0CgYNyTlZzccVuuRhwgaU6l02tBVCArpelUii1VyyT
tLE//+lfDXV4pJYoQQOoNNF6wCXfiyyQQrIljXCVlR/yNg6qoJFLxIDMuFfW
GZYsDNQKOYl/R0gQqHECFUjSEymoVbc+tElV5V1RV6WY4QxjULS2Bi6VTnHQ
LLAxzyshRxxcgbQFxDmRmL03VkF9NcSQWQlzYv/AjCE6dQ1Rk+G6I95z3WkD
rm4Z9YDndYLKaC5w3Spnufqa6svXYDurL6x7vVODyoUBBXnOtoGO78w6GZX2
8oUGaIdtshlKoAOZvJ50g93V6h5PL94+AE9x4X8OU9mZm8TflfvFmbtiaW4R
3zc+N7RLSgRNr9dSZUuoY0YenwxpFoteMAzvLUjKYanuUEgwBiVIcnJcaXtw
0vW27QxGzI4OTIL7OQ/ofyEL1nGw/SbwvXWbCyylNo5Hk1PHKkVSdACjbo43
twPY5OpHy2QRJNdYLcMDPjr+XJ0uoBEqvpeCIiVhTMRIeaa/Sb/Um/dXppGb
WuMvN018GwTzfMictzPT/UP75X6Kxb9p2KZDfWm4D/8Nw7X2e8O8rgT2A/Dj
G1Qx0NjMX7Hm8gocXWkjDaHRC43hFGBgF2wRzezabbjuMvQ7pya/zRpq6o62
0Rxlf4eI9HjysL977XqXIxdOxVHNpsK3YjrfavwRvOVEi+ZYBHcJNcQI0vc3
342fef+6KPirlUQmDqRl+1BHH+3SUySDfGsHYojKeJUm3kqRtdYCGW4Mh6II
kCG1pNGq8mYx53uV1GTY8daG1JTE2cdW2PfvU9Y85IHX1RwArf0E7SP+yRx/
XH6NtcmxxluY5hgpKvGngZ4SPwj1lPhJXKrW6Y69ymH2JArysx/Deq/2Wwdy
3A2xg8QbKMQup11++03aUatHiWWq//Ju0FTUG8XssAR9xKZJIjYW8vo6uK8t
/lXBDcJl5Sww+syhFRUKOvpNWnjDCJ18AT+BDsFi8iQ9tD9dXKMVoWPPdCYi
oTTDAfGyNzVmLJxP0PmR7jnLHKd5dsGUjvFjF1WMfg6aiUgZorO4o+PC3H0W
fJRfCmCLb2AxTgehxIrIaATF6vTxAz6Q2TJ9cnLK9qNveEdtcNg0khv9zDkR
xIsHyIRVrV+kr+6UYf16cno4gC11RBPnhyenh9GiHkUkyPYQwWOnOjrQrgmd
qEqEQRI4uKveYnSMrFx26xuhj8yv98FvB3Gzjvc0fww69n6Pp1ymB67I2oHz
T0zS96XDLhIfgOakAk4c+u83nf0ZoNS7sk/ivyBZVrAYGcDhCbfG253eXHL6
irjosxCdCnG7vPDS9aILY3mO4+v49cjqxEmtifl2JlpMRro16+PRMU6SQaoQ
baP3iEp/ibX1v+1/X7T/JfHt0y+ymZdcY3T+Ij2RIbKRXn44jX8YIyEH95sr
vumekS5Cdw6gjF0RTvcQEKtjOo3xa4947tHw+iU5dXSuuKa12fshGF3/WdBt
/+Hg6A66hIuA6yPLIy3lHhofp8Oz43lHxeed4OIsfNSoqB8jLV5vdr7Og7/3
vt3+E7Ps7f1mvP8VM//1HogJsPezt3RygUI7qa7Dpa89/zkwZNKWJyod2L9D
gyadADyyHwLDJp0HfmT/DgycdDTwRP89ZOak4xJ+PPbvuikTpzzuGT3pNPGv
avcMpps+498D267wtOfoZQm7bSTmuV3kfhZcJqJPtCl4l4jQqlsE5stJwxVD
Dp9NJk8euRfidsXezivkvz5O/zF98Jvwl3/i9gMJ2H0u1nlmUIwHRC/NbotN
LA+7d8NH4HRDnwjayhe+1De4gb+Jf+K2phXJ5Hv6j56FA4g/GhzB0Ct7hiDG
pD1jiB+Gg+h8NjiKwXf2DIMkT8cvYIGd1HSRf9ykB/94Mn7+T59OH34+kJe+
sGTdx4Lh5Lcc//0lkveeDzXwRYL1X+g2sUcLS/3F3p+gsZqBsXtFrD+q0VCD
4UoNtzv0xheW24kSg2sTPv3C8PcRFjJE0lM/PWBX4EDjY11VKwCTdXTZvmiw
LRmivi7YLhAU4fY/qRSgHYRPVASwhdTLvtNl/7oPewzKcPd+6vXonliPB/0J
9oniXY4M3LaPHsfdR9FF/t+4df+NW/dfDLcODvwhqePpZPLw4ZE+j88TLG6Q
8exbaDbDle0dh4F7ppgFzMWXbHXsBYExzO5o4I6zzJqamIq+UG1epKQFdTvs
8xftL2Atvj/3Y9if+5H68y9Um4O0O7mIGlH0ABFlDx2O0+HxQjT7TyonnoT2
RPe6hk6YDB+VJ/wvXtXw/8/1y3pRPYMRPTVMRWMX2TPdadXmb1IXMOfKEmtQ
n/DiwzAT6ij6gG8rkk3FqcDe49usXAbFnTmiWRJfFMoNJjHasRPValg5PJFY
IvrrVKOG6M+H3Xgh+u1RFCZEPzyOw4PolydJV+FKT5+6ACD6xzMXw0O650mS
+FCfnuZgIUBmxvGCwH8HUP13ANVfEkDlQGIlbrcDUYOUAY1BRrgFI3NoyUE6
ekcaSUov4R7jCJs4XhSIc4zoY5CbAX6ToGZyyyRkaCliFJKI25QoAoV5e10h
/wGDra1Tj0o3STmPMoD6DPHkXV144QGJ8Y4fe30iWDkxKKf0PCrVOoSCoHhb
y20xz7RSqAwJsg4NOEyd9lAWwFXVTMa9peuTVwzJYgEWrgv+W6QJqaGoYOoC
KjnTdZSgi1LHZ4MJorNd7C2HRPQi57jhGLv0DeonanCEaRDTmq/FZcXx17fi
P3HZKFalFly91rZAAYF8yjREBlC+TAHSnxBxHUS9j6I6sii9lc9uy2pVLXf2
nsbbQPQQ6b+9BSavFqflAiutFbO0gUpM1tTCdFbjzbZmd1SccDcYz8TTE+hi
u4tQozKrl7laJjEFB/Si1Y04dCkzzCdZNwE9ynyys683ZxV9OcAwwOyVGSAN
p7NghtIQYhu64P583eSru1wLpiKuJoDWRSq7CzZAmkQ3mEwKZAfjWFUL6hSj
4Q944Lyx2zBrC5tjZZk9klhb54tt12nr1c4sXN4y37a6OybIZgAPdlg9nA8U
9mrAd1a+wJbKRfj36YM4QOwbZNrto74mAIrOhCnX1Apr18jllWNmQ9ED9WZj
wV/XCkxFVLrxk3stk3Nc03Mr458ejqkNBRuHAoT6DGnl+jFIVIhBQfTaBmEZ
mrbuCpHLdg3qDHQbaoQwniY0Vc56jDswrrOnF4GqsHoB+/pwr2sXkuXPSyJO
QQZBzNv7HPgiMb00nvILNIvolV7/FIYyIrO0ZoirNSoLrEhO3Ep0x7+tGza0
oXEPXeTyuvslKndhN1aLJ9LPK0Wg+eGnVGUmuzCkQqYka1lut0ujyIY/ictD
TtmH66uW2+DZquIXv1PNm29BCHU4+yzLoZPYgtTNIM6iehLROWVjwTTHbRWX
PYx4wEAREn+OXnEUXMhzgZFyl8uV5FHIHYqdFtTmouRax8KhpUSZYkFVd84t
jyoEa1LZmg1bxNvmGgsus3SVzekzx0I0O9dEVHB9iTxDlWNXhcTPJEx5xnnt
vdPHoqPjKGup9ZyVn3GYm1FC6CIQgAxx2dvzwX7nSQYSioKwO0z4IP1xZ8lv
zOUFD8fdUyvFQRU1rio7pWOAD+4PjIVN+9GUjLI1W22b+NoIMhODBCvJiSwF
UyGibHD+Tfpxgu7lR0aJTC/4XhAEswbZmlHsaixfIgBzRQLf3AO2I5DcB5mP
IrBkhWmSG1XKgyLfz6NZ6tZkFZaowbnFKHTPmqwJliI7uoRDgWSvq7u8GYot
l7TOXCZnqXZBOHpw6rIywHjqBoNrkMy2CfBGFBrFhcriJhYEatEbHDiwfu3A
og2iYyhwXAs0uSzilB5zMlnGxHGgI8J99B+LPcNtunhvLkcZsDxtK0Aeltz6
BTmIWW033VkV6kFI4nl6/u5lDx0/a8aFCjtRnU4p8JSL2b4n3jmerdEmd8wy
FnVGX2+lLESkeGjCqZXL/MLwgqT3DY2v5WRfSxKE+ib5AiJoR9XU9Mxsgg+d
TtEBHHP8J5DlI2ZkzgtMs9+i55c40r06ESgyyqHw3EuFS0vjyrJ2qHOr6Cex
8g77xjNU3jEovi48eGBEJoNiTRgOppHbEBdKNb1DdL7mN2AlOGv0VqEkFgDt
wtbrrvTI6GrKUcRUjBzBiZMFjNVYmz8m6WEXB3JMsvm86UTW37nyGfz7gYPl
hPKvl8SBU8Gj/B3qMkwPtsSGg44BoaPmHyRDbUjK5iQNiqxPc4bskgg2y8uC
As2IXz7bOD2UIsmJK4dVucxR1RCRCCNMO7jYFqIah+kJ0TO2e6j0c2A4ChxO
jUTwgxH9KJbGc5Lbag5rrg9Ag4PriOa2IERFNY6sraCER6y2sVtN4vNOQnUw
iN/lO+1H/g24WEmWPmyODpwR1awsbun4MEUtccWuAxAntuN0vxy5tOcgz9ua
ckYV31yMxN32OiwH2vKA2sLbL2E0OYMJE9uZA0svaRNU9Yv9tt02zHP2soTg
beVBTWm3/xN7O/O6psfKZDkkRHsNq9U6zsCwehht5kbLMF9aLTY4aux1BMDu
UK1IqQ4aC9Q2Nki2kJgP+Y7MHajWMbLGyqPeAIBLW2t5bD2lpw9OXGq6b9FZ
ie98wZfgIGjsX5/UZqfyyVc/AYeqBYq6V7w1fHbYQt9rdqTqjQdfc3oXL43s
uXjLNe7ABEbw/Y4BpEn4r1+kr5lduN+CI+4fxR2+MPN4erifqxy5Fmk8L9jB
YP/255WO64tQKuBXuizlRXp1ef09Z6AMMhU08enTm01eXl3QV7Rb2/OKkXdG
6c8/Rwv0889J8j/KabP5pksBBpMfJgBT+31ZoDj6Kr2kFW1RxmOAJOJB+E28
EC/Yn/IfN/FfPcM3l6/2TfHq8vJSfU301p7JqfcjXtKH/ydnlu6bWqwhD8/R
27X/GFfasm8ll8KBrbFsba79IXJ4l09MkUf7KKKR4P9+1KD/+yJB8vTbqmr3
rPgQdDDsG4xYItaBPbMWd1Y86cf7Jk0jWOVZ+R++uS9gkbmG2ecXZqy2ITaG
4iOSkFkMJRFjaMLOSxdP+Mn/qVXeN+GX6ifcz7OWuatMuPIv9yboHY7xDJ/u
m+E62/yHz06RuL+8kr5ghvlFLXFvaJ6kJv7s/KXxVJ/9Z07VV3G3PMf9S2qy
UID6EhSCPUTMmqEiq7XxaPAUm8c3osODvffzvy8dWMq9gQ39zOQuU78l4oYU
Hc0O914bLxUijwyVEUjAnu06blzUScCDWfQ7F8XKa+ANBR7TsIIOi+l0Q3xA
d9V9KcnosA616h9MWislM+rZb1SctV4VYUhAwjCeMZwypLDTjWhAWvOckTdg
l9eSLKb1S+kMK+13djNJ00szst5zT4lV3WZlnrP19U6L4eYac0p/3RjmEc80
2ZYMVSRAUggTpNEw4oa6glFaZy+BWczZR+Qz+bbwxTR5V/ZJwMWWd5a033GV
JoruD2yAxkGzi9mcsUrUhQxXCsPDlktv8VUrRWKeGQaK9MGdDjHNFz6HpTko
F8S+Hfk28ftBC1HTKdwCjFtMJbJITUFHTmiDWJK7ouKa7U2yJK2mhirCAr5S
k8Tk7UoL7l1ZRbpeQyAiTyVRg2UI8jbTjUwLOt8ySCHKVk65lIaDUWedyPp0
VoFcbFhSwguEEnBfc75kVthTaeUspqigncmotLGGz2fWCHr3jcB+1h7QGoF+
pBHkgQs5OGmkQooxyZZps20Tbv5r0fzQ/wtLjtfVkdJFjSs9zyg260J2vltO
nl/sJ08CWyd3oTXprYr4bS14oUzO9caX2jBHn76QMITGDPXUSYHNtaJZXJXK
PWg85HlVokzMNCs/8MnHDqtpejVWXAx4jdYlMFVqxhvHrGJCdgcU4I9XYO6P
qkbCh/ax7Xjjtgw+xpY+K6nmvp8Kem54CHeTDulDbtEocw5ex8Ex02YD8ydt
PbqIMVq4JxzcRjCmuMu0X+JLX0ikEwn7gNFfVWzxMvCjXuUetbrI+NFamfSx
SjDYgUHGs5vuUO8QZmYOwqoW+bzzCo6rGlbYU2796Np5tLfAFde4E5oqY9Ty
aP7seLAZ5zLmFptkA3R6YUqwF0b7Qso1Ol+m7oiRhzqpXPmoRG8ea8z57dyJ
uivyeztR0aTNYUW9MvUS3kUYBrwz2GVyzperaopF2To9OpvVVdNEJmq9e0yy
3X//2BW37w76vi/58lhgp1Zo1SBmiCjZMORrUEMOTKkoxZsCIBIHzM4MtnvV
r7J7ZzNS3t6kwvwNC4dWtGyMV4W3tA/IMOasKwFztGDdNOaZwe+/MBjBmnLt
E4GJ0UhZU6foxA6DvBelkEZ74gu4Ph3XEC5FdcBuboGxLUzVc+aFQFsbKRBJ
ovY1xtSIxs60QREsp9/3toJp7zNZ+ZtQoY/3hRd/AkSRZx4CxMMl2kMOg13E
1v3NRjgLHHjiSA4D63jDjPjMssGNdvqKmVqEqJY4sbEaWLvIVCqngVG+3wYx
8kny1uPee6D87vWqBTGPPbC9CZIMQJx0XhdujTcYxcQX0rZAurgpyC40rwS8
jG7kloP0mpEyvzB6Tf26wqRRzQCxi9ZV4iYQ5KOoJ0+mbG/6qarhW9pMpJwf
Iy1I34tt0DdvR+3bYAwYR2q6MjceiU9yKUsxNVkOdk4jbgtVrkgutpAIlOYa
oj6Jm822aFFG2pedo1erWp1hbv32zSfRcQbzKRqN5hKPsHg6hX10G8jKhJFc
2KB92Fhx4EeCarOo6jSOPjvQdw+ORmbq6fKn3ijdbWD9OJi0VgIzlI50ROA5
ZBoZOvJIlpTT6Ii7lDMPgT5AzKRQzzVgbIDoBVtWQycGhS+txv2h+AOZ6Eci
yATbArk4M6lnLwpnZ4J8rl5Zl8k7hGJieTrv/QVEGCU9qvGO32RN46RMlCmo
BW8PftB1Pi8y59/SOqXR/APA7MMDbt0wIA5cVeigiNZN97LRepf6Ji0Ct0u7
E2UkatqTM6lQzg5A3m4s9iYcIcFDZcFnS6eKRa8aVVjTK0U1z+DLdeUYo7gV
xnNaE10ZsA+F4iocoqF9pRSUXgB66KvdJOykzqRwOVFsd0TdvyL6VC40UT6z
c8vT5k/63GVecMIO+9Gd1ie7yhZSsHEKMX+6ingViXvznN1dKpjt+ciH/8o5
NyTnGzciu8ESLrCEwLEv3kOj9P9r7Wqb27aR8Hf8Co5vbmL3JEeSJdfOfXIT
dyadvHjspv2WG0qiYzYSqYpUErfufz/ssy8AKNlu7qJJMpFIAuACWCwWu8+z
lyxlCmqN40Iiq3KbFdMP8DQKHDfRyk5wKXteZEoska6HLlnMsA4jZDQXABj/
YBrCRV4fwRzhQD0cOGODwqfNrdEC+Y0QbdSETvAWbQD6CevZDvHg9NYFLwtz
9OTsNpA4hbBN1/TH0NUmorxx0i44MiLXSa8z0wLbsHAHkDdhXc4/+A1SvVxu
KnFkNRqDGSs6CWNGHf69zhoQTJCRLsd27vL8+dvXr8/fvDh/wW+Ds/qkbbII
iuB6FjUgymuBPfSHIjrJz+kwlncYgLQ3FtqmS17DS7XTlVtDqApzJAWmkY6B
ZANCjDVB0eQR8RNGxNmCAG8+4HVccnIC+0cbzkPEwijOQ+v2f/r1/CBhT3eB
+9RfvDpIozWaXrKRiAEWlYqIW+rUFwx58fR7rVsmhT+Eh6sT6dLrgJ/CO6gd
tWOkAMHEaTR8NDAiqzjy1amXLiaRsJZQ10k+LsUmghvCrjI1Tpd7QtiCK/EJ
UqKrs61heJasF2v1VvCQwYbpmPVWKalaDlaA9qYU1GgHFJQ42US034wmgbcE
E8zgLJlGNot2NNOWDMmbkjgqNSl7qWkcx9JWYZng3RE7khmttL2JZMIBWn7s
pt0q7kU7Q9j3e7+6ZeBeGt17fIOArOM5spfmBVvTZPobF7aMBvrNuKqwotKo
rNgCsHBpZghLshVqcQOmfV9QNAKf2+zvETtJ0/qZvAx37R1EmpX1fawJNF5L
wiucbPa232tXp2nrrLkIvr91O9phJFeqtnJdKI0eAwu7UjI5ht9VFd5ndjLV
Jn5IHpKj9dXVQc+FKGIvws0y9JYZkAWHnenQKCli2LeCCHhmnKnheLhGLyOI
uLteJWRXWYANm2Euj2YqbzeqXctQvGQESVMzdvWgRoYwsoIljlBuV/aGXtwX
QwlCvd1P8+JrzdKOkJ2uLcyakl6bkmw1cpjL4t1mv9/PpvnsI6g6VH/9+Q+N
7f4LOvUXShu5YgpiX1JIkPF1f+aUfIp880vth6oGpifQpLO3aqAb97alv9K4
dVqCkA04hmh6qqBiT7PwGT7L9n6ri72e3CIZm/Edg2fZzZPT8cn1ycnxYD48
ysfHR8VJ8UQfgZcqfsJv9umRwfD05HoyyMfX18ezweTkeDjTEo6PTorcCkjS
PLmAyTPiny/0Ds73FOAr3DM8poR6/1+DvgqX5aGQgbnvd1AE55f5h4b7w8no
eDIenZyOD9xfgWZAeonXhHCQ2AOIgwbFpsERTUe+28L7n0X4jQSZ/U1xyn33
C/UhqfKnK9ukUVGGr1U2lspEvwVIlOztlVVnubXZyAuRBc1Xrss15V7gOrIW
zqr5mrAHzjiZiLOA7YG96HL2Y13vZc+yqLz72kqtJKSvGN8lKvUvr1bD4yNa
O6VBZ7Eu0cM12fIIV2DUuDQvJDvPW9++TuNomdZUKJgbnEGPDAraw1uKF5TH
0+Tpmyfj0WA4OnqStPdoHdob2yfMH/eqrDZfTKpRY5MLe8++gRQd/2uzkSfE
C07Ju0Sj8kVheL/szLpY11PD5xcPz2ImPmNBfp8LInKhe7tplPBItO5amF+U
cBbA8Y9yxomjRg0cFNN0Va+0Ct1pGBEj+50sPzU6nDGnnTmQyR875WDxn2/W
RRGdMDSWADLlbM91nJd7CO9cIH8UDzcOMdj9bjyLvmMJQBkcu+KYN4c4ktBy
mA6Uepgt6NCM1ka5Tp6jtl7z9gMpZiv/Wy92fHMUJWHAl1VgpO05pDVqg4Xe
WA1vVOOtucW0IXTcKLMIx6LhzoXuApAwN5WMvx4bc6KqjT2aIO3XDMoTe8z1
eI7tnbnFfnL6YhM6Icr38iYVzjaGg3+qYeRfcTGnM//Q9UHulFmux1HWZU7O
16s5+VtsS5R7afuKSoDpUzitZM75oTbPbyVkV2/p8y2hjUCykS4F2k5z22/r
frnMP5Q4cswxFWolIqro3NKb2PmcWklF/77J5/eVTtkjMmxymNq+q5ZlQr7L
NWE5QG+bgTSFsxY04ohGnyOjHm8zHAzialHfXCukfDShZYBgPxXG1FlWn+oF
wjuqvKp9FXWrhjwZTTyce76Nn3w/EuNgDi8Z5/TUtERxMIabluu5jgOjMPOa
ARR0mQLO+nm5uG3KbS4ppvmY+ZtpIMJHJREDxGNa24F+9vJCmR5goKoyTgb0
jONpJT4GXdTS/Dlk8BF15ehdTgkTaN5ON9hffypzSSvy71599L/8sNgUbQ3S
ciOFzhSs12mgPTw+1FULSiamrdUfNDNDqwFccJddFDXNLPrcCbMBLb4XrFju
yDDS5Nunynxwh4w3dOoFodHjRvvpioZt+Ny5u370+Vd/67Pjp372d2+UK/5N
hoNsKoPuDsMw+eD61ucO077zk83Z/eHg/XB0EK7sqKU3iGv6ilriSYKKJgdW
C7U+qoXqiOv5ilq60xE1fX9AtYTdh7gjecw2xqSLcfRD6bdRXllh9aWxxH7b
pSCru7Au2cI5lUeanh4YHx1P2E/3UQHZwxK6wgA0zU1xI3+rPWdtS/FFaI6z
dd3QIPxEpzRI/42CD7LrTSU+3s7ianSRKz5fXXrFFCjtzFxILQ2zqVbAhe1n
xfs/+x/fj57uj6oDNm7CHdk9JozcUGXEPJBYHmHd0Zs++r9njPoeXQwbfG0w
dCXn6ks2ButVUWVCYqCvaUSfSnLomOSQ0Li5vaSwlS3F+GvyT7nvET7lN8Fo
Hv7Vr5yo6YXU8EYXh1pfyqWZaYzPwkw72p3cm5S/FexVEq4XKuzsjH1bbcfq
U5M5euZhaZO4Vdq2uFuGcRjMyHL3r4fMhiz0wkV4isNEROuRKr1XA2bD0Unf
l8hWrv96Ooq/jibH0ddUXT6k/x756h7SZKPsO68b3veHE3w9ka9H/HUiXyf4
6h5SVlrQ4DQpaHSaFDQ+lYLu10dWUNqiUdqiMbfIvUFEDvnnZTA8bvAT+JFY
p/BV3xb52ht5TuI3xLNrPaq+8y1bMrXPYGU4IivTlO62kI1CnhiV9hhnETVg
kaM2HCaRW27LZoyMVthfsD7iFQJ1xuVRSJNDtZT1LZdvcmHZnFIEmIlt/oDM
FMEFIljp9M3JPm7a/oxlAIShVsQk8YrkNHQsiu7bY7mhN0W0AhHoaBCvnS6a
XxIlIM9fbN1MUSkNvCJvFElCpBrn2VrOZ7322xxfpXXydfFZLfLDLkgTDk0b
YVPDvrBcynnzJ6I/8zu7RYjdyrvyc/GgM83SCn4Q8uRpd+rf+CZdCbv96PLO
Uml7CHGuhh1l0ICtAJXv73/0/w4HB37erA5cdD37mV6H3yJqqtuhP+M3oxUG
CopGvTN9+CKeDF+hBLNvpwb/P0V4zJYVCbwRi+n9aKzf8XUcvj6oCk/IEVJX
8yYYX++HaVFHSVH3K8OTbFlSjJ+Ux0UN06LCV4LiKJh13AtZ1i6iJ8Jpo2U1
+1u8HdRyRM5GA1GN442nLgdIAtwRR1kbhFFosRatzEQ08dNUje9Crh37W5qc
D+xAG7eVYykDO24pB5UrZAdZjwT56bfBYeR2vEA5W0FQUpyeT8dXUtxmNY+0
kubK006MUgIoJrvYlkttL9Zj48bmfld8rpvYEAVp65lZPM4lavNNnQk13rt3
3t6I8gAYSZl+lbCk4Ygi7aYcoMecfrObupyFlO2QmRxCzKkANn2xyecNqY0V
didq3AAYP23kcDQNhOcMZIaGAfVwLw0d7vvehrJYe7F6Za7oZsgaMKMRep6N
Sff84h2bjQHuCCuOQetQRIkFT8ztgGg08Dsges7/Z3Lo3m4BRSHSIG6bf/Hp
miMYEN3P8U28q/AVutAAOuumHGki14iCdP2LtQsam3Im3Olp2rszSeNm1rKz
TaQghngKXdXUmzXttHlpKNcCqfOLoMyPM+6xec25C4b7Q8sElb1b7i4VvHCZ
1zRop+RuYPYbQMNgj4RsgwUPLxegQWh20CIBIS7I2cLvIJ0TbmQ8n6p2uM7e
EnAwEUoEL/NfCFImUwrQBu5AHNVZNEy0hRRiKx6USIunrl/d2ghuCr8D9a0P
2ecM46YRl7Oi8n1cNxFdVxQz6ohcK3hwKBgB0d3repGZFy3G+wJsCc7/Khos
MKEQ32U9TRVTxyaIPewJPORJzGg9FgoOLaGDrRdgoyRINASAcvITIFlCBJa9
DOcGYAui2yzA6gFamdCvSOQ7qk4Hjts5YTVkubZQiHxeJvu+vLFD0KDxWH+n
LKd+foepTcAjkgcn0+FCLb0XxOO1Cy4zUK9SKlJlZt62sQgqsEY9YXhKeOcT
XnmDsyeuKuj2m2KxyqiU4jOiKgoeN4gBoqAPL2x11c8U7fNHYN1RjX0vqKZP
eLKDIaV9nOG4Br0jCINrPc7IcqGK7hbhO31+my+jogYxduJ1XhI2A2/rU3Di
OoBsmqUtyYIcQlExCqrESkSgDdRMJqaU2OH0QKgSQCq4nyUsnhC7iav5ipb2
SqHJ8ggk1F+kdQxg/5yopJqCWkbHlP8JG6ROrl1XKGXRXneF+9zLIEQ3STgZ
4MRLhcREoj4X6R94XVakFojnVU90OVjkuvyClOUzyZaMIF+A2IWQlN/aUkp6
uG0jatulH7bIjTt/97JBKAArWsvrADY2SQjHThL1iJBW6jg6EWIO0QZWXI/M
Y17iJseHYWTpGELSiG8kvVY82jic5w9GqbiSw1QwKVAqnzjEGz2rLEK6Ghs2
t9owAtpHcJC39XkNlAt6uhGaXixpf/Fd9qrmwxnIVv11TNKprb8nvcA9IuAj
vMzKq6p4EEG88RG4oQvaKbYOre8kx11/F+7GiiJBOFqVYiNjbmDJvX+0aWMX
kntfvj5/KUgQ3MmcaZmQmg/H/RjdgR4mIHxirKZVbLNii4ukbBcFU0uAQRqD
MceLPZfUibyN05lJb0f1KA0FeiIpTUeC0EFQ0fDxI9Mouh3Me/ubSnOOfTsO
LHUjsO7xYApz9RbkfJyhiTDZSoIrwo00BTU32/8BK24luH163exBpeEJHZvy
wbLN/Bm8A3irw+wtOpWlHJQF5sdlUXH+ajxmcIoc4Mb/beqAsyCMz1GQ1aaL
gtVoDE4oEVM773zJyHsdYK2t5GMm1OY5Hy5pypsITOUTZT4Xj6mswcQGlowb
4TFfFw1cxSxVSAqZekaoXW+nl1k77q3tOMz+gKcuTaQewHkywp62QOy08MxK
UGL2SESPt+B7quhHHRCMCB5WgiZePYILnvZOhoVk8XxI8KEbQYK+qQhJsK3r
+aNr2OAk0hOKuCCIpqwkmH3G7/UuX2XMZUm8GLFKIrTjpjXNcW9Vp4m+1Xm1
YQDI7Fwx50kEZxFT/CUCsRsVlpoYNB8lK5HhdiVHVy3eWV62dRUPyEuETBqg
djSiFXsWke0zDmDj8putCsJLBAD9BGjVwPODLoAqYYUnXNKVcXrJD7qRwvYC
YdScNxFdXhYGyp1OyQPn/gsADJFbzpABAA==

-->

</rfc>
