<?xml version='1.0' encoding='utf-8'?>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.4.12 -->
<!DOCTYPE rfc SYSTEM "rfc2629-xhtml.ent">
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" obsoletes="" updates="" submissionType="IETF" xml:lang="en" tocInclude="true" tocDepth="4" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.7.0 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@island-resort.com</email>
      </address>
    </author>
    <author initials="M." surname="Ballesteros" fullname="Miguel Ballesteros">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 4299</phone>
        <email>mballest@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <date year="2021" month="May" day="27"/>
    <area>Internet</area>
    <workgroup>RATS Working Group</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides a signed (attested) set of
claims that describe state and characteristics of an entity, typically
a device like a phone or an IoT device.  These claims are used by a
relying party to determine how much it wishes to trust the entity.</t>
      <t>An EAT is either a CWT or JWT with some attestation-oriented 
claims. To a large degree, all this document does is extend
CWT and JWT.</t>
    </abstract>
    <note>
      <name>Contributing</name>
      <t>TBD</t>
    </note>
  </front>
  <middle>
    <section anchor="introduction" numbered="true" toc="default">
      <name>Introduction</name>
      <t>Remote device attestation is a fundamental service that allows a remote
device such as a mobile phone, an Internet-of-Things (IoT) device, or
other endpoint to prove itself to a relying party, a server or a
service.  This allows the relying party to know some characteristics
about the device and decide whether it trusts the device.</t>
      <t>Remote attestation is a fundamental service that can underlie other
protocols and services that need to know about the trustworthiness of
the device before proceeding. One good example is biometric
authentication where the biometric matching is done on the device. The
relying party needs to know that the device is one that is known to do
biometric matching correctly.  Another example is content protection
where the relying party wants to know the device will protect the
data.  This generalizes on to corporate enterprises that might want to
know that a device is trustworthy before allowing corporate data to be
accessed by it.</t>
      <t>The notion of attestation here is large and may include, but is not
limited to the following:</t>
      <ul spacing="normal">
        <li>Proof of the make and model of the device hardware (HW)</li>
        <li>Proof of the make and model of the device processor, particularly
for security-oriented chips</li>
        <li>Measurement of the software (SW) running on the device</li>
        <li>Configuration and state of the device</li>
        <li>Environmental characteristics of the device such as its GPS location</li>
      </ul>
      <section anchor="cwt-jwt-and-uccs" numbered="true" toc="default">
        <name>CWT, JWT and UCCS</name>
        <t>For flexibility and ease of imlpementation in a wide variety of environments, EATs can be either CBOR <xref target="RFC8949" format="default"/> or JSON <xref target="ECMAScript" format="default"/> format.
This specification simultaneously describes both formats.</t>
        <t>An EAT is either a CWT as defined in <xref target="RFC8392" format="default"/>, a UCCS as defined in <xref target="UCCS.Draft" format="default"/>, or a JWT as defined in <xref target="RFC7519" format="default"/>.
This specification extends those specifications with additional claims for attestation.</t>
        <t>The identification of a protocol element as an EAT, whether CBOR or JSON format, follows the general conventions used by CWT, JWT and UCCS.
Largely this depends on the protocol carrying the EAT.
In some cases it may be by content type (e.g., MIME type).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
      </section>
      <section anchor="cddl" numbered="true" toc="default">
        <name>CDDL</name>
        <t>This specification uses CDDL, <xref target="RFC8610" format="default"/>, as the primary formalism to
define each claim.  The implementor then interprets the CDDL to come
to either the CBOR <xref target="RFC8949" format="default"/> or JSON <xref target="ECMAScript" format="default"/>
representation. In the case of JSON, Appendix E of <xref target="RFC8610" format="default"/> is
followed. Additional rules are given in <xref target="jsoninterop" format="default"/> of this
document where Appendix E is insufficient.  (Note that this is not to
define a general means to translate between CBOR and JSON, but only to
define enough such that the claims defined in this document can be
rendered unambiguously in JSON).</t>
        <t>The CWT specification was authored before CDDL was available and did not use it.
This specification includes a CDDL definition of most of what is described in <xref target="RFC8392" format="default"/>.</t>
      </section>
      <section anchor="entity-overview" numbered="true" toc="default">
        <name>Entity Overview</name>
        <t>An "entity" can be any device or device subassembly ("submodule") that
can generate its own attestation in the form of an EAT.  The
attestation should be cryptographically verifiable by the EAT
consumer. An EAT at the device-level can be composed of several
submodule EAT's.</t>
        <t>Modern devices such as a mobile phone have many different execution
environments operating with different security levels. For example, it
is common for a mobile phone to have an "apps" environment that runs
an operating system (OS) that hosts a plethora of downloadable
apps. It may also have a TEE (Trusted Execution Environment) that is
distinct, isolated, and hosts security-oriented functionality like
biometric authentication. Additionally, it may have an eSE (embedded
Secure Element) - a high security chip with defenses against HW
attacks that is used to produce attestations.  This device attestation format
allows the attested data to be tagged at a security level from which
it originates.  In general, any discrete execution environment that
has an identifiable security level can be considered an entity.</t>
      </section>
      <section anchor="use-as-evidence-and-attestation-results" numbered="true" toc="default">
        <name>Use as Evidence and Attestation Results</name>
        <t>Here, normative reference is made to <xref target="RATS-Architecture" format="default"/>, particularly the definition of Evidence, the Verifier, Attestation Results and the Relying Party.
Per Figure 1 in <xref target="RATS-Architecture" format="default"/>, Evidence is a protocol message that goes from the Attester to the Verifier and Attestation Results a message that goes from the Verifier to the Relying Party.
EAT is defined such that it can be used to represent either Evidence, Attestation Results or both.
No claims defined here are considered exclusive to or are prohibited in either use.
It is useful to create EAT profiles as described in <xref target="profiles" format="default"/> for either use.</t>
        <t>It is useful to characterize the relationship of claims in Evidence to those in Attestation Results.</t>
        <t>Many claims in Evidence simply will pass through the Verifier to the Relying Party without modification.
They will be verified as authentic from the device by the Verifier just through normal verification of the Attester's signature.
They will be protected from modification when they are conveyed to the Relying Party by whatever means is used to protect Attestation Results. 
(The details of that protection are out of scope of this document.)</t>
        <t>Some claims in Evidence will be verified by the Verifier by comparison to Reference Values.
In this case the claims in Evidence will not likely be conveyed to the Relying Party.
Instead, some claim indicating they were checked may be added to the Attestation Results or it may be tacitly known that the Verifier always does this check.</t>
        <t>In some cases the Verifier may provide privacy-preserving functionality by stripping or modifying claims that do not posses sufficient privacy-preserving characteristics.</t>
      </section>
      <section anchor="eat-operating-models" numbered="true" toc="default">
        <name>EAT Operating Models</name>
        <t>TODO: Rewrite (or eliminate) this section in light of the RATS architecture draft.</t>
        <t>At least the following three participants exist in all EAT operating
models. Some operating models have additional participants.</t>
        <dl>
          <dt>
The Entity.  </dt>
          <dd>
            <t>This is the phone, the IoT device, the sensor, the sub-assembly or
such that the attestation provides information about.</t>
          </dd>
          <dt>
The Manufacturer.  </dt>
          <dd>
            <t>The company that made the entity.  This may be a chip vendor, a
circuit board module vendor or a vendor of finished consumer products.</t>
          </dd>
          <dt>
The Relying Party.  </dt>
          <dd>
            <t>The server, service or company that makes use of the information in
the EAT about the entity.</t>
          </dd>
        </dl>
        <t>In all operating models, the manufacturer provisions some secret
attestation key material (AKM) into the entity during manufacturing.
This might be during the manufacturer of a chip at a fabrication
facility (fab) or during final assembly of a consumer product or any
time in between. This attestation key material is used for signing
EATs.</t>
        <t>In all operating models, hardware and/or software on the entity create
an EAT of the format described in this document. The EAT is always
signed by the attestation key material provisioned by the
manufacturer.</t>
        <t>In all operating models, the relying party must end up knowing that
the signature on the EAT is valid and consistent with data from claims
in the EAT.  This can happen in many different ways. Here are some
examples.</t>
        <ul spacing="normal">
          <li>The EAT is transmitted to the relying party. The relying party gets
corresponding key material (e.g. a root certificate) from the
manufacturer. The relying party performs the verification.</li>
          <li>The EAT is transmitted to the relying party. The relying party
transmits the EAT to a verification service offered by the
manufacturer. The server returns the validated claims.</li>
          <li>The EAT is transmitted directly to a verification service, perhaps
operated by the manufacturer or perhaps by another party. It
verifies the EAT and makes the validated claims available to the
relying party. It may even modify the claims in some way and re-sign
the EAT (with a different signing key).</li>
        </ul>
        <t>All these operating models are supported and there is no preference
of one over the other. It is important to support this variety of
operating models to generally facilitate deployment and to allow for
some special scenarios. One special scenario has a validation service
that is monetized, most likely by the manufacturer.  In another, a
privacy proxy service processes the EAT before it is transmitted to
the relying party. In yet another, symmetric key material is used for
signing. In this case the manufacturer should perform the
verification, because any release of the key material would enable a
participant other than the entity to create valid signed EATs.</t>
      </section>
      <section anchor="what-is-not-standardized" numbered="true" toc="default">
        <name>What is Not Standardized</name>
        <t>The following is not standardized for EAT, just the same they are not
standardized for CWT or JWT.</t>
        <section anchor="transmission-protocol" numbered="true" toc="default">
          <name>Transmission Protocol</name>
          <t>EATs may be transmitted by any protocol the same as CWTs and JWTs. For
example, they might be added in extension fields of other protocols,
bundled into an HTTP header, or just transmitted as files. This
flexibility is intentional to allow broader adoption. This flexibility
is possible because EAT's are self-secured with signing (and possibly
additionally with encryption and anti-replay). The transmission
protocol is not required to fulfill any additional security
requirements.</t>
          <t>For certain devices, a direct connection may not exist between the
EAT-producing device and the Relying Party. In such cases, the EAT
should be protected against malicious access. The use of COSE and JOSE
allows for signing and encryption of the EAT. Therefore, even if the
EAT is conveyed through intermediaries between the device and Relying
Party, such intermediaries cannot easily modify the EAT payload or
alter the signature.</t>
        </section>
        <section anchor="signing-scheme" numbered="true" toc="default">
          <name>Signing Scheme</name>
          <t>The term "signing scheme" is used to refer to the system that includes
end-end process of establishing signing attestation key material in
the entity, signing the EAT, and verifying it. This might involve key
IDs and X.509 certificate chains or something similar but
different. The term "signing algorithm" refers just to the algorithm
ID in the COSE signing structure. No particular signing algorithm or
signing scheme is required by this standard.</t>
          <t>There are three main implementation issues driving this. First, secure
non-volatile storage space in the entity for the attestation key
material may be highly limited, perhaps to only a few hundred bits, on
some small IoT chips. Second, the factory cost of provisioning key
material in each chip or device may be high, with even millisecond
delays adding to the cost of a chip. Third, privacy-preserving signing
schemes like ECDAA (Elliptic Curve Direct Anonymous Attestation) are
complex and not suitable for all use cases.</t>
          <t>Over time to faciliate interoperability, some signing schemes may be
defined in EAT profiles or other documents either in the IETF or outside.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology" numbered="true" toc="default">
      <name>Terminology</name>
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in
BCP 14 <xref target="RFC2119" format="default"/> <xref target="RFC8174" format="default"/> when, and only when, they appear in all
capitals, as shown here.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519" format="default"/>, COSE
<xref target="RFC8152" format="default"/>, and CWT <xref target="RFC8392" format="default"/>.</t>
      <dl>
        <dt>
Claim Name.  </dt>
        <dd>
          <t>The human-readable name used to identify a claim.</t>
        </dd>
        <dt>
Claim Key.  </dt>
        <dd>
          <t>The CBOR map key or JSON name used to identify a claim.</t>
        </dd>
        <dt>
Claim Value.  </dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>
CWT Claims Set.  </dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
        <dt>
Attestation Key Material (AKM).  </dt>
        <dd>
          <t>The key material used to sign the EAT token. If it is done
symmetrically with HMAC, then this is a simple symmetric key.
If it is done with ECC, such as an IEEE DevID <xref target="IDevID" format="default"/>, then this
is the private part of the EC key pair. If ECDAA 
is used, (e.g., as used by Enhanced Privacy ID, i.e. EPID) then it is the key material 
needed for ECDAA.</t>
        </dd>
      </dl>
    </section>
    <section anchor="the-claims" numbered="true" toc="default">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation. It also
mentions several claims defined by CWT and JWT that are particularly
important for EAT.</t>
      <t>Note also:
* Any claim defined for CWT or JWT may be used in an EAT including 
  those in the CWT <xref target="IANA.CWT.Claims" format="default"/> and JWT IANA <xref target="IANA.JWT.Claims" format="default"/>
  claims registries.</t>
      <ul spacing="normal">
        <li>All claims are optional</li>
        <li>No claims are mandatory</li>
        <li>All claims that are not understood by implementations MUST be ignored</li>
      </ul>
      <t>There are no default values or meanings assigned to absent claims
other than they are not reported. The reason for a claim's absence may
be the implementation not supporting the claim, an inability to
determine its value, or a preference to report in a different way such
as a proprietary claim.</t>
      <t>CDDL along with text descriptions is used to define each claim
indepdent of encoding.  Each claim is defined as a CDDL group (the
group is a general aggregation and type definition feature of
CDDL). In the encoding section <xref target="encoding" format="default"/>, the CDDL groups turn into
CBOR map entries and JSON name/value pairs.</t>
      <t>Map labels are assigned both an integer and string value.
CBOR encoded tokens MUST use only integer labels.
JSON encoded tokens MUST use only string labels.</t>
      <t>TODO: add paragraph here about use for Attestation Evidence and for Results.</t>
      <section anchor="token-id-claim-cti-and-jti" numbered="true" toc="default">
        <name>Token ID Claim (cti and jti)</name>
        <t>CWT defines the "cti" claim. JWT defines the "jti" claim. These are
equivalent to each other in EAT and carry a unique token identifier as
they do in JWT and CWT.  They may be used to defend against re use of
the token but are distinct from the nonce that is used by the relying
party to guarantee freshness and defend against replay.</t>
      </section>
      <section anchor="timestamp-claim-iat" numbered="true" toc="default">
        <name>Timestamp claim (iat)</name>
        <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
        <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even 
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
        <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. No token may contain an iat claim in
float-point format. Any recipient of a token with a floating-point
format iat claim may consider it an error.  A 64-bit integer 
representation of epoch time can represent a range of +/- 500 billion
years, so the only point of a floating-point timestamp is to 
have precession greater than one second. This is not needed for EAT.</t>
      </section>
      <section anchor="nonce-claim-nonce" numbered="true" toc="default">
        <name>Nonce Claim (nonce)</name>
        <t>All EATs should have a nonce to prevent replay attacks. The nonce is
generated by the relying party, the end consumer of the token. It is
conveyed to the entity over whatever transport is in use before the
token is generated and then included in the token as the nonce claim.</t>
        <t>This documents the nonce claim for registration in the IANA CWT 
claims registry. This is equivalent to the JWT nonce claim that is
already registered.</t>
        <t>The nonce must be at least 8 bytes (64 bits) as fewer are unlikely
to be secure. A maximum of 64 bytes is set to limit the memory
a constrained implementation uses. This size range is not set
for the already-registered JWT nonce, but it should follow
this size recommendation when used in an EAT.</t>
        <t>Multiple nonces are allowed to accommodate multistage verification
and consumption.</t>
        <section anchor="nonce-cddl" numbered="true" toc="default">
          <name>nonce CDDL</name>
          <sourcecode type="CDDL">
nonce-type = bstr .size (8..64)

nonce-claim = (
    nonce =&gt; nonce-type / [ 2* nonce-type ]
)
</sourcecode>
        </section>
      </section>
      <section anchor="universal-entity-id-claim-ueid" numbered="true" toc="default">
        <name>Universal Entity ID Claim (ueid)</name>
        <t>UEID's identify individual manufactured entities / devices such as a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire device or a submodule or
subsystem. It does not identify types, models or classes of
devices. It is akin to a serial number, though it does not have to be
sequential.</t>
        <t>UEID's must be universally and globally unique across manufacturers
and countries. UEIDs must also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then relying parties receiving them will have
to track other characteristics of the device to keep devices distinct
between manufacturers).</t>
        <t>There are privacy considerations for UEID's. See <xref target="ueidprivacyconsiderations" format="default"/>.</t>
        <t>The UEID should be permanent. It should never change for a given
device / entity. In addition, it should not be reprogrammable.  UEID's
are variable length. All implementations MUST be able to receive
UEID's that are 33 bytes long (1 type byte and 256 bits).  The
recommended maximum sent is also 33 bytes.</t>
        <t>When the entity constructs the UEID, the first byte is a type and the
following bytes the ID for that type. Several types are allowed to
accommodate different industries and different manufacturing processes
and to give options to avoid paying fees for certain types of
manufacturer registrations.</t>
        <t>Creation of new types requires a Standards Action <xref target="RFC8126" format="default"/>.</t>
        <table anchor="ueid-types-table" align="center">
          <name>UEID Composition Types</name>
          <thead>
            <tr>
              <th align="left">Type Byte</th>
              <th align="left">Type Name</th>
              <th align="left">Specification</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">0x01</td>
              <td align="left">RAND</td>
              <td align="left">This is a 128, 192 or 256 bit random number generated once and stored in the device. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the device and stored. It may not be smaller than 128 bits.</td>
            </tr>
            <tr>
              <td align="left">0x02</td>
              <td align="left">IEEE EUI</td>
              <td align="left">This makes use of the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-device identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while devices with multiple network interfaces may have multiple MAC addresses, there is only one UEID for a device) <xref target="IEEE.802-2001" format="default"/>, <xref target="OUI.Guide" format="default"/></td>
            </tr>
            <tr>
              <td align="left">0x03</td>
              <td align="left">IMEI</td>
              <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which SHALL be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded SHALL NOT include Luhn checksum or SVN information. <xref target="ThreeGPP.IMEI" format="default"/></td>
            </tr>
          </tbody>
        </table>
        <t>UEID's are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
        <t>The consumer (the relying party) of a UEID MUST treat a UEID as a
completely opaque string of bytes and not make any use of its internal
structure. For example, they should not use the OUI part of a type
0x02 UEID to identify the manufacturer of the device. Instead they
should use the oemid claim that is defined elsewhere. The reasons for
this are:</t>
        <ul spacing="normal">
          <li>UEIDs types may vary freely from one manufacturer to the next.</li>
          <li>New types of UEIDs may be created. For example, a type 0x07 UEID may
be created based on some other manufacturer registration scheme.</li>
          <li>Device manufacturers are allowed to change from one type of UEID to
another anytime they want. For example, they may find they can
optimize their manufacturing by switching from type 0x01 to type
0x02 or vice versa.  The main requirement on the manufacturer is
that UEIDs be universally unique.</li>
        </ul>
        <section anchor="ueid-cddl" numbered="true" toc="default">
          <name>ueid CDDL</name>
          <sourcecode type="CDDL">
ueid-type = bstr .size (7..33)

ueid-claim = (
     ueid =&gt; ueid-type
)
</sourcecode>
        </section>
      </section>
      <section anchor="origination-claim-origination" numbered="true" toc="default">
        <name>Origination Claim (origination)</name>
        <t>TODO: this claim is likely to be dropped in favor of Endorsement identifier and locators.</t>
        <t>This claim describes the parts of the device or entity that are
creating the EAT. Often it will be tied back to the device or chip
manufacturer. The following table gives some examples:</t>
        <table align="center">
          <thead>
            <tr>
              <th align="left">Name</th>
              <th align="left">Description</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">Acme-TEE</td>
              <td align="left">The EATs are generated in the TEE authored and configured by "Acme"</td>
            </tr>
            <tr>
              <td align="left">Acme-TPM</td>
              <td align="left">The EATs are generated in a TPM manufactured by "Acme"</td>
            </tr>
            <tr>
              <td align="left">Acme-Linux-Kernel</td>
              <td align="left">The EATs are generated in a Linux kernel configured and shipped by "Acme"</td>
            </tr>
            <tr>
              <td align="left">Acme-TA</td>
              <td align="left">The EATs are generated in a Trusted Application (TA) authored by "Acme"</td>
            </tr>
          </tbody>
        </table>
        <t>TODO: consider a more structure approach where the name and the URI
and other are in separate fields.</t>
        <t>TODO: This needs refinement. It is somewhat parallel to issuer claim
in CWT in that it describes the authority that created the token.</t>
        <section anchor="origination-cddl" numbered="true" toc="default">
          <name>origination CDDL</name>
          <sourcecode type="CDDL">
origination-claim = (
    origination =&gt; string-or-uri
)
</sourcecode>
        </section>
      </section>
      <section anchor="oemid" numbered="true" toc="default">
        <name>OEM Identification by IEEE (oemid)</name>
        <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE.RA" format="default"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide" format="default"/> and provides a lookup
services <xref target="OUI.Lookup" format="default"/></t>
        <t>Companies that have more than one of these IDs or MAC address blocks
should pick one and prefer that for all their devices.</t>
        <t>Commonly, these are expressed in Hexadecimal Representation
<xref target="IEEE.802-2001" format="default"/> also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48. For JSON encoded
tokens, this is further base64url encoded.</t>
        <section anchor="oemid-cddl" numbered="true" toc="default">
          <name>oemid CDDL</name>
          <sourcecode type="CDDL">
oemid-claim = (
    oemid =&gt; bstr
)
</sourcecode>
        </section>
      </section>
      <section anchor="hardware-version-claims-hardware-version-claims" numbered="true" toc="default">
        <name>Hardware Version Claims (hardware-version-claims)</name>
        <t>The hardware version can be claimed at three different levels, the chip, the circuit board and the final device assembly.
An EAT can include any combination these claims.</t>
        <t>The hardware version is a simple text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID" format="default"/>.</t>
        <t>The hardware version can also be given by a 13-digit European Article Number <xref target="EAN-13" format="default"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.
This claim is the ASCII text representation of actual digits often printed with a bar code.
Use of this claim must comply with the EAN allocation and assignment rules.
For example, this requires the manufacturer to obtain a manufacture code from GS1.</t>
        <t>Both the simple version string and EAN-13 versions may be included for the same hardware.</t>
        <sourcecode type="CDDL">
chip-version-claim = (
    chip-version =&gt; tstr
)

chip-version-scheme-claim = (
    chip-version-scheme =&gt; $version-scheme
)

board-version-claim = (
    board-version =&gt; tstr
)

board-version-scheme-claim = (
    board-version-scheme =&gt; $version-scheme
)

device-version-claim = (
    device-version =&gt; tstr
)

device-version-scheme-claim = (
    device-version-scheme =&gt; $version-scheme
)


ean-type = text .regexp "[0-9]{13}"

ean-chip-version-claim = (
    ean-chip-version =&gt; ean-type
)

ean-board-version-claim = (
    ean-board-version =&gt; ean-type
)

ean-device-version-claim = (
    ean-device-version =&gt; ean-type
)

hardware-version-claims = (
    ? chip-version-claim,
    ? board-version-claim,
    ? device-version-claim,
    ? chip-version-scheme-claim,
    ? board-version-scheme-claim,
    ? device-version-scheme-claim,
    ? ean-chip-version-claim,
    ? ean-board-version-claim,
    ? ean-device-version-claim,
)

</sourcecode>
      </section>
      <section anchor="software-description-and-version" numbered="true" toc="default">
        <name>Software Description and Version</name>
        <t>TODO: Add claims that reference CoSWID.</t>
      </section>
      <section anchor="the-security-level-claim-security-level" numbered="true" toc="default">
        <name>The Security Level Claim (security-level)</name>
        <t>This claim characterizes the device/entity 
ability to defend against attacks aimed at capturing the signing
key, forging claims and at forging EATs. This is done by
defining four security levels as described below. This is similar
to the key protection types defined by the Fast Identity Online (FIDO) Alliance <xref target="FIDO.Registry" format="default"/>.</t>
        <t>These claims describe security environment and countermeasures
available on the end-entity / client device where the attestation key
reside and the claims originate.</t>
        <dl>
          <dt>
1 -- Unrestricted  </dt>
          <dd>
            <t>There is some expectation that implementor will
protect the attestation signing keys at this level. Otherwise
the EAT provides no meaningful security assurances.</t>
          </dd>
          <dt>
2-- Restricted  </dt>
          <dd>
            <t>Entities at this level should not be general-purpose
operating environments that host features such as app download
systems, web browsers and complex productivity applications.
It is akin to the Secure Restricted level (see below) without the
security orientation. Examples include a Wi-Fi subsystem,
an IoT camera, or sensor device.</t>
          </dd>
          <dt>
3 -- Secure Restricted  </dt>
          <dd>
            <t>Entities at this level must meet the criteria defined by FIDO Allowed
Restricted Operating Environments <xref target="FIDO.AROE" format="default"/>. Examples include TEE's and 
schemes using virtualization-based security. Like the FIDO security goal,
security at this level is aimed at defending well against large-scale
network / remote attacks against the device.</t>
          </dd>
          <dt>
4 -- Hardware  </dt>
          <dd>
            <t>Entities at this level must include substantial defense 
against physical or electrical attacks against the device itself.
It is assumed any potential attacker has captured the device and can 
disassemble it. Example include TPMs and Secure Elements.</t>
          </dd>
        </dl>
        <t>The entity should claim the highest security level it achieves and no higher.
This set is not extensible so as to provide a common interoperable description of security level to the relying party.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of security and its own proprietary claim as a refined indication.</t>
        <t>This claim is not intended as a replacement for a proper end-device
security certification schemes such as those based on FIPS 140 <xref target="FIPS-140" format="default"/> 
or those based on Common Criteria <xref target="Common.Criteria" format="default"/>. The 
claim made here is solely a self-claim made by the Entity Originator.</t>
        <section anchor="security-level-cddl" numbered="true" toc="default">
          <name>security-level CDDL</name>
          <sourcecode type="CDDL">
security-level-cbor-type = &amp;(
    unrestricted: 1,
    restricted: 2,
    secure-restricted: 3,
    hardware: 4
)

security-level-json-type = 
    "unrestricted" /
    "restricted" /
    "secure-restricted" /
    "hardware"

security-level-claim = (
    security-level =&gt; security-level-cbor-type / security-level-json-type
)
</sourcecode>
        </section>
      </section>
      <section anchor="secure-boot-claim-secure-boot" numbered="true" toc="default">
        <name>Secure Boot Claim (secure-boot)</name>
        <t>The value of true indicates secure boot is enabled. Secure boot is
considered enabled when base software, the firmware and operating
system, are under control of the entity manufacturer identified in the
oemid claimd described in <xref target="oemid" format="default"/>. This may because the software is
in ROM or because it is cryptographically authenticated or some
combination of the two or other.</t>
        <section anchor="secure-boot-cddl" numbered="true" toc="default">
          <name>secure-boot CDDL</name>
          <sourcecode type="CDDL">
secure-boot-claim = (
    secure-boot =&gt; bool
)
</sourcecode>
        </section>
      </section>
      <section anchor="debug-status-claim-debug-status" numbered="true" toc="default">
        <name>Debug Status Claim (debug-status)</name>
        <t>This applies to system-wide or submodule-wide debug facilities of the
target device / submodule like JTAG and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
        <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-device
public keys.</t>
        <t>As with all claims, the absence of the debug level claim means
it is not reported. A conservative interpretation might assume
the Not Disabled state. It could however be that it is reported
in a proprietary claim.</t>
        <t>This claim is not extensible so as to provide a common interoperable description of debug status to the relying party.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
        <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
        <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The verifier or relying party receiving an EAT cannot
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
        <t>An individual target device / submodule may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
        <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the relying party can know the debug status
of the submodules since there is no inheritance.</t>
        <section anchor="enabled" numbered="true" toc="default">
          <name>Enabled</name>
          <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
        </section>
        <section anchor="disabled" numbered="true" toc="default">
          <name>Disabled</name>
          <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future, and it may also be
possible that they were enabled in the past after the
target device/sub-system booted/started, but they are currently disabled.</t>
        </section>
        <section anchor="disabled-since-boot" numbered="true" toc="default">
          <name>Disabled Since Boot</name>
          <t>This level indicates all debug facilities are currently disabled and
have been so since the target device/sub-system booted/started.</t>
        </section>
        <section anchor="disabled-permanently" numbered="true" toc="default">
          <name>Disabled Permanently</name>
          <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer cannot enable them. Only
the manufacturer indicated in the OEMID claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
        </section>
        <section anchor="disabled-fully-and-permanently" numbered="true" toc="default">
          <name>Disabled Fully and Permanently</name>
          <t>This level indicates that all debug capabilities for the target
device/sub-module are permanently disabled.</t>
        </section>
        <section anchor="debug-status-cddl" numbered="true" toc="default">
          <name>debug-status CDDL</name>
          <sourcecode type="CDDL">
debug-status-cbor-type = &amp;(
    enabled: 0,
    disabled: 1,
    disabled-since-boot: 2,
    disabled-permanently: 3,
    disabled-fully-and-permanently: 4
)

debug-status-json-type = 
    "enabled" /
    "disabled" /
    "disabled-since-boot" /
    "disabled-permanently" /
    "disabled-fully-and-permanently"

debug-status-claim = (
    debug-status =&gt; debug-status-cbor-type / debug-status-json-type
)
</sourcecode>
        </section>
      </section>
      <section anchor="including-keys" numbered="true" toc="default">
        <name>Including Keys</name>
        <t>An EAT may include a cryptographic key such as a public key.
The signing of the EAT binds the key to all the other claims in the token.</t>
        <t>The purpose for inclusion of the key may vary by use case.
For example, the key may be included as part of an IoT device onboarding protocol.
When the FIDO protocol includes a pubic key in its attestation message, the key represents the binding of a user, device and relying party.
This document describes how claims containing keys should be defined for the various use cases.
It does not define specific claims for specific use cases.</t>
        <t>Keys in CBOR format tokens SHOULD be the COSE_Key format <xref target="RFC8152" format="default"/> and keys in JSON format tokens SHOULD be the JSON Web Key format <xref target="RFC7517" format="default"/>.
These two formats support many common key types.
Their use avoids the need to decode other serialization formats.
These two formats can be extended to support further key types through their IANA registries.</t>
        <t>The general confirmation claim format <xref target="RFC8747" format="default"/>, <xref target="RFC7800" format="default"/> may also be used.
It provides key encryption. 
It also allows for inclusion by reference through a key ID.
The confirmation claim format may employed in the definition of some new claim for a a particular use case.</t>
        <t>When the actual confirmation claim is included in an EAT, this document associates no use case semantics other than proof of posession.
Different EAT use cases may choose to associate further semantics.
The key in the confirmation claim MUST be protected the same as the key used to sign the EAT. 
That is, the same, equivalent or better hardware defenses, access controls, key generation and such must be used.</t>
      </section>
      <section anchor="the-location-claim-location" numbered="true" toc="default">
        <name>The Location Claim (location)</name>
        <t>The location claim gives the location of the device entity from which the attestation originates.
It is derived from the W3C Geolocation API <xref target="W3C.GeoLoc" format="default"/>.
The latitude, longitude, altitude and accuracy must conform to <xref target="WGS84" format="default"/>.
The altitude is in meters above the <xref target="WGS84" format="default"/> ellipsoid.
The two accuracy values are positive numbers in meters.
The heading is in degrees relative to true north.
If the device is stationary, the heading is NaN (floating-point not-a-number).
The speed is the horizontal component of the device velocity in meters per second.</t>
        <t>When encoding floating-point numbers half-precision should not be used.
It usually does not provide enough precision for a geographic location.
It is not a requirement that the receiver of an EAT implement half-precision, so the receiver may not be able to decode the location.</t>
        <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.</t>
        <t>The age data item can be used when the entity doesn't know what time
it is either because it doesn't have a clock or it isn't set. The
entity must still have a "ticker" that can measure a time
interval. The age is the interval between acquisition of the location
data and token creation.</t>
        <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations" format="default"/> below.</t>
        <section anchor="location-cddl" numbered="true" toc="default">
          <name>location CDDL</name>
          <sourcecode type="CDDL">
location-type = {
    latitude =&gt; number,
    longitude =&gt; number,
    ? altitude =&gt; number,
    ? accuracy =&gt; number,
    ? altitude-accuracy =&gt; number,
    ? heading =&gt; number,
    ? speed =&gt; number,
    ? timestamp =&gt; ~time-int,
    ? age =&gt; uint
}

latitude = 1 / "latitude"
longitude = 2 / "longitude"
altitude = 3 / "altitude"
accuracy = 4 / "accuracy"
altitude-accuracy = 5 / "altitude-accuracy"
heading = 6 / "heading"
speed = 7 / "speed"
timestamp = 8 / "timestamp"
age = 9 / "age"

location-claim = (
    location-label =&gt; location-type
)
</sourcecode>
        </section>
      </section>
      <section anchor="the-uptime-claim-uptime" numbered="true" toc="default">
        <name>The Uptime Claim (uptime)</name>
        <t>The "uptime" claim contains a value that represents the number of
seconds that have elapsed since the entity or submod was last booted.</t>
        <section anchor="uptime-cddl" numbered="true" toc="default">
          <name>uptime CDDL</name>
          <sourcecode type="CDDL">
uptime-claim = (
    uptime =&gt; uint
)
</sourcecode>
        </section>
      </section>
      <section anchor="the-boot-seed-claim-boot-seed" numbered="true" toc="default">
        <name>The Boot Seed Claim (boot-seed)</name>
        <t>The Boot Seed claim is a random value created at system boot time that will allow differentiation of reports from different boot sessions.
This value is usually public and not protected.
It is not the same as a seed for a random number generator which must be kept secret.</t>
        <sourcecode type="CDDL">
boot-seed-claim = (
    boot-seed =&gt; bytes
)
</sourcecode>
      </section>
      <section anchor="the-intended-use-claim-intended-use" numbered="true" toc="default">
        <name>The Intended Use Claim (intended-use)</name>
        <t>EAT's may be used in the context of several different applications.  The intended-use
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it uses EAT.</t>
        <dl>
          <dt>
1 -- Generic  </dt>
          <dd>
            <t>Generic attestation describes an application where the EAT consumer
requres the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
          </dd>
          <dt>
2-- Registration  </dt>
          <dd>
            <t>Entities that are registering for a new service may be expected to 
provide an attestation as part of the registration process.  This intended-use
setting indicates that the attestation is not intended for any use but registration.</t>
          </dd>
          <dt>
3 -- Provisioning  </dt>
          <dd>
            <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess device security state of the entity prior to provisioning.</t>
          </dd>
          <dt>
4 -- Certificate Issuance (Certificate Signing Request)  </dt>
          <dd>
            <t>Certifying authorities (CA's) may require attestations prior to
the issuance of certificates related to keypairs hosted at the entity.  An
EAT may be used as part of the certificate signing request (CSR).</t>
          </dd>
          <dt>
5 -- Proof-of-Possession  </dt>
          <dd>
            <t>An EAT consumer may require an attestation as part of an accompanying 
proof-of-possession (PoP) appication. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has posession
of a key.  This kind of attestation may be neceesary to verify the
security state of the entity storing the private key used in a PoP application.</t>
          </dd>
        </dl>
        <section anchor="intended-use-cddl" numbered="true" toc="default">
          <name>intended-use CDDL</name>
          <sourcecode type="CDDL">
intended-use-cbor-type = &amp;(
    generic: 1,
    registration: 2,
    provisioning: 3,
    csr: 4,
    pop:  5
)

intended-use-json-type = 
    "generic" /
    "registration" /
    "provisioning" /
    "csr" /
    "pop" 

intended-use-claim = (
    intended-use =&gt; intended-use-cbor-type / intended-use-json-type
)
</sourcecode>
        </section>
      </section>
      <section anchor="profile-claim" numbered="true" toc="default">
        <name>The Profile Claim (profile)</name>
        <t>See <xref target="profiles" format="default"/> for the detailed description of a profile.</t>
        <t>A profile is identified by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the profile claim is to uniquely identify the profile even if it is a private profile.</t>
        <t>The OID is encoded in CBOR according to <xref target="CBOR-OID" format="default"/> and the URI according to <xref target="RFC8949" format="default"/>.
Both are unwrapped and thus not tags.
The OID is always absolute and never relative.
If the claims CBOR type is a text string it is a URI and if a byte string it is an OID.</t>
        <t>Note that this named "eat_profile" for JWT and is distinct from the already registered "profile" claim in the JWT claims registry.</t>
        <sourcecode type="CDDL">
oid = #6.4000(bstr) ; TODO: fill this in with correct CDDL from OID RFC

profile-claim = (
    profile =&gt; ~uri / ~oid
)
</sourcecode>
      </section>
      <section anchor="the-software-manifests-claim-manifests" numbered="true" toc="default">
        <name>The Software Manifests Claim (manifests)</name>
        <t>This claim contains descriptions of software that is present on the device.
These manifests are installed on the device when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the device, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is that they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the Verifier and/or the Relying Party.</t>
        <t>In some cases these will be signed by the software manufacturer independent of any signing for the purpose of EAT attestation.
Manifest claims should include the manufacturer's signature (which will be signed over  by the attestation signature).
In other cases the attestation signature will be the only one.</t>
        <t>This claim allows multiple formats for the manifest.
For example the manifest may be a CBOR-format CoSWID, an XML-format SWID or other.
Identification of the type of manifest is always by a CBOR tag.
In many cases, for examples CoSWID, a tag will already be registered with IANA.
If not, a tag MUST be registered.
It can be in the first-come-first-served space which has minimal requirements for registration.</t>
        <t>The claim is an array of one or more manifests.
To facilitate hand off of the manifest to a decoding library, each manifest is contained in a byte string.
This occurs for CBOR-format manifests as well as non-CBOR format manifests.</t>
        <t>If a particular manifest type uses CBOR encoding, then the item in the array for it MUST be a byte string that contains a CBOR tag.
The EAT decoder must decode the byte string and then the CBOR within it to find the tag number to identify the type of manifest.
The contents of the byte string is then handed to the particular manifest processor for that type of manifest.
CoSWID and SUIT manifest are examples of this.</t>
        <t>If a particular manifest type does not use CBOR encoding, then the item in the array for it must be a CBOR tag that contains a byte string.
The EAT decoder uses the tag to identify the processor for that type of manifest.
The contents of the tag, the byte string, are handed to the manifest processor.
Note that a byte string is used to contain the manifest whether it is a text based format or not.
An example of this is an XML format ISO/IEC 19770 SWID.</t>
        <t>It is not possible to describe the above requirements in CDDL so the type for an individual manifest is any in the CDDL below.
The above text sets the encoding requirement.</t>
        <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests may be of multiple formats.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
        <t>When the <xref target="CoSWID" format="default"/> format is used, it MUST be a payload CoSWID, not an evidence CoSWID.</t>
        <sourcecode type="CDDL">
manifests-claim = (
    manifests =&gt; manifests-type
)

manifests-type = [+ $manifest-formats]

; Must be a CoSWID payload type
$manifest-formats /= bytes .cbor concise-swid-tag

$manifest-formats /= bytes .cbor SUIT_Envelope_Tagged

</sourcecode>
      </section>
      <section anchor="the-software-evidence-claim-swevidence" numbered="true" toc="default">
        <name>The Software Evidence Claim {swevidence}</name>
        <t>This claim contains descriptions, lists, evidence or measurements of the software that exists on the device.
The defining characteristic of this claim is that its contents are created by processes on the device that inventory, measure or otherwise characterize the software on the device.
The contents of this claim do not originate from the software manufacturer.</t>
        <t>In most cases the contents of this claim are signed as part of attestation signing, but independent signing in addition to the attestation signing is not ruled out when a particular evidence format supports it.</t>
        <t>This claim uses the same mechanism for identification of the type of the swevidence as is used for the type of the manifest in the manifests claim.
It also uses the same byte string based mechanism for containing the claim and easing the hand off to a processing library.
See the discussion above in the manifests claim.</t>
        <t>When the <xref target="CoSWID" format="default"/> format is used, it MUST be evidence CoSWIDs, not payload CoSWIDS.</t>
        <sourcecode type="CDDL">
swevidence-claim = (
    swevidence =&gt; swevidence-type
)

swevidence-type = [+ $swevidence-formats]

; Must be a CoSWID evidence type
$swevidence-formats /= bytes .cbor concise-swid-tag

</sourcecode>
      </section>
      <section anchor="the-submodules-part-of-a-token-submods" numbered="true" toc="default">
        <name>The Submodules Part of a Token (submods)</name>
        <t>Some devices are complex, having many subsystems or submodules.  A
mobile phone is a good example. It may have several connectivity
submodules for communications (e.g., Wi-Fi and cellular). It may have
subsystems for low-power audio and video playback. It may have one or
more security-oriented subsystems like a TEE or a Secure Element.</t>
        <t>The claims for each these can be grouped together in a submodule.</t>
        <t>The submods part of a token are in a single map/object with many entries, one
per submodule.  There is only one submods map in a token. It is
identified by its specific label. It is a peer to other claims, but it
is not called a claim because it is a container for a claim set rather
than an individual claim. This submods part of a token allows what
might be called recursion. It allows claim sets inside of claim sets
inside of claims sets...</t>
        <section anchor="two-types-of-submodules" numbered="true" toc="default">
          <name>Two Types of Submodules</name>
          <t>Each entry in the submod map is one of two types:</t>
          <ul spacing="normal">
            <li>A non-token submodule that is a map or object directly containing claims for the submodule.</li>
            <li>A nested EAT that is a fully formed, independently signed EAT token</li>
          </ul>
          <section anchor="non-token-submodules" numbered="true" toc="default">
            <name>Non-token Submodules</name>
            <t>This is simply a map or object containing claims about the submodule.</t>
            <t>It may contain claims that are the same as its surrounding token or superior submodules. 
For example, the top-level of the token may have a UEID, a submod may have a different UEID and a further subordinate submodule may also have a UEID.</t>
            <t>It is signed/encrypted along with the rest of the token and thus the claims are secured by the same Attester with the same signing key as the rest of the token.</t>
            <t>If a token is in CBOR format (a CWT or a UCCS), all non-token submodules must be CBOR format.
If a token in in JSON format (a JWT), all non-token submodules must be in JSON format.</t>
            <t>When decoding, this type of submodule is recognized from the other type by being a data item of type map for CBOR or type object for JSON.</t>
          </section>
          <section anchor="nested-eats" numbered="true" toc="default">
            <name>Nested EATs</name>
            <t>This type of submodule is a fully formed secured EAT as defined in this document except that it MUST NOT be a UCCS or an unsecured JWT.
A nested token that is one that is always secured using COSE or JOSE, usually by an independent Attester.
When the surrounding EAT is a CWT or secured JWT, the nested token becomes securely bound with the other claims in the surrounding token.</t>
            <t>It is allowed to have a CWT as a submodule in a JWT and vice versa, but this SHOULD be avoided unless necessary.</t>
            <section anchor="surrounding-eat-is-cbor-format" numbered="true" toc="default">
              <name>Surrounding EAT is CBOR format</name>
              <t>They type of an EAT nested in a CWT is determined by whether the CBOR type is a text string or a byte string.
If a text string, then it is a JWT.
If a byte string, then it is a CWT.</t>
              <t>A CWT nested in a CBOR-format token is always wrapped by a byte string for easier handling with standard CBOR decoders and token processing APIs that will typically take a byte buffer as input.</t>
              <t>Nested CWTs may be either a CWT CBOR tag or a CWT Protocol Message.
COSE layers in nested CWT EATs MUST be a COSE_Tagged_Message, never a COSE_Untagged_Message.
If a nested EAT has more than one level of COSE, for example one that is both encrypted and signed, a COSE_Tagged_message must be used at every level.</t>
            </section>
            <section anchor="surrounding-eat-is-json-format" numbered="true" toc="default">
              <name>Surrounding EAT is JSON format</name>
              <t>When a CWT is nested in a JWT, it must be as a 55799 tag in order to distinguish it from a nested JWT.</t>
              <t>When a nested EAT in a JWT is decoded, first remove the base64url encoding.
Next, check to see if it starts with the bytes 0xd9d9f7.
If so, then it is a CWT as a JWT will never start with these four bytes. 
If not if it is a JWT.</t>
              <t>Other than the 55799 tag requirement, tag usage for CWT's nested in a JSON format token follow the same rules as for CWTs nested in CBOR-format tokens.
It may be a CWT CBOR tag or a CWT Protocol Message and COSE_Tagged_Message MUST be used at all COSE layers.</t>
            </section>
          </section>
          <section anchor="unsecured-jwts-and-uccs-tokens-as-submodules" numbered="true" toc="default">
            <name>Unsecured JWTs and UCCS Tokens as Submodules</name>
            <t>To incorporate a UCCS token as a submodule, it MUST be as a non-token submodule. 
This can be accomplished inserting the content of the UCCS Tag into the submodule map.
The content of a UCCS tag is exactly a map of claims as required for a non-token submodule.
If the UCCS is not a UCCS tag, then it can just be inserted into the submodule map directly.</t>
            <t>The definition of a nested EAT type of submodule is that it is one that is secured (signed) by an Attester.
Since UCCS tokens are unsecured, they do not fulfill this definition and must be non-token submodules.</t>
            <t>To incorporate an Unsecured JWT as a submodule, the null-security JOSE wrapping should be removed.
The resulting claims set should be inserted as a non-token submodule.</t>
            <t>To incorporate a UCCS token in a surrounding JSON token, the UCCS token claims should be translated from CBOR to JSON.
To incorporate an Unsecured JWT into a surrounding CBOR-format token, the null-security JOSE should be removed and the claims translated from JSON to CBOR.</t>
          </section>
        </section>
        <section anchor="no-inheritance" numbered="true" toc="default">
          <name>No Inheritance</name>
          <t>The subordinate modules do not inherit anything from the containing
token.  The subordinate modules must explicitly include all of their
claims. This is the case even for claims like the nonce and age.</t>
          <t>This rule is in place for simplicity. It avoids complex inheritance
rules that might vary from one type of claim to another.</t>
        </section>
        <section anchor="security-levels" numbered="true" toc="default">
          <name>Security Levels</name>
          <t>The security level of the non-token subordinate modules should always
be less than or equal to that of the containing modules in the case of non-token
submodules. It makes no sense for a module of lesser security to be
signing claims of a module of higher security. An example of this is a
TEE signing claims made by the non-TEE parts (e.g. the high-level OS)
of the device.</t>
          <t>The opposite may be true for the nested tokens. They usually have
their own more secure key material. An example of this is an embedded
secure element.</t>
        </section>
        <section anchor="submodule-names" numbered="true" toc="default">
          <name>Submodule Names</name>
          <t>The label or name for each submodule in the submods map is a text
string naming the submodule. No submodules may have the same name.</t>
        </section>
        <section anchor="submods-cddl" numbered="true" toc="default">
          <name>submods CDDL</name>
          <sourcecode type="CDDL">
; The part of a token that contains all the submodules.  It is a peer
; with the claims in the token, but not a claim, only a map/object to
; hold all the submodules.

submods-part = (
    submods =&gt; submods-type
)

submods-type = { + submod-type }


; The type of a submodule which can either be a nested claim set or a
; nested separately signed token. Nested tokens are wrapped in a bstr
; or a tstr.

submod-type = (
    submod-name =&gt; eat-claim-set / nested-token
)


; When this is a bstr, the contents are an eat-token in CWT or UCCS
; format.  When this is a tstr, the contents are an eat-token in JWT
; format.

nested-token = bstr / tstr; 


; Each submodule has a unique text string name.

submod-name = tstr 


</sourcecode>
        </section>
      </section>
    </section>
    <section anchor="keyid" numbered="true" toc="default">
      <name>Endorsements and Verification Keys</name>
      <t>TODO: fill this section in. It will discuss key IDs, endorsement ID and such that
are needed as input needed to by the Verifier to verify the signature. This will
NOT discuss the contents of an Endorsement, just and ID/locator.</t>
    </section>
    <section anchor="profiles" numbered="true" toc="default">
      <name>Profiles</name>
      <t>This EAT specification does not gaurantee that implementations of it will interoperate.
The variability in this specification is necessary to accommodate the widely varying use cases.
An EAT profile narrows the specification for a specific use case.
An ideal EAT profile will gauarantee interoperability.</t>
      <t>The profile can be named in the token using the profile claim described in <xref target="profile-claim" format="default"/>.</t>
      <section anchor="format-of-a-profile-document" numbered="true" toc="default">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>In some cases CDDL may be created that replaces CDDL in this or other document to express some profile requirements.
For example, to require the altitude data item in the location claim, CDDL can be written that replicates the location claim with the altitude no longer optional.</t>
      </section>
      <section anchor="list-of-profile-issues" numbered="true" toc="default">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, UCCS, JWS, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both" numbered="true" toc="default">
          <name>Use of JSON, CBOR or both</name>
          <t>The profile should indicate whether the token format should be CBOR, JSON, both or even some other encoding.
If some other encoding, a specification for how the CDDL described here is serialized in that encoding is necessary.</t>
          <t>This should be addressed for the top-level token and for any nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding" numbered="true" toc="default">
          <name>CBOR Map and Array Encoding</name>
          <t>The profile should indicate whether definite-length arrays/maps, indefinite-length arrays/maps or both are allowed.
A good default is to allow only definite-length arrays/maps.</t>
          <t>An alternate is to allow both definite and indefinite-length arrays/maps.
The decoder should accept either.
Encoders that need to fit on very small hardware or be actually implement in hardware can use indefinite-length encoding.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
        </section>
        <section anchor="cbor-string-encoding" numbered="true" toc="default">
          <name>CBOR String Encoding</name>
          <t>The profile should indicate whether definite-length strings, indefinite-length strings or both are allowed.
A good default is to allow only definite-length strings.
As with map and array encoding, allowing indefinite-length strings can be beneficial for some smaller implementations.</t>
        </section>
        <section anchor="cbor-preferred-serialization" numbered="true" toc="default">
          <name>CBOR Preferred Serialization</name>
          <t>The profile should indicate whether encoders must use preferred serialization.
The profile should indicate whether decoders must accept non-preferred serialization.</t>
        </section>
        <section anchor="cosejose-protection" numbered="true" toc="default">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
EAT/CWT has the option to have no protection using UCCS and JOSE has a NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, CWT and UCCS are allowed by EAT.</t>
          <t>The profile should list the protections that must be supported by all decoders implementing the profile.
The encoders them must implement a subset of what is listed for the decoders, perhaps only one.</t>
          <t>Implementations may choose to sign or MAC before encryption so that the implementation layer doing the signing or MACing can be the smallest.
It is often easier to make smaller implementations more secure, perhaps even implementing in solely in hardware.
The key material for a signature or MAC is a private key, while for encryption it is likely to be a public key.
The key for encryption requires less protection.</t>
        </section>
        <section anchor="cosejose-algorithms" numbered="true" toc="default">
          <name>COSE/JOSE Algorithms</name>
          <t>The profile document should list the COSE algorithms that a Verifier must implement.
The Attester will select one of them. 
Since there is no negotiation, the Verifier should implement all algorithms listed in the profile.</t>
        </section>
        <section anchor="verification-key-identification" numbered="true" toc="default">
          <name>Verification Key Identification</name>
          <t>Section <xref target="keyid" format="default"/> describes a number of methods for identifying a verification key.
The profile document should specify one of these or one that is not described.
The ones described in this document are only roughly described.
The profile document should go into the full detail.</t>
        </section>
        <section anchor="endorsement-identification" numbered="true" toc="default">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as Verification Key Identification, the profile may wish to specify how Endorsements are to be identified.
However note that Endorsement Identification is optional, where as key identification is not.</t>
        </section>
        <section anchor="freshness" numbered="true" toc="default">
          <name>Freshness</name>
          <t>Just about every use case will require some means of knowing the EAT is recent enough and not a replay of an old token.
The profile should describe how freshness is achieved.
The section on Freshness in <xref target="RATS-Architecture" format="default"/> describes some of the possible solutions to achieve this.</t>
        </section>
        <section anchor="required-claims" numbered="true" toc="default">
          <name>Required Claims</name>
          <t>The profile can list claims whose absence results in Verification failure.</t>
        </section>
        <section anchor="prohibited-claims" numbered="true" toc="default">
          <name>Prohibited Claims</name>
          <t>The profile can list claims whose presence results in Verification failure.</t>
        </section>
        <section anchor="additional-claims" numbered="true" toc="default">
          <name>Additional Claims</name>
          <t>The profile may describe entirely new claims.
These claims can be required or optional.</t>
        </section>
        <section anchor="refined-claim-definition" numbered="true" toc="default">
          <name>Refined Claim Definition</name>
          <t>The profile may lock down optional aspects of individual claims.
For example, it may require altitude in the location claim, or it may require that HW Versions always be described using EAN-13.</t>
        </section>
        <section anchor="cbor-tags" numbered="true" toc="default">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.
Similarly, the profile should specify whether the token should be a UCCS tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unncessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="manifests-and-software-evidence-claims" numbered="true" toc="default">
          <name>Manifests and Software Evidence Claims</name>
          <t>The profile should specify which formats are allowed for the manifests and software evidence claims.
The profile may also go on to say which parts and options of these formats are used, allowed and prohibited.</t>
        </section>
      </section>
    </section>
    <section anchor="encoding" numbered="true" toc="default">
      <name>Encoding</name>
      <t>This makes use of the types defined in CDDL Appendix D, Standard Prelude.</t>
      <t>Some of the CDDL included here is for claims that are defined in CWT <xref target="RFC8392" format="default"/> or JWT <xref target="RFC7519" format="default"/> or are in the IANA CWT or JWT registries.
CDDL was not in use when these claims where defined.</t>
      <section anchor="common-cddl-types" numbered="true" toc="default">
        <name>Common CDDL Types</name>
        <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
        <t>Note that unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949" format="default"/>.
They are just text strings that contain a URI.</t>
        <sourcecode type="CDDL">
string-or-uri = tstr 

time-int = #6.1(int)
</sourcecode>
      </section>
      <section anchor="cddl-for-cwt-defined-claims" numbered="true" toc="default">
        <name>CDDL for CWT-defined Claims</name>
        <t>This section provides CDDL for the claims defined in CWT. It is
non-normative as <xref target="RFC8392" format="default"/> is the authoritative definition of these
claims.</t>
        <t>Note that the subject, issue and audience claims may be a text string containing a URI per <xref target="RFC8392" format="default"/> and <xref target="RFC7519" format="default"/>.
These are never the URI tag defined in <xref target="RFC8949" format="default"/>.</t>
        <sourcecode type="CDDL">
$$eat-extension //= (
    ? issuer =&gt; text,
    ? subject =&gt; text,
    ? audience =&gt; text,
    ? expiration =&gt; time,
    ? not-before =&gt; time,
    ? issued-at =&gt; time,
    ? cwt-id =&gt; bytes,
)

issuer = 1
subject = 2
audience = 3
expiration = 4
not-before = 5
issued-at = 6
cwt-id = 7

</sourcecode>
      </section>
      <section anchor="json" numbered="true" toc="default">
        <name>JSON</name>
        <section anchor="json-labels" numbered="true" toc="default">
          <name>JSON Labels</name>
          <sourcecode type="JSON">
; The following are Claim Keys (labels) assigned for JSON-encoded tokens.

ueid /= "ueid"
nonce /= "nonce"
origination /= "origination"
oemid /= "oemid"
security-level /= "seclevel"
secure-boot /= "secboot"
debug-status /= "dbgstat"
location /= "location"
uptime /= "uptime"
profile /= "eat-profile"
intended-use /= "intuse"
boot-seed /= "bootseed"
submods /= "submods"
timestamp /= "timestamp"
manifests /= "manifests"
swevidence /= "swevidence"

latitude /= "lat"
longitude /= "long"
altitude /= "alt"
accuracy /= "accry"
altitude-accuracy /= "alt-accry"
heading /= "heading"
speed /= "speed"
</sourcecode>
        </section>
        <section anchor="jsoninterop" numbered="true" toc="default">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per RFC 8610 Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- must be base64url encoded</li>
            <li>time -- must be encoded as NumericDate as described section 2 of <xref target="RFC7519" format="default"/>.</li>
            <li>string-or-uri -- must be encoded as StringOrURI as described section 2 of <xref target="RFC7519" format="default"/>.</li>
            <li>uri -- must be a URI <xref target="RFC3986" format="default"/>.</li>
            <li>oid -- encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1").</li>
          </ul>
        </section>
      </section>
      <section anchor="cbor" numbered="true" toc="default">
        <name>CBOR</name>
        <section anchor="cbor-interoperability" numbered="true" toc="default">
          <name>CBOR Interoperability</name>
          <t>CBOR allows data items to be serialized in more than one form.
If the sender uses a form that the receiver can't decode, there will not be interoperability.</t>
          <t>This specification gives no blanket requirements to narrow CBOR serialization for all uses of EAT.
This allows individual uses to tailor serialization to the environment.
It also may result in EAT implementations that don't interoperate.</t>
          <t>One way to guarantee interoperability is to clearly specify CBOR serialization in a profile document.
See <xref target="profiles" format="default"/> for a list of serialization issues that should be addressed.</t>
          <t>EAT will be commonly used where the device generating the attestation is constrained and the receiver/verifier of the attestation is a capacious server.
Following is a set of serialization requirements that work well for that use case and are guaranteed to interoperate.
Use of this serialization is recommended where possible, but not required.
An EAT profile may just reference the following section rather than spell out serialization details.</t>
          <section anchor="eat-constrained-device-serialization" numbered="true" toc="default">
            <name>EAT Constrained Device Serialization</name>
            <ul spacing="normal">
              <li>Preferred serialization described in section 4.1 of <xref target="RFC8949" format="default"/> is not required.
The EAT decoder must accept all forms of number serialization.
The EAT encoder may use any form it wishes.</li>
              <li>The EAT decoder must accept indefinite length arrays and maps as described in section 3.2.2 of <xref target="RFC8949" format="default"/>.
The EAT encoder may use indefinite length arrays and maps if it wishes.</li>
              <li>The EAT decoder must accept indefinite length strings as described in section 3.2.3 of <xref target="RFC8949" format="default"/>.
The EAT encoder may use indefinite length strings if it wishes.</li>
              <li>Sorting of maps by key is not required.
The EAT decoder must not rely on sorting.</li>
              <li>Deterministic encoding described in Section 4.2 of <xref target="RFC8949" format="default"/> is not required.</li>
              <li>Basic validity described in section 5.3.1 of <xref target="RFC8949" format="default"/> must be followed.
The EAT encoder must not send duplicate map keys/labels or invalid UTF-8 strings.</li>
            </ul>
          </section>
        </section>
      </section>
      <section anchor="collected-cddl" numbered="true" toc="default">
        <name>Collected CDDL</name>
        <sourcecode type="CDDL">
; This is the top-level definition of the claims in EAT tokens.  To
; form an actual EAT Token, this claim set is enclosed in a COSE, JOSE
; or UCCS message.

eat-claim-set = {
    ? ueid-claim,
    ? nonce-claim,
    ? origination-claim,
    ? oemid-claim,
    ? hardware-version-claims,
    ? security-level-claim,
    ? secure-boot-claim,
    ? debug-status-claim,
    ? location-claim,
    ? intended-use-claim,
    ? profile-claim,
    ? uptime-claim,
    ? manifests-claim,
    ? swevidence-claim,
    ? submods-part,
    * $$eat-extension,
}


; This is the top-level definition of an EAT Token.  It is a CWT, JWT
; or UCSS where the payload is an eat-claim-set. A JWT_Message is what
; is defined by JWT in RFC 7519. (RFC 7519 doesn't use CDDL so a there
; is no actual CDDL definition of JWT_Message).

eat-token = EAT_Tagged_Message / EAT_Untagged_Message / JWT_Message


; This is CBOR-format EAT token in the CWT or UCCS format that is a
; tag.  COSE_Tagged_message is defined in RFC 8152.  Tag 601 is
; proposed by the UCCS draft, but not yet assigned.

EAT_Tagged_Message = #6.61(COSE_Tagged_Message) / #6.601(eat-claim-set)


; This is a CBOR-format EAT token that is a CWT or UCSS that is not a
; tag COSE_Tagged_message and COSE_Untagged_Message are defined in RFC
; 8152.

EAT_Untagged_Message = COSE_Tagged_Message / COSE_Untagged_Message / UCCS_Untagged_Message


; This is an "unwrapped" UCCS tag. Unwrapping a tag means to use the
; definition of its content without the preceding type 6 tag
; integer. Since a UCCS is nothing but a tag for an unsecured CWT
; claim set, unwrapping reduces to a bare eat-claim-set.

UCCS_Untagged_Message = eat-claim-set


string-or-uri = tstr 

time-int = #6.1(int)

$$eat-extension //= (
    ? issuer =&gt; text,
    ? subject =&gt; text,
    ? audience =&gt; text,
    ? expiration =&gt; time,
    ? not-before =&gt; time,
    ? issued-at =&gt; time,
    ? cwt-id =&gt; bytes,
)

issuer = 1
subject = 2
audience = 3
expiration = 4
not-before = 5
issued-at = 6
cwt-id = 7


debug-status-cbor-type = &amp;(
    enabled: 0,
    disabled: 1,
    disabled-since-boot: 2,
    disabled-permanently: 3,
    disabled-fully-and-permanently: 4
)

debug-status-json-type = 
    "enabled" /
    "disabled" /
    "disabled-since-boot" /
    "disabled-permanently" /
    "disabled-fully-and-permanently"

debug-status-claim = (
    debug-status =&gt; debug-status-cbor-type / debug-status-json-type
)

location-type = {
    latitude =&gt; number,
    longitude =&gt; number,
    ? altitude =&gt; number,
    ? accuracy =&gt; number,
    ? altitude-accuracy =&gt; number,
    ? heading =&gt; number,
    ? speed =&gt; number,
    ? timestamp =&gt; ~time-int,
    ? age =&gt; uint
}

latitude = 1 / "latitude"
longitude = 2 / "longitude"
altitude = 3 / "altitude"
accuracy = 4 / "accuracy"
altitude-accuracy = 5 / "altitude-accuracy"
heading = 6 / "heading"
speed = 7 / "speed"
timestamp = 8 / "timestamp"
age = 9 / "age"

location-claim = (
    location-label =&gt; location-type
)

nonce-type = bstr .size (8..64)

nonce-claim = (
    nonce =&gt; nonce-type / [ 2* nonce-type ]
)

oemid-claim = (
    oemid =&gt; bstr
)

chip-version-claim = (
    chip-version =&gt; tstr
)

chip-version-scheme-claim = (
    chip-version-scheme =&gt; $version-scheme
)

board-version-claim = (
    board-version =&gt; tstr
)

board-version-scheme-claim = (
    board-version-scheme =&gt; $version-scheme
)

device-version-claim = (
    device-version =&gt; tstr
)

device-version-scheme-claim = (
    device-version-scheme =&gt; $version-scheme
)


ean-type = text .regexp "[0-9]{13}"

ean-chip-version-claim = (
    ean-chip-version =&gt; ean-type
)

ean-board-version-claim = (
    ean-board-version =&gt; ean-type
)

ean-device-version-claim = (
    ean-device-version =&gt; ean-type
)

hardware-version-claims = (
    ? chip-version-claim,
    ? board-version-claim,
    ? device-version-claim,
    ? chip-version-scheme-claim,
    ? board-version-scheme-claim,
    ? device-version-scheme-claim,
    ? ean-chip-version-claim,
    ? ean-board-version-claim,
    ? ean-device-version-claim,
)


origination-claim = (
    origination =&gt; string-or-uri
)

secure-boot-claim = (
    secure-boot =&gt; bool
)

security-level-cbor-type = &amp;(
    unrestricted: 1,
    restricted: 2,
    secure-restricted: 3,
    hardware: 4
)

security-level-json-type = 
    "unrestricted" /
    "restricted" /
    "secure-restricted" /
    "hardware"

security-level-claim = (
    security-level =&gt; security-level-cbor-type / security-level-json-type
)

; The part of a token that contains all the submodules.  It is a peer
; with the claims in the token, but not a claim, only a map/object to
; hold all the submodules.

submods-part = (
    submods =&gt; submods-type
)

submods-type = { + submod-type }


; The type of a submodule which can either be a nested claim set or a
; nested separately signed token. Nested tokens are wrapped in a bstr
; or a tstr.

submod-type = (
    submod-name =&gt; eat-claim-set / nested-token
)


; When this is a bstr, the contents are an eat-token in CWT or UCCS
; format.  When this is a tstr, the contents are an eat-token in JWT
; format.

nested-token = bstr / tstr; 


; Each submodule has a unique text string name.

submod-name = tstr 



ueid-type = bstr .size (7..33)

ueid-claim = (
     ueid =&gt; ueid-type
)

intended-use-cbor-type = &amp;(
    generic: 1,
    registration: 2,
    provisioning: 3,
    csr: 4,
    pop:  5
)

intended-use-json-type = 
    "generic" /
    "registration" /
    "provisioning" /
    "csr" /
    "pop" 

intended-use-claim = (
    intended-use =&gt; intended-use-cbor-type / intended-use-json-type
)

oid = #6.4000(bstr) ; TODO: fill this in with correct CDDL from OID RFC

profile-claim = (
    profile =&gt; ~uri / ~oid
)

uptime-claim = (
    uptime =&gt; uint
)

manifests-claim = (
    manifests =&gt; manifests-type
)

manifests-type = [+ $manifest-formats]

; Must be a CoSWID payload type
$manifest-formats /= bytes .cbor concise-swid-tag

$manifest-formats /= bytes .cbor SUIT_Envelope_Tagged


swevidence-claim = (
    swevidence =&gt; swevidence-type
)

swevidence-type = [+ $swevidence-formats]

; Must be a CoSWID evidence type
$swevidence-formats /= bytes .cbor concise-swid-tag


; The following Claim Keys (labels) are pre-assigned by IANA.
; They are for CBOR-based tokens (CWT and UCCS).
; They are not expected to change in the final publication as an RFC.

nonce = 10
ueid = 11
oemid = 13
security-level = 14
secure-boot = 15
debug-status = 16
location-label = 17
profile = 18
submods = 20


boot-seed-claim = (
    boot-seed =&gt; bytes
)

; The following are Claim Keys (labels) assigned for JSON-encoded tokens.

ueid /= "ueid"
nonce /= "nonce"
origination /= "origination"
oemid /= "oemid"
security-level /= "seclevel"
secure-boot /= "secboot"
debug-status /= "dbgstat"
location /= "location"
uptime /= "uptime"
profile /= "eat-profile"
intended-use /= "intuse"
boot-seed /= "bootseed"
submods /= "submods"
timestamp /= "timestamp"
manifests /= "manifests"
swevidence /= "swevidence"

latitude /= "lat"
longitude /= "long"
altitude /= "alt"
accuracy /= "accry"
altitude-accuracy /= "alt-accry"
heading /= "heading"
speed /= "speed"

</sourcecode>
      </section>
    </section>
    <section anchor="iana-considerations" numbered="true" toc="default">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-web-token-cwt-claims-registry" numbered="true" toc="default">
        <name>Reuse of CBOR Web Token (CWT) Claims Registry</name>
        <t>Claims defined for EAT are compatible with those of CWT
so the CWT Claims Registry is re used. No new IANA registry
is created. All EAT claims should be registered in the
CWT and JWT Claims Registries.</t>
      </section>
      <section anchor="claim-characteristics" numbered="true" toc="default">
        <name>Claim Characteristics</name>
        <t>The following is design guidance for creating new EAT claims, particularly those to be registered with IANA.</t>
        <t>Much of this guidance is generic and could also be considered when designing new CWT or JWT claims.</t>
        <section anchor="interoperability-and-relying-party-orientation" numbered="true" toc="default">
          <name>Interoperability and Relying Party Orientation</name>
          <t>It is a broad goal that EATs can be processed by relying parties in a general way regardless of the type, manufacturer or technology of the device from which they originate. 
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
          <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
        </section>
        <section anchor="operating-system-and-technology-neutral" numbered="true" toc="default">
          <name>Operating System and Technology Neutral</name>
          <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
          <t>Claims should not be defined such that they are specific to a SW environment or programming language.</t>
          <t>Claims should not be defined such that they are specific to a chip or particular hardware. 
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
          <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
        </section>
        <section anchor="security-level-neutral" numbered="true" toc="default">
          <name>Security Level Neutral</name>
          <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists. 
Secure Elements and smart cards are examples of this. 
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
          <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
        </section>
        <section anchor="reuse-of-extant-data-formats" numbered="true" toc="default">
          <name>Reuse of Extant Data Formats</name>
          <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
          <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON format for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
          <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
        </section>
        <section anchor="proprietary-claims" numbered="true" toc="default">
          <name>Proprietary Claims</name>
          <t>EAT allows the definition and use of proprietary claims.</t>
          <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer. 
This is a supported use case.</t>
          <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
        </section>
      </section>
      <section anchor="claims-registered-by-this-document" numbered="true" toc="default">
        <name>Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519" format="default"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392" format="default"/>. Each entry below is an addition to both registries (except
for the nonce claim which is already registered for JWT, but not registered for CWT).</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <section anchor="claims-for-early-assignment" numbered="true" toc="default">
          <name>Claims for Early Assignment</name>
          <t>RFC Editor: in the final publication this section should be combined with the following
section as it will no longer be necessary to distinguish claims with early assignment.
Also, the following paragraph should be removed.</t>
          <t>The claims in this section have been (requested for / given) early assignment according to <xref target="RFC7120" format="default"/>.
They have been assigned values and registered before final publication of this document.
While their semantics is not expected to change in final publication, it is possible that they will.
The JWT Claim Names and CWT Claim Keys are not expected to change.</t>
          <ul spacing="normal">
            <li>Claim Name: Nonce</li>
            <li>Claim Description: Nonce</li>
            <li>JWT Claim Name: "nonce" (already registered for JWT)</li>
            <li>Claim Key: 10</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <xref target="OpenIDConnectCore" format="default"/>, <strong>this document</strong></li>
          </ul>
          <t>&nbsp;</t>
          <ul spacing="normal">
            <li>Claim Name: UEID</li>
            <li>Claim Description: The Universal Entity ID</li>
            <li>JWT Claim Name: "ueid"</li>
            <li>CWT Claim Key: 11</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t>&nbsp;</t>
          <ul spacing="normal">
            <li>Claim Name: OEMID</li>
            <li>Claim Description: IEEE-based OEM ID</li>
            <li>JWT Claim Name: "oemid"</li>
            <li>Claim Key: 13</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t>&nbsp;</t>
          <ul spacing="normal">
            <li>Claim Name: Security Level</li>
            <li>Claim Description: Characterization of the security of an Attester or submodule</li>
            <li>JWT Claim Name: "seclevel"</li>
            <li>Claim Key: 14</li>
            <li>Claim Value Type(s): integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t>&nbsp;</t>
          <ul spacing="normal">
            <li>Claim Name: Secure Boot</li>
            <li>Claim Description: Indicate whether the boot was secure</li>
            <li>JWT Claim Name: "secboot"</li>
            <li>Claim Key: 15</li>
            <li>Claim Value Type(s): Boolean</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t>&nbsp;</t>
          <ul spacing="normal">
            <li>Claim Name: Debug Status</li>
            <li>Claim Description: Indicate status of debug facilities</li>
            <li>JWT Claim Name: "dbgstat"</li>
            <li>Claim Key: 16</li>
            <li>Claim Value Type(s): integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t>&nbsp;</t>
          <ul spacing="normal">
            <li>Claim Name: Location</li>
            <li>Claim Description: The geographic location</li>
            <li>JWT Claim Name: "location"</li>
            <li>Claim Key: 17</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t>&nbsp;</t>
          <ul spacing="normal">
            <li>Claim Name: Profile</li>
            <li>Claim Description: Indicates the EAT profile followed</li>
            <li>JWT Claim Name: "eat_profile"</li>
            <li>Claim Key: 18</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t>&nbsp;</t>
          <ul spacing="normal">
            <li>Claim Name: Submodules Section</li>
            <li>Claim Description: The section containing submodules (not actually a claim)</li>
            <li>JWT Claim Name: "submods"</li>
            <li>Claim Key: 20</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="to-be-assigned-claims" numbered="true" toc="default">
          <name>To be Assigned Claims</name>
          <t>TODO: add the rest of the claims in here</t>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations" numbered="true" toc="default">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations" numbered="true" toc="default">
        <name>UEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Any set of relying parties
that receives tokens that happen to be from a single device will be
able to know the tokens are all from the same device and be able to
track the device. Thus, in many usage situations ueid violates
governmental privacy regulation. In other usage situations UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>There are several strategies that can be used to still be able to put
UEID's in tokens:</t>
        <ul spacing="normal">
          <li>The device obtains explicit permission from the user of the device
to use the UEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID.</li>
          <li>The UEID is used only in a particular context or particular use
case. It is used only by one relying party.</li>
          <li>The device authenticates the relying party and generates a derived
UEID just for that particular relying party.  For example, the relying
party could prove their identity cryptographically to the device, then
the device generates a UEID just for that relying party by hashing a
proofed relying party ID with the main device UEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in multiple UEIDs
per device. Each UEID is used in a different context, use case or system 
on the device. However, from the view of the relying party, there is just
one UEID and it is still globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations" numbered="true" toc="default">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the device generating the attestation.
For example, many mobile phones prompt the user for permission when before sending location data.</t>
      </section>
    </section>
    <section anchor="securitycons" numbered="true" toc="default">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392" format="default"/> and Section 11
of <xref target="RFC7519" format="default"/> apply to EAT in its CWT and JWT form, respectively.  In addition, 
implementors should consider the following.</t>
      <section anchor="key-provisioning" numbered="true" toc="default">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manfuacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949" format="default"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material" numbered="true" toc="default">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="transport-security" numbered="true" toc="default">
        <name>Transport Security</name>
        <t>As stated in Section 8 of <xref target="RFC8392" format="default"/>, "The security of the CWT relies
upon on the protections offered by COSE".  Similar considerations
apply to EAT when sent as a CWT.  However, EAT introduces the concept
of a nonce to protect against replay.  Since an EAT may be created by
an entity that may not support the same type of transport security as
the consumer of the EAT, intermediaries may be required to bridge
communications between the entity and consumer.  As a result, it is
RECOMMENDED that both the consumer create a nonce, and the entity
leverage the nonce along with COSE mechanisms for encryption and/or
signing to create the EAT.</t>
        <t>Similar considerations apply to the use of EAT as a JWT.  Although the
security of a JWT leverages the JSON Web Encryption (JWE) and JSON Web
Signature (JWS) specifications, it is still recommended to make use of
the EAT nonce.</t>
      </section>
      <section anchor="multiple-eat-consumers" numbered="true" toc="default">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer should leverage a secure protocol (e.g.one that
uses transport-layer security, i.e. TLS),</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then transport security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner">
              <organization/>
            </author>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC8949" target="https://www.rfc-editor.org/info/rfc8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman">
              <organization/>
            </author>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7517" target="https://www.rfc-editor.org/info/rfc7517">
          <front>
            <title>JSON Web Key (JWK)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key.  This specification also defines a JWK Set JSON data structure that represents a set of JWKs.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries established by that specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7517"/>
          <seriesInfo name="DOI" value="10.17487/RFC7517"/>
        </reference>
        <reference anchor="RFC7519" target="https://www.rfc-editor.org/info/rfc7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC7800" target="https://www.rfc-editor.org/info/rfc7800">
          <front>
            <title>Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="April" year="2016"/>
            <abstract>
              <t>This specification describes how to declare in a JSON Web Token (JWT) that the presenter of the JWT possesses a particular proof-of- possession key and how the recipient can cryptographically confirm proof of possession of the key by the presenter.  Being able to prove possession of a key is also sometimes described as the presenter being a holder-of-key.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7800"/>
          <seriesInfo name="DOI" value="10.17487/RFC7800"/>
        </reference>
        <reference anchor="RFC8126" target="https://www.rfc-editor.org/info/rfc8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <author fullname="T. Narten" initials="T." surname="Narten">
              <organization/>
            </author>
            <date month="June" year="2017"/>
            <abstract>
              <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="RFC8152" target="https://www.rfc-editor.org/info/rfc8152">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad">
              <organization/>
            </author>
            <date month="July" year="2017"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8152"/>
          <seriesInfo name="DOI" value="10.17487/RFC8152"/>
        </reference>
        <reference anchor="RFC8392" target="https://www.rfc-editor.org/info/rfc8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610" target="https://www.rfc-editor.org/info/rfc8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz">
              <organization/>
            </author>
            <author fullname="C. Vigano" initials="C." surname="Vigano">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8747" target="https://www.rfc-editor.org/info/rfc8747">
          <front>
            <title>Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="L. Seitz" initials="L." surname="Seitz">
              <organization/>
            </author>
            <author fullname="G. Selander" initials="G." surname="Selander">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="March" year="2020"/>
            <abstract>
              <t>This specification describes how to declare in a CBOR Web Token (CWT) (which is defined by RFC 8392) that the presenter of the CWT possesses a particular proof-of-possession key. Being able to prove possession of a key is also sometimes described as being the holder-of-key. This specification provides equivalent functionality to "Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)" (RFC 7800) but using Concise Binary Object Representation (CBOR) and CWTs rather than JavaScript Object Notation (JSON) and JSON Web Tokens (JWTs).</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8747"/>
          <seriesInfo name="DOI" value="10.17487/RFC8747"/>
        </reference>
        <reference anchor="RFC3986" target="https://www.rfc-editor.org/info/rfc3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee">
              <organization/>
            </author>
            <author fullname="R. Fielding" initials="R." surname="Fielding">
              <organization/>
            </author>
            <author fullname="L. Masinter" initials="L." surname="Masinter">
              <organization/>
            </author>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="WGS84" target="http://earth-info.nga.mil/GandG/publications/tr8350.2/wgs84fin.pdf">
          <front>
            <title>National Imagery and Mapping Agency Technical Report 8350.2, Third Edition</title>
            <author>
              <organization>National Imagery and Mapping Agency</organization>
            </author>
            <date year="2000"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="UCCS.Draft" target="https://tools.ietf.org/html/draft-birkholz-rats-uccs-01">
          <front>
            <title>A CBOR Tag for Unprotected CWT Claims Sets</title>
            <author fullname="Henk Birkholz">
              <organization/>
            </author>
            <date year="2020"/>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="FIDO.AROE" target="https://fidoalliance.org/specs/fido-uaf-v1.0-fd-20191115/fido-allowed-AROE-v1.0-fd-20191115.html">
          <front>
            <title>FIDO Authenticator Allowed Restricted Operating Environments List</title>
            <author>
              <organization>The FIDO Alliance</organization>
            </author>
            <date year="2019" month="November"/>
          </front>
        </reference>
        <reference anchor="EAN-13" target="https://www.gs1.org/standards/barcodes/ean-upc">
          <front>
            <title>International Article Number - EAN/UPC barcodes</title>
            <author>
              <organization>GS1</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID" target="https://tools.ietf.org/html/draft-ietf-sacm-coswid-16">
          <front>
            <title>Concise Software Identification Tags</title>
            <author>
              <organization/>
            </author>
            <date year="2020" month="November"/>
          </front>
        </reference>
        <reference anchor="OpenIDConnectCore" target="https://openid.net/specs/openid-connect-core-1_0.html">
          <front>
            <title>OpenID Connect Core 1.0 incorporating errata set 1</title>
            <author fullname="N. Sakimura">
              <organization/>
            </author>
            <author fullname="J. Bradley">
              <organization/>
            </author>
            <author fullname="M. Jones">
              <organization/>
            </author>
            <author fullname="B. de Medeiros">
              <organization/>
            </author>
            <author fullname="C. Mortimore">
              <organization/>
            </author>
            <date year="2014" month="November"/>
          </front>
        </reference>
        <reference anchor="CBOR-OID" target="https://www.ietf.org/archive/id/draft-ietf-cbor-tags-oid-08.txt">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="Carsten Bormann">
              <organization>Universität Bremen TZI</organization>
            </author>
            <date day="21" month="May" year="2021"/>
            <abstract>
              <t>   The Concise Binary Object Representation (CBOR, RFC 8949) is a data
   format whose design goals include the possibility of extremely small
   code size, fairly small message size, and extensibility without the
   need for version negotiation.

   The present document defines CBOR tags for object identifiers (OIDs).
   It is intended as the reference document for the IANA registration of
   the CBOR tags so defined.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cbor-tags-oid-08"/>
        </reference>
        <reference anchor="RATS-Architecture" target="https://www.ietf.org/archive/id/draft-ietf-rats-architecture-12.txt">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="23" month="April" year="2021"/>
            <abstract>
              <t>   In network protocol exchanges it is often useful for one end of a
   communication to know whether the other end is in an intended
   operating state.  This document provides an architectural overview of
   the entities involved that make such tests possible through the
   process of generating, conveying, and evaluating evidentiary claims.
   An attempt is made to provide for a model that is neutral toward
   processor architectures, the content of claims, and protocols.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-12"/>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122" target="https://www.rfc-editor.org/info/rfc4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach">
              <organization/>
            </author>
            <author fullname="M. Mealling" initials="M." surname="Mealling">
              <organization/>
            </author>
            <author fullname="R. Salz" initials="R." surname="Salz">
              <organization/>
            </author>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4949" target="https://www.rfc-editor.org/info/rfc4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey">
              <organization/>
            </author>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120" target="https://www.rfc-editor.org/info/rfc7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC                        Required", "IETF Review", or "Standards Action" policies apply.  This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation.  The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IDevID" target="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">
          <front>
            <title>IEEE Standard, "IEEE 802.1AR Secure Device Identifier"</title>
            <author>
              <organization/>
            </author>
            <date year="2009" month="December"/>
          </front>
        </reference>
        <reference anchor="ECMAScript" target="http://www.ecma-international.org/ecma-262/5.1/ECMA-262.pdf">
          <front>
            <title>Ecma International, "ECMAScript Language Specification, 5.1 Edition", ECMA Standard 262</title>
            <author>
              <organization/>
            </author>
            <date year="2011" month="June"/>
          </front>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/geolocation-API/#coordinates_interface">
          <front>
            <title>Geolocation API Specification 2nd Edition</title>
            <author>
              <organization>Worldwide Web Consortium</organization>
            </author>
            <date year="2018" month="January"/>
          </front>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://webstore.ansi.org/standards/ieee/ieee8022001r2007">
          <front>
            <title>IEEE Standard For Local And Metropolitan Area Networks Overview And Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2007"/>
          </front>
        </reference>
        <reference anchor="FIDO.Registry" target="https://fidoalliance.org/specs/common-specs/fido-registry-v2.1-ps-20191217.html">
          <front>
            <title>FIDO Registry of Predefined Values</title>
            <author>
              <organization>The FIDO Alliance</organization>
            </author>
            <date year="2019" month="December"/>
          </front>
        </reference>
        <reference anchor="FIPS-140" target="https://csrc.nist.gov/publications/detail/fips/140/2/final">
          <front>
            <title>Security Requirements for Cryptographic Modules</title>
            <author>
              <organization>National Institue of Standards</organization>
            </author>
            <date year="2001" month="May"/>
          </front>
        </reference>
        <reference anchor="Common.Criteria" target="https://www.commoncriteriaportal.org/cc/">
          <front>
            <title>Common Criteria for Information Technology Security Evaluation</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="April"/>
          </front>
        </reference>
      </references>
    </references>
    <section anchor="examples" numbered="true" toc="default">
      <name>Examples</name>
      <section anchor="very-simple-eat" numbered="true" toc="default">
        <name>Very Simple EAT</name>
        <t>This is shown in CBOR diagnostic form. Only the payload signed by COSE
is shown.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
{
    / issuer /           1: "joe",
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /            11: h'0198f50a4ff6c05861c8860d13a638ea',
    / secure-boot /     15: true,
    / debug-disable /   16: 3, / permanent-disable /
    / timestamp (iat) /  6: 1(1526542894)
}
]]></artwork>
      </section>
      <section anchor="example-with-submodules-nesting-and-security-levels" numbered="true" toc="default">
        <name>Example with Submodules, Nesting and Security Levels</name>
        <artwork name="" type="" align="left" alt=""><![CDATA[
{
    / nonce /                 10: h'948f8860d13a463e8e',
    / UEID /                  11: h'0198f50a4ff6c05861c8860d13a638ea',
    / secure-boot /           15: true,
    / debug-disable /         16: 3, / permanent-disable  /
    / timestamp (iat) /        6: 1(1526542894),
    / security-level /        14: 3, / secure restricted OS /
    / submods / 20: {
        / first submod, an Android Application /
        "Android App Foo" :  {
            / security-level /  14: 1 / unrestricted /
        },

        / 2nd submod, A nested EAT from a secure element /
        "Secure Element Eat" :
            / an embedded EAT, bytes of which are not shown /
            h'420123',

        / 3rd submod, information about Linux Android /
        "Linux Android": {
            / security-level /  14: 1 / unrestricted /
        }
    }
}
]]></artwork>
      </section>
    </section>
    <section anchor="ueid-design-rationale" numbered="true" toc="default">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability" numbered="true" toc="default">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion datadbase is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table align="center">
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and SW so this
simple approximation is used. See <xref target="BirthdayAttack" format="default"/>.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
    p = k^2 / 2n 
]]></artwork>
        <t>For this calculation:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
    p  Collision Probability
    n  Total population based on number of bits in UEID
    k  Population in a database
]]></artwork>
        <table align="center">
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's 
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of 
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
  t = 1 / ((k / 10) * p)
  
  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table align="center">
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid" numbered="true" toc="default">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122" format="default"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this 
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality 
random numbers, but do so by mapping into the overall UUID 
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>UUIDs seem to have been designed for scenarios where the implementor
does not have full control over the environment and uniqueness has to
be constructed from identifiers at hand. UEID takes the view that
hardware, software and/or manufacturing process directly implement
UEID in a simple and direct way. It takes the view that cryptographic
quality random number generators are readily available as they are
implemented in commonly used CPU hardware.</t>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts" numbered="true" toc="default">
      <name>Changes from Previous Drafts</name>
      <t>The following is a list of known changes from the previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences.</t>
      <section anchor="from-draft-rats-eat-01" numbered="true" toc="default">
        <name>From draft-rats-eat-01</name>
        <ul spacing="normal">
          <li>Added UEID design rationale appendix</li>
        </ul>
      </section>
      <section anchor="from-draft-mandyam-rats-eat-00" numbered="true" toc="default">
        <name>From draft-mandyam-rats-eat-00</name>
        <t>This is a fairly large change in the orientation of the document, but
no new claims have been added.</t>
        <ul spacing="normal">
          <li>Separate information and data model using CDDL.</li>
          <li>Say an EAT is a CWT or JWT</li>
          <li>Use a map to structure the boot_state and location claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-01" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-01</name>
        <ul spacing="normal">
          <li>Clarifications and corrections for OEMID claim</li>
          <li>Minor spelling and other fixes</li>
          <li>Add the nonce claim, clarify jti claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-02" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-02</name>
        <ul spacing="normal">
          <li>Roll all EUIs back into one UEID type</li>
          <li>UEIDs can be one of three lengths, 128, 192 and 256.</li>
          <li>Added appendix justifying UEID design and size.</li>
          <li>Submods part now includes nested eat tokens so they can be named and
there can be more tha one of them</li>
          <li>Lots of fixes to the CDDL</li>
          <li>Added security considerations</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-03" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-03</name>
        <ul spacing="normal">
          <li>Split boot_state into secure-boot and debug-disable claims</li>
          <li>Debug disable is an enumerated type rather than Booleans</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-04" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-04</name>
        <ul spacing="normal">
          <li>Change IMEI-based UEIDs to be encoded as a 14-byte string</li>
          <li>CDDL cleaned up some more</li>
          <li>CDDL allows for JWTs and UCCSs</li>
          <li>CWT format submodules are byte string wrapped</li>
          <li>Allows for JWT nested in CWT and vice versa</li>
          <li>Allows UCCS (unsigned CWTs) and JWT unsecured tokens</li>
          <li>Clarify tag usage when nesting tokens</li>
          <li>Add section on key inclusion</li>
          <li>Add hardware version claims</li>
          <li>Collected CDDL is now filled in. Other CDDL corrections.</li>
          <li>Rename debug-disable to debug-status; clarify that it is not extensible</li>
          <li>Security level claim is not extensible</li>
          <li>Improve specification of location claim and added a location privacy section</li>
          <li>Add intended use claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-05" numbered="true" toc="default">
        <name>From draft-ietf-rats-05</name>
        <ul spacing="normal">
          <li>CDDL format issues resolved</li>
          <li>Corrected reference to Location Privacy section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-06" numbered="true" toc="default">
        <name>From draft-ietf-rats-06</name>
        <ul spacing="normal">
          <li>Added boot-seed claim</li>
          <li>Rework CBOR interoperability section</li>
          <li>Added profiles claim and section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-07" numbered="true" toc="default">
        <name>From draft-ietf-rats-07</name>
        <ul spacing="normal">
          <li>Filled in IANA and other sections for possible preassignment of claim keys for well understood claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-08" numbered="true" toc="default">
        <name>From draft-ietf-rats-08</name>
        <ul spacing="normal">
          <li>Change profile claim to be either a URL or an OID rather than a test string</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-09" numbered="true" toc="default">
        <name>From draft-ietf-rats-09</name>
        <ul spacing="normal">
          <li>Added section on use for Evidence and Attestation Results</li>
          <li>Added manifests and software evidence claims</li>
          <li>Add string labels non-claim labels for use with JSON (e.g. labels for members of location claim)</li>
        </ul>
      </section>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAFT8r2AAA+y963IjV3Iu+r+eogJybJEyAF77qhh7UyQlUdNs9m6yp33C
4VAUgAJYaqAKriqQjWm3w6+xI/Z5OT/Jyfwyc10KQEvjGW+fs884HBo2qmqt
XLdcef1yMBgkTZuVk5+zeVXmL9O2XuVJsazxV9MeHx6+ODxOxln7Mm3aSZJM
qnGZLejFSZ1N20GRt9NBnbXNIM/awTxr86ZNksfZy/Tt2d1t+r6qPxTlLP2h
rlbL5Kt0XJVNXjar5mX69TpvvqafmtVoUTRNUZXtekntXl3efZ8si5dJmrbV
2N7DPyb5sr2nX075301Vt3U+bfwbzXoR/zCuFsts3AZvrEb+t7Lin+rpOJ80
7Xqe22tt0fI/7u7z9LKkf6zTs5aHlbVEY3pXfcjLdO/y7G4/yUajOn94mdI/
kqzOMyK+bPO6zNvkwyPNVzErefBZ8Pl4VNU06AlN1Mv0+PDoZHB0mGSr9r6q
XyaDtCiJ/B+G6TWtyDpbEH0y2T8UdTG5z+rgQVXTJP+PVTanES3Su3x8X1bz
albkDVExHvJoaX5yGumTZ8+epNdVnd9XqyZPL+riIefZoaG9TG+zMr0o8lnF
c5HPiMaX6Xk2L6ZVXRYZJnFVtjW9+e72jP65vMc26f3tUfr8yfP06ZOj9Blt
kh49yhdZMX+ZLoTE//7PbTH8Z6VvSP+x4b0apq9W5WQ0zya5G+CrbFXn5TiP
HmGIt/l4VfMq0IJU9Tp99erc9zWfzf970cypx0Gd844IO7oept9l8znNfV5X
jevqupit8nnn0X/tbAaTeXr84kUwlyOhcudk/jRMb76+qMpqdr/ys/lTXueL
dfzkt4/w+NmL9PusLmmrVqvZffq2yiZuhMEDDGfCu/Pd0Wn67NVtNL6yaPNJ
+ns6AJNqEQz19DQ9On5ynJ48PTl6Hgz1l2oCYjeHmpRVvaDj85AzU3j7/fnx
0dEL/fP5i1P789mTo2f+T/fr88NDe/fo+Kn789mp+/PJsf158sL9+fTIffbs
1No9efGcWqC/3/9w+xwNEF/K6hnP2n3bLl8eHORZ3d4PinJaDctZNlwU84Mf
aHv+cLBcjebFGFygOWjr5ydPDofHB4+z5vnptCiHy8lUmhPu8xovZvP0apHN
ctr21AYd/uWSGcrZjI7KWtaQmpynb/Ml7f1U2uzTSSnqSXo5KbgNtGochv8e
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
RIABAA==

-->

</rfc>
