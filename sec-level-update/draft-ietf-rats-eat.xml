<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.4.19 -->
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" obsoletes="" updates="" submissionType="IETF" xml:lang="en" tocInclude="true" tocDepth="4" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.9.1 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@island-resort.com</email>
      </address>
    </author>
    <author initials="M." surname="Ballesteros" fullname="Miguel Ballesteros">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 4299</phone>
        <email>mballest@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <date year="2021" month="July" day="15"/>
    <area>Internet</area>
    <workgroup>RATS Working Group</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides a signed (attested) set of
claims that describe state and characteristics of an entity, typically
a device like a phone or an IoT device.  These claims are used by a
relying party to determine how much it wishes to trust the entity.</t>
      <t>An EAT is either a CWT or JWT with some attestation-oriented 
claims. To a large degree, all this document does is extend
CWT and JWT.</t>
    </abstract>
    <note>
      <name>Contributing</name>
      <t>TBD</t>
    </note>
  </front>
  <middle>
    <section anchor="introduction" numbered="true" toc="default">
      <name>Introduction</name>
      <t>Remote device attestation is a fundamental service that allows a remote
device such as a mobile phone, an Internet-of-Things (IoT) device, or
other endpoint to prove itself to a relying party, a server or a
service.  This allows the relying party to know some characteristics
about the device and decide whether it trusts the device.</t>
      <t>Remote attestation is a fundamental service that can underlie other
protocols and services that need to know about the trustworthiness of
the device before proceeding. One good example is biometric
authentication where the biometric matching is done on the device. The
relying party needs to know that the device is one that is known to do
biometric matching correctly.  Another example is content protection
where the relying party wants to know the device will protect the
data.  This generalizes on to corporate enterprises that might want to
know that a device is trustworthy before allowing corporate data to be
accessed by it.</t>
      <t>The notion of attestation here is large and may include, but is not
limited to the following:</t>
      <ul spacing="normal">
        <li>Proof of the make and model of the device hardware (HW)</li>
        <li>Proof of the make and model of the device processor, particularly
for security-oriented chips</li>
        <li>Measurement of the software (SW) running on the device</li>
        <li>Configuration and state of the device</li>
        <li>Environmental characteristics of the device such as its GPS location</li>
      </ul>
      <section anchor="cwt-jwt-and-uccs" numbered="true" toc="default">
        <name>CWT, JWT and UCCS</name>
        <t>For flexibility and ease of imlpementation in a wide variety of environments, EATs can be either CBOR <xref target="RFC8949" format="default"/> or JSON <xref target="ECMAScript" format="default"/> format.
This specification simultaneously describes both formats.</t>
        <t>An EAT is either a CWT as defined in <xref target="RFC8392" format="default"/>, a UCCS as defined in <xref target="UCCS.Draft" format="default"/>, or a JWT as defined in <xref target="RFC7519" format="default"/>.
This specification extends those specifications with additional claims for attestation.</t>
        <t>The identification of a protocol element as an EAT, whether CBOR or JSON format, follows the general conventions used by CWT, JWT and UCCS.
Largely this depends on the protocol carrying the EAT.
In some cases it may be by content type (e.g., MIME type).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
      </section>
      <section anchor="cddl" numbered="true" toc="default">
        <name>CDDL</name>
        <t>This specification uses CDDL, <xref target="RFC8610" format="default"/>, as the primary formalism to
define each claim.  The implementor then interprets the CDDL to come
to either the CBOR <xref target="RFC8949" format="default"/> or JSON <xref target="ECMAScript" format="default"/>
representation. In the case of JSON, Appendix E of <xref target="RFC8610" format="default"/> is
followed. Additional rules are given in <xref target="jsoninterop" format="default"/> of this
document where Appendix E is insufficient.  (Note that this is not to
define a general means to translate between CBOR and JSON, but only to
define enough such that the claims defined in this document can be
rendered unambiguously in JSON).</t>
        <t>The CWT specification was authored before CDDL was available and did not use it.
This specification includes a CDDL definition of most of what is described in <xref target="RFC8392" format="default"/>.</t>
      </section>
      <section anchor="entity-overview" numbered="true" toc="default">
        <name>Entity Overview</name>
        <t>An "entity" can be any device or device subassembly ("submodule") that
can generate its own attestation in the form of an EAT.  The
attestation should be cryptographically verifiable by the EAT
consumer. An EAT at the device-level can be composed of several
submodule EAT's.</t>
        <t>Modern devices such as a mobile phone have many different execution
environments operating with different security levels. For example, it
is common for a mobile phone to have an "apps" environment that runs
an operating system (OS) that hosts a plethora of downloadable
apps. It may also have a TEE (Trusted Execution Environment) that is
distinct, isolated, and hosts security-oriented functionality like
biometric authentication. Additionally, it may have an eSE (embedded
Secure Element) - a high security chip with defenses against HW
attacks that is used to produce attestations.  This device attestation format
allows the attested data to be tagged at a security level from which
it originates.  In general, any discrete execution environment that
has an identifiable security level can be considered an entity.</t>
      </section>
      <section anchor="use-as-evidence-and-attestation-results" numbered="true" toc="default">
        <name>Use as Evidence and Attestation Results</name>
        <t>Here, normative reference is made to <xref target="RATS-Architecture" format="default"/>, particularly the definition of Evidence, the Verifier, Attestation Results and the Relying Party.
Per Figure 1 in <xref target="RATS-Architecture" format="default"/>, Evidence is a protocol message that goes from the Attester to the Verifier and Attestation Results a message that goes from the Verifier to the Relying Party.
EAT is defined such that it can be used to represent either Evidence, Attestation Results or both.
No claims defined here are considered exclusive to or are prohibited in either use.
It is useful to create EAT profiles as described in <xref target="profiles" format="default"/> for either use.</t>
        <t>It is useful to characterize the relationship of claims in Evidence to those in Attestation Results.</t>
        <t>Many claims in Evidence simply will pass through the Verifier to the Relying Party without modification.
They will be verified as authentic from the device by the Verifier just through normal verification of the Attester's signature.
They will be protected from modification when they are conveyed to the Relying Party by whatever means is used to protect Attestation Results. 
(The details of that protection are out of scope of this document.)</t>
        <t>Some claims in Evidence will be verified by the Verifier by comparison to Reference Values.
In this case the claims in Evidence will not likely be conveyed to the Relying Party.
Instead, some claim indicating they were checked may be added to the Attestation Results or it may be tacitly known that the Verifier always does this check.</t>
        <t>In some cases the Verifier may provide privacy-preserving functionality by stripping or modifying claims that do not posses sufficient privacy-preserving characteristics.</t>
      </section>
      <section anchor="eat-operating-models" numbered="true" toc="default">
        <name>EAT Operating Models</name>
        <t>TODO: Rewrite (or eliminate) this section in light of the RATS architecture draft.</t>
        <t>At least the following three participants exist in all EAT operating
models. Some operating models have additional participants.</t>
        <dl>
          <dt>
The Entity.  </dt>
          <dd>
            <t>This is the phone, the IoT device, the sensor, the sub-assembly or
such that the attestation provides information about.</t>
          </dd>
          <dt>
The Manufacturer.  </dt>
          <dd>
            <t>The company that made the entity.  This may be a chip vendor, a
circuit board module vendor or a vendor of finished consumer products.</t>
          </dd>
          <dt>
The Relying Party.  </dt>
          <dd>
            <t>The server, service or company that makes use of the information in
the EAT about the entity.</t>
          </dd>
        </dl>
        <t>In all operating models, the manufacturer provisions some secret
attestation key material (AKM) into the entity during manufacturing.
This might be during the manufacturer of a chip at a fabrication
facility (fab) or during final assembly of a consumer product or any
time in between. This attestation key material is used for signing
EATs.</t>
        <t>In all operating models, hardware and/or software on the entity create
an EAT of the format described in this document. The EAT is always
signed by the attestation key material provisioned by the
manufacturer.</t>
        <t>In all operating models, the relying party must end up knowing that
the signature on the EAT is valid and consistent with data from claims
in the EAT.  This can happen in many different ways. Here are some
examples.</t>
        <ul spacing="normal">
          <li>The EAT is transmitted to the relying party. The relying party gets
corresponding key material (e.g. a root certificate) from the
manufacturer. The relying party performs the verification.</li>
          <li>The EAT is transmitted to the relying party. The relying party
transmits the EAT to a verification service offered by the
manufacturer. The server returns the validated claims.</li>
          <li>The EAT is transmitted directly to a verification service, perhaps
operated by the manufacturer or perhaps by another party. It
verifies the EAT and makes the validated claims available to the
relying party. It may even modify the claims in some way and re-sign
the EAT (with a different signing key).</li>
        </ul>
        <t>All these operating models are supported and there is no preference
of one over the other. It is important to support this variety of
operating models to generally facilitate deployment and to allow for
some special scenarios. One special scenario has a validation service
that is monetized, most likely by the manufacturer.  In another, a
privacy proxy service processes the EAT before it is transmitted to
the relying party. In yet another, symmetric key material is used for
signing. In this case the manufacturer should perform the
verification, because any release of the key material would enable a
participant other than the entity to create valid signed EATs.</t>
      </section>
      <section anchor="what-is-not-standardized" numbered="true" toc="default">
        <name>What is Not Standardized</name>
        <t>The following is not standardized for EAT, just the same they are not
standardized for CWT or JWT.</t>
        <section anchor="transmission-protocol" numbered="true" toc="default">
          <name>Transmission Protocol</name>
          <t>EATs may be transmitted by any protocol the same as CWTs and JWTs. For
example, they might be added in extension fields of other protocols,
bundled into an HTTP header, or just transmitted as files. This
flexibility is intentional to allow broader adoption. This flexibility
is possible because EAT's are self-secured with signing (and possibly
additionally with encryption and anti-replay). The transmission
protocol is not required to fulfill any additional security
requirements.</t>
          <t>For certain devices, a direct connection may not exist between the
EAT-producing device and the Relying Party. In such cases, the EAT
should be protected against malicious access. The use of COSE and JOSE
allows for signing and encryption of the EAT. Therefore, even if the
EAT is conveyed through intermediaries between the device and Relying
Party, such intermediaries cannot easily modify the EAT payload or
alter the signature.</t>
        </section>
        <section anchor="signing-scheme" numbered="true" toc="default">
          <name>Signing Scheme</name>
          <t>The term "signing scheme" is used to refer to the system that includes
end-end process of establishing signing attestation key material in
the entity, signing the EAT, and verifying it. This might involve key
IDs and X.509 certificate chains or something similar but
different. The term "signing algorithm" refers just to the algorithm
ID in the COSE signing structure. No particular signing algorithm or
signing scheme is required by this standard.</t>
          <t>There are three main implementation issues driving this. First, secure
non-volatile storage space in the entity for the attestation key
material may be highly limited, perhaps to only a few hundred bits, on
some small IoT chips. Second, the factory cost of provisioning key
material in each chip or device may be high, with even millisecond
delays adding to the cost of a chip. Third, privacy-preserving signing
schemes like ECDAA (Elliptic Curve Direct Anonymous Attestation) are
complex and not suitable for all use cases.</t>
          <t>Over time to faciliate interoperability, some signing schemes may be
defined in EAT profiles or other documents either in the IETF or outside.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology" numbered="true" toc="default">
      <name>Terminology</name>
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in
BCP 14 <xref target="RFC2119" format="default"/> <xref target="RFC8174" format="default"/> when, and only when, they appear in all
capitals, as shown here.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519" format="default"/>, COSE
<xref target="RFC8152" format="default"/>, and CWT <xref target="RFC8392" format="default"/>.</t>
      <dl>
        <dt>
Claim Name.  </dt>
        <dd>
          <t>The human-readable name used to identify a claim.</t>
        </dd>
        <dt>
Claim Key.  </dt>
        <dd>
          <t>The CBOR map key or JSON name used to identify a claim.</t>
        </dd>
        <dt>
Claim Value.  </dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>
CWT Claims Set.  </dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
        <dt>
Attestation Key Material (AKM).  </dt>
        <dd>
          <t>The key material used to sign the EAT token. If it is done
symmetrically with HMAC, then this is a simple symmetric key.
If it is done with ECC, such as an IEEE DevID <xref target="IEEE.802.1AR" format="default"/>, then this
is the private part of the EC key pair. If ECDAA 
is used, (e.g., as used by Enhanced Privacy ID, i.e. EPID) then it is the key material 
needed for ECDAA.</t>
        </dd>
      </dl>
    </section>
    <section anchor="the-claims" numbered="true" toc="default">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation. It also
mentions several claims defined by CWT and JWT that are particularly
important for EAT.</t>
      <t>Note also:
* Any claim defined for CWT or JWT may be used in an EAT including 
  those in the CWT <xref target="IANA.CWT.Claims" format="default"/> and JWT IANA <xref target="IANA.JWT.Claims" format="default"/>
  claims registries.</t>
      <ul spacing="normal">
        <li>All claims are optional</li>
        <li>No claims are mandatory</li>
        <li>All claims that are not understood by implementations MUST be ignored</li>
      </ul>
      <t>There are no default values or meanings assigned to absent claims
other than they are not reported. The reason for a claim's absence may
be the implementation not supporting the claim, an inability to
determine its value, or a preference to report in a different way such
as a proprietary claim.</t>
      <t>CDDL along with text descriptions is used to define each claim
indepdent of encoding.  Each claim is defined as a CDDL group (the
group is a general aggregation and type definition feature of
CDDL). In the encoding section <xref target="encoding" format="default"/>, the CDDL groups turn into
CBOR map entries and JSON name/value pairs.</t>
      <t>Map labels are assigned both an integer and string value.
CBOR encoded tokens MUST use only integer labels.
JSON encoded tokens MUST use only string labels.</t>
      <t>TODO: add paragraph here about use for Attestation Evidence and for Results.</t>
      <section anchor="token-id-claim-cti-and-jti" numbered="true" toc="default">
        <name>Token ID Claim (cti and jti)</name>
        <t>CWT defines the "cti" claim. JWT defines the "jti" claim. These are
equivalent to each other in EAT and carry a unique token identifier as
they do in JWT and CWT.  They may be used to defend against re use of
the token but are distinct from the nonce that is used by the relying
party to guarantee freshness and defend against replay.</t>
      </section>
      <section anchor="timestamp-claim-iat" numbered="true" toc="default">
        <name>Timestamp claim (iat)</name>
        <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
        <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even 
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
        <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. No token may contain an iat claim in
float-point format. Any recipient of a token with a floating-point
format iat claim may consider it an error.  A 64-bit integer 
representation of epoch time can represent a range of +/- 500 billion
years, so the only point of a floating-point timestamp is to 
have precession greater than one second. This is not needed for EAT.</t>
      </section>
      <section anchor="nonce-claim-nonce" numbered="true" toc="default">
        <name>Nonce Claim (nonce)</name>
        <t>All EATs should have a nonce to prevent replay attacks. The nonce is
generated by the relying party, the end consumer of the token. It is
conveyed to the entity over whatever transport is in use before the
token is generated and then included in the token as the nonce claim.</t>
        <t>This documents the nonce claim for registration in the IANA CWT 
claims registry. This is equivalent to the JWT nonce claim that is
already registered.</t>
        <t>The nonce must be at least 8 bytes (64 bits) as fewer are unlikely
to be secure. A maximum of 64 bytes is set to limit the memory
a constrained implementation uses. This size range is not set
for the already-registered JWT nonce, but it should follow
this size recommendation when used in an EAT.</t>
        <t>Multiple nonces are allowed to accommodate multistage verification
and consumption.</t>
        <section anchor="nonce-cddl" numbered="true" toc="default">
          <name>nonce CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
nonce-type = bstr .size (8..64)

nonce-claim = (
    nonce => nonce-type / [ 2* nonce-type ]
)
]]></sourcecode>
        </section>
      </section>
      <section anchor="universal-entity-id-claim-ueid" numbered="true" toc="default">
        <name>Universal Entity ID Claim (ueid)</name>
        <t>UEID's identify individual manufactured entities / devices such as a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire device or a submodule or
subsystem. It does not identify types, models or classes of
devices. It is akin to a serial number, though it does not have to be
sequential.</t>
        <t>UEID's must be universally and globally unique across manufacturers
and countries. UEIDs must also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then relying parties receiving them will have
to track other characteristics of the device to keep devices distinct
between manufacturers).</t>
        <t>There are privacy considerations for UEID's. See <xref target="ueidprivacyconsiderations" format="default"/>.</t>
        <t>The UEID is permanent. It never change for a given
device / entity.</t>
        <t>UEIDs are variable length. All implementations MUST be able to receive
UEIDs that are 33 bytes long (1 type byte and 256 bits).  The
recommended maximum sent is also 33 bytes.</t>
        <t>When the entity constructs the UEID, the first byte is a type and the
following bytes the ID for that type. Several types are allowed to
accommodate different industries and different manufacturing processes
and to give options to avoid paying fees for certain types of
manufacturer registrations.</t>
        <t>Creation of new types requires a Standards Action <xref target="RFC8126" format="default"/>.</t>
        <table anchor="ueid-types-table" align="center">
          <name>UEID Composition Types</name>
          <thead>
            <tr>
              <th align="left">Type Byte</th>
              <th align="left">Type Name</th>
              <th align="left">Specification</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">0x01</td>
              <td align="left">RAND</td>
              <td align="left">This is a 128, 192 or 256 bit random number generated once and stored in the device. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the device and stored. It may not be smaller than 128 bits.</td>
            </tr>
            <tr>
              <td align="left">0x02</td>
              <td align="left">IEEE EUI</td>
              <td align="left">This makes use of the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-device identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while devices with multiple network interfaces may have multiple MAC addresses, there is only one UEID for a device) <xref target="IEEE.802-2001" format="default"/>, <xref target="OUI.Guide" format="default"/></td>
            </tr>
            <tr>
              <td align="left">0x03</td>
              <td align="left">IMEI</td>
              <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which SHALL be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded SHALL NOT include Luhn checksum or SVN information. <xref target="ThreeGPP.IMEI" format="default"/></td>
            </tr>
          </tbody>
        </table>
        <t>UEID's are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
        <t>The consumer (the relying party) of a UEID MUST treat a UEID as a
completely opaque string of bytes and not make any use of its internal
structure. For example, they should not use the OUI part of a type
0x02 UEID to identify the manufacturer of the device. Instead they
should use the oemid claim that is defined elsewhere. The reasons for
this are:</t>
        <ul spacing="normal">
          <li>UEIDs types may vary freely from one manufacturer to the next.</li>
          <li>New types of UEIDs may be created. For example, a type 0x07 UEID may
be created based on some other manufacturer registration scheme.</li>
          <li>Device manufacturers are allowed to change from one type of UEID to
another anytime they want. For example, they may find they can
optimize their manufacturing by switching from type 0x01 to type
0x02 or vice versa.  The main requirement on the manufacturer is
that UEIDs be universally unique.</li>
        </ul>
        <section anchor="ueid-cddl" numbered="true" toc="default">
          <name>ueid CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
ueid-type = bstr .size (7..33)

ueid-claim = (
     ueid => ueid-type
)
]]></sourcecode>
        </section>
      </section>
      <section anchor="semi-permanent-ueids-sueids" numbered="true" toc="default">
        <name>Semi-permanent UEIDs (SUEIDs)</name>
        <t>An SEUID is of the same format as a UEID, but it may change to a different value on device life-cycle events.
Examples of these events are change of ownership, factory reset and on-boarding into an IoT device management system.
A device may have both a UEID and SUEIDs, neither, one or the other.</t>
        <t>There may be multiple SUEIDs.
Each one has a text string label the purpose of which is to distinguish it from others in the token.
The label may name the purpose, application or type of the SUEID.
Typically, there will be few SUEDs so there is no need for a formal labeling mechanism like a registry.
The EAT profile may describe how SUEIDs should be labeled.
If there is only one SUEID, the claim remains a map and there still must be a label.
For example, the label for the SUEID used by FIDO Onboarding Protocol could simply be "FDO".</t>
        <t>There are privacy considerations for SUEID's. See <xref target="ueidprivacyconsiderations" format="default"/>.</t>
        <sourcecode type="CDDL"><![CDATA[
sueids-type = {
    + tstr => ueid-type
}

sueids-claim = (
     sueids => sueids-type
)
]]></sourcecode>
      </section>
      <section anchor="oemid" numbered="true" toc="default">
        <name>OEM Identification by IEEE (oemid)</name>
        <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE.RA" format="default"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide" format="default"/> and provides a lookup
services <xref target="OUI.Lookup" format="default"/></t>
        <t>Companies that have more than one of these IDs or MAC address blocks
should pick one and prefer that for all their devices.</t>
        <t>Commonly, these are expressed in Hexadecimal Representation
<xref target="IEEE.802-2001" format="default"/> also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48. For JSON encoded
tokens, this is further base64url encoded.</t>
        <section anchor="oemid-cddl" numbered="true" toc="default">
          <name>oemid CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
oemid-claim = (
    oemid => bstr
)
]]></sourcecode>
        </section>
      </section>
      <section anchor="hardware-version-claims-hardware-version-claims" numbered="true" toc="default">
        <name>Hardware Version Claims (hardware-version-claims)</name>
        <t>The hardware version can be claimed at three different levels, the chip, the circuit board and the final device assembly.
An EAT can include any combination these claims.</t>
        <t>The hardware version is a simple text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID" format="default"/>.</t>
        <t>The hardware version can also be given by a 13-digit <xref target="EAN-13" format="default"/>.
A new CoSWID version scheme is registered with IANA by this document in <xref target="registerversionscheme" format="default"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.</t>
        <sourcecode type="CDDL"><![CDATA[
hw-version-type = [
    version:  tstr,
    scheme:  $version-scheme
]

chip-version-claim = (
    chip-version => hw-version-type
)

board-version-claim = (
    board-version => hw-version-type
)

device-version-claim = (
    device-version => hw-version-type
)

hardware-version-claims = (
    ? chip-version-claim,
    ? board-version-claim,
    ? device-version-claim,
)

]]></sourcecode>
      </section>
      <section anchor="the-security-level-claim-security-level" numbered="true" toc="default">
        <name>The Security Level Claim (security-level)</name>
        <t>This claim characterizes the device/entity 
ability to defend against attacks aimed at capturing the signing
key, forging claims and at forging EATs. This is done by
defining four security levels as described below.</t>
        <t>These claims describe security environment and countermeasures
available on the end-entity / client device where the attestation key
reside and the claims originate.</t>
        <dl>
          <dt>
1 -- Unrestricted  </dt>
          <dd>
            <t>There is some expectation that implementor will
protect the attestation signing keys at this level. Otherwise
the EAT provides no meaningful security assurances.</t>
          </dd>
          <dt>
2-- Restricted  </dt>
          <dd>
            <t>Entities at this level should not be general-purpose
operating environments that host features such as app download
systems, web browsers and complex productivity applications.
It is akin to the Secure Restricted level (see below) without the
security orientation. Examples include a Wi-Fi subsystem,
an IoT camera, or sensor device.</t>
          </dd>
          <dt>
3 -- Secure Restricted  </dt>
          <dd>
            <t>Entities at this level must meet the criteria defined by FIDO Allowed
Restricted Operating Environments <xref target="FIDO.AROE" format="default"/>. Examples include TEE's and 
schemes using virtualization-based security. Like the FIDO security goal,
security at this level is aimed at defending well against large-scale
network / remote attacks against the device.</t>
          </dd>
          <dt>
4 -- Hardware  </dt>
          <dd>
            <t>Entities at this level must include substantial defense 
against physical or electrical attacks against the device itself.
It is assumed any potential attacker has captured the device and can 
disassemble it. Example include TPMs and Secure Elements.</t>
          </dd>
        </dl>
        <t>The entity should claim the highest security level it achieves and no higher.
This set is not extensible so as to provide a common interoperable description of security level to the relying party.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of security and its own proprietary claim as a refined indication.</t>
        <t>This claim is not intended as a replacement for a proper end-device
security certification schemes such as those based on FIPS 140 <xref target="FIPS-140" format="default"/> 
or those based on Common Criteria <xref target="Common.Criteria" format="default"/>. The 
claim made here is solely a self-claim made by the Entity Originator.</t>
        <section anchor="security-level-cddl" numbered="true" toc="default">
          <name>security-level CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
security-level-cbor-type = &(
    unrestricted: 1,
    restricted: 2,
    secure-restricted: 3,
    hardware: 4
)

security-level-json-type = 
    "unrestricted" /
    "restricted" /
    "secure-restricted" /
    "hardware"

security-level-claim = (
    security-level => security-level-cbor-type / security-level-json-type
)
]]></sourcecode>
        </section>
      </section>
      <section anchor="secure-boot-claim-secure-boot" numbered="true" toc="default">
        <name>Secure Boot Claim (secure-boot)</name>
        <t>The value of true indicates secure boot is enabled. Secure boot is
considered enabled when base software, the firmware and operating
system, are under control of the entity manufacturer identified in the
OEMID claim described in <xref target="oemid" format="default"/>. This may because the software is
in ROM or because it is cryptographically authenticated or some
combination of the two or other.</t>
        <section anchor="secure-boot-cddl" numbered="true" toc="default">
          <name>secure-boot CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
secure-boot-claim = (
    secure-boot => bool
)
]]></sourcecode>
        </section>
      </section>
      <section anchor="debug-status-claim-debug-status" numbered="true" toc="default">
        <name>Debug Status Claim (debug-status)</name>
        <t>This applies to system-wide or submodule-wide debug facilities of the
target device / submodule like JTAG and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
        <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-device
public keys.</t>
        <t>As with all claims, the absence of the debug level claim means
it is not reported. A conservative interpretation might assume
the Not Disabled state. It could however be that it is reported
in a proprietary claim.</t>
        <t>This claim is not extensible so as to provide a common interoperable description of debug status to the relying party.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
        <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
        <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The verifier or relying party receiving an EAT cannot
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
        <t>An individual target device / submodule may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
        <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the relying party can know the debug status
of the submodules since there is no inheritance.</t>
        <section anchor="enabled" numbered="true" toc="default">
          <name>Enabled</name>
          <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
        </section>
        <section anchor="disabled" numbered="true" toc="default">
          <name>Disabled</name>
          <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future, and it may also be
possible that they were enabled in the past after the
target device/sub-system booted/started, but they are currently disabled.</t>
        </section>
        <section anchor="disabled-since-boot" numbered="true" toc="default">
          <name>Disabled Since Boot</name>
          <t>This level indicates all debug facilities are currently disabled and
have been so since the target device/sub-system booted/started.</t>
        </section>
        <section anchor="disabled-permanently" numbered="true" toc="default">
          <name>Disabled Permanently</name>
          <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer cannot enable them. Only
the manufacturer indicated in the OEMID claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
        </section>
        <section anchor="disabled-fully-and-permanently" numbered="true" toc="default">
          <name>Disabled Fully and Permanently</name>
          <t>This level indicates that all debug capabilities for the target
device/sub-module are permanently disabled.</t>
        </section>
        <section anchor="debug-status-cddl" numbered="true" toc="default">
          <name>debug-status CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
debug-status-cbor-type = &(
    enabled: 0,
    disabled: 1,
    disabled-since-boot: 2,
    disabled-permanently: 3,
    disabled-fully-and-permanently: 4
)

debug-status-json-type = 
    "enabled" /
    "disabled" /
    "disabled-since-boot" /
    "disabled-permanently" /
    "disabled-fully-and-permanently"

debug-status-claim = (
    debug-status => debug-status-cbor-type / debug-status-json-type
)
]]></sourcecode>
        </section>
      </section>
      <section anchor="including-keys" numbered="true" toc="default">
        <name>Including Keys</name>
        <t>An EAT may include a cryptographic key such as a public key.
The signing of the EAT binds the key to all the other claims in the token.</t>
        <t>The purpose for inclusion of the key may vary by use case.
For example, the key may be included as part of an IoT device onboarding protocol.
When the FIDO protocol includes a pubic key in its attestation message, the key represents the binding of a user, device and relying party.
This document describes how claims containing keys should be defined for the various use cases.
It does not define specific claims for specific use cases.</t>
        <t>Keys in CBOR format tokens SHOULD be the COSE_Key format <xref target="RFC8152" format="default"/> and keys in JSON format tokens SHOULD be the JSON Web Key format <xref target="RFC7517" format="default"/>.
These two formats support many common key types.
Their use avoids the need to decode other serialization formats.
These two formats can be extended to support further key types through their IANA registries.</t>
        <t>The general confirmation claim format <xref target="RFC8747" format="default"/>, <xref target="RFC7800" format="default"/> may also be used.
It provides key encryption. 
It also allows for inclusion by reference through a key ID.
The confirmation claim format may employed in the definition of some new claim for a a particular use case.</t>
        <t>When the actual confirmation claim is included in an EAT, this document associates no use case semantics other than proof of posession.
Different EAT use cases may choose to associate further semantics.
The key in the confirmation claim MUST be protected the same as the key used to sign the EAT. 
That is, the same, equivalent or better hardware defenses, access controls, key generation and such must be used.</t>
      </section>
      <section anchor="the-location-claim-location" numbered="true" toc="default">
        <name>The Location Claim (location)</name>
        <t>The location claim gives the location of the device entity from which the attestation originates.
It is derived from the W3C Geolocation API <xref target="W3C.GeoLoc" format="default"/>.
The latitude, longitude, altitude and accuracy must conform to <xref target="WGS84" format="default"/>.
The altitude is in meters above the <xref target="WGS84" format="default"/> ellipsoid.
The two accuracy values are positive numbers in meters.
The heading is in degrees relative to true north.
If the device is stationary, the heading is NaN (floating-point not-a-number).
The speed is the horizontal component of the device velocity in meters per second.</t>
        <t>When encoding floating-point numbers half-precision should not be used.
It usually does not provide enough precision for a geographic location.
It is not a requirement that the receiver of an EAT implement half-precision, so the receiver may not be able to decode the location.</t>
        <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.</t>
        <t>The age data item can be used when the entity doesn't know what time
it is either because it doesn't have a clock or it isn't set. The
entity must still have a "ticker" that can measure a time
interval. The age is the interval between acquisition of the location
data and token creation.</t>
        <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations" format="default"/> below.</t>
        <section anchor="location-cddl" numbered="true" toc="default">
          <name>location CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude = 1 / "latitude"
longitude = 2 / "longitude"
altitude = 3 / "altitude"
accuracy = 4 / "accuracy"
altitude-accuracy = 5 / "altitude-accuracy"
heading = 6 / "heading"
speed = 7 / "speed"
timestamp = 8 / "timestamp"
age = 9 / "age"

location-claim = (
    location-label => location-type
)
]]></sourcecode>
        </section>
      </section>
      <section anchor="the-uptime-claim-uptime" numbered="true" toc="default">
        <name>The Uptime Claim (uptime)</name>
        <t>The "uptime" claim contains a value that represents the number of
seconds that have elapsed since the entity or submod was last booted.</t>
        <section anchor="uptime-cddl" numbered="true" toc="default">
          <name>uptime CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
uptime-claim = (
    uptime => uint
)
]]></sourcecode>
        </section>
      </section>
      <section anchor="the-boot-seed-claim-boot-seed" numbered="true" toc="default">
        <name>The Boot Seed Claim (boot-seed)</name>
        <t>The Boot Seed claim is a random value created at system boot time that will allow differentiation of reports from different boot sessions.
This value is usually public and not protected.
It is not the same as a seed for a random number generator which must be kept secret.</t>
        <sourcecode type="CDDL"><![CDATA[
boot-seed-claim = (
    boot-seed => bytes
)
]]></sourcecode>
      </section>
      <section anchor="the-intended-use-claim-intended-use" numbered="true" toc="default">
        <name>The Intended Use Claim (intended-use)</name>
        <t>EAT's may be used in the context of several different applications.  The intended-use
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it uses EAT.</t>
        <dl>
          <dt>
1 -- Generic  </dt>
          <dd>
            <t>Generic attestation describes an application where the EAT consumer
requres the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
          </dd>
          <dt>
2-- Registration  </dt>
          <dd>
            <t>Entities that are registering for a new service may be expected to 
provide an attestation as part of the registration process.  This intended-use
setting indicates that the attestation is not intended for any use but registration.</t>
          </dd>
          <dt>
3 -- Provisioning  </dt>
          <dd>
            <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess device security state of the entity prior to provisioning.</t>
          </dd>
          <dt>
4 -- Certificate Issuance (Certificate Signing Request)  </dt>
          <dd>
            <t>Certifying authorities (CA's) may require attestations prior to
the issuance of certificates related to keypairs hosted at the entity.  An
EAT may be used as part of the certificate signing request (CSR).</t>
          </dd>
          <dt>
5 -- Proof-of-Possession  </dt>
          <dd>
            <t>An EAT consumer may require an attestation as part of an accompanying 
proof-of-possession (PoP) appication. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has posession
of a key.  This kind of attestation may be neceesary to verify the
security state of the entity storing the private key used in a PoP application.</t>
          </dd>
        </dl>
        <section anchor="intended-use-cddl" numbered="true" toc="default">
          <name>intended-use CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
intended-use-cbor-type = &(
    generic: 1,
    registration: 2,
    provisioning: 3,
    csr: 4,
    pop:  5
)

intended-use-json-type = 
    "generic" /
    "registration" /
    "provisioning" /
    "csr" /
    "pop" 

intended-use-claim = (
    intended-use => intended-use-cbor-type / intended-use-json-type
)
]]></sourcecode>
        </section>
      </section>
      <section anchor="profile-claim" numbered="true" toc="default">
        <name>The Profile Claim (profile)</name>
        <t>See <xref target="profiles" format="default"/> for the detailed description of a profile.</t>
        <t>A profile is identified by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the profile claim is to uniquely identify the profile even if it is a private profile.</t>
        <t>The OID is encoded in CBOR according to <xref target="CBOR-OID" format="default"/> and the URI according to <xref target="RFC8949" format="default"/>.
Both are unwrapped and thus not tags.
The OID is always absolute and never relative.
If the claims CBOR type is a text string it is a URI and if a byte string it is an OID.</t>
        <t>Note that this named "eat_profile" for JWT and is distinct from the already registered "profile" claim in the JWT claims registry.</t>
        <sourcecode type="CDDL"><![CDATA[
oid = #6.4000(bstr) ; TODO: fill this in with correct CDDL from OID RFC

profile-claim = (
    profile => ~uri / ~oid
)
]]></sourcecode>
      </section>
      <section anchor="the-software-manifests-claim-manifests" numbered="true" toc="default">
        <name>The Software Manifests Claim (manifests)</name>
        <t>This claim contains descriptions of software that is present on the device.
These manifests are installed on the device when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the device, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is that they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the Verifier and/or the Relying Party.</t>
        <t>In some cases these will be signed by the software manufacturer independent of any signing for the purpose of EAT attestation.
Manifest claims should include the manufacturer's signature (which will be signed over  by the attestation signature).
In other cases the attestation signature will be the only one.</t>
        <t>This claim allows multiple formats for the manifest.
For example the manifest may be a CBOR-format CoSWID, an XML-format SWID or other.
Identification of the type of manifest is always by a CBOR tag.
In many cases, for examples CoSWID, a tag will already be registered with IANA.
If not, a tag MUST be registered.
It can be in the first-come-first-served space which has minimal requirements for registration.</t>
        <t>The claim is an array of one or more manifests.
To facilitate hand off of the manifest to a decoding library, each manifest is contained in a byte string.
This occurs for CBOR-format manifests as well as non-CBOR format manifests.</t>
        <t>If a particular manifest type uses CBOR encoding, then the item in the array for it MUST be a byte string that contains a CBOR tag.
The EAT decoder must decode the byte string and then the CBOR within it to find the tag number to identify the type of manifest.
The contents of the byte string is then handed to the particular manifest processor for that type of manifest.
CoSWID and SUIT manifest are examples of this.</t>
        <t>If a particular manifest type does not use CBOR encoding, then the item in the array for it must be a CBOR tag that contains a byte string.
The EAT decoder uses the tag to identify the processor for that type of manifest.
The contents of the tag, the byte string, are handed to the manifest processor.
Note that a byte string is used to contain the manifest whether it is a text based format or not.
An example of this is an XML format ISO/IEC 19770 SWID.</t>
        <t>It is not possible to describe the above requirements in CDDL so the type for an individual manifest is any in the CDDL below.
The above text sets the encoding requirement.</t>
        <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests may be of multiple formats.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
        <t>When the <xref target="CoSWID" format="default"/> format is used, it MUST be a payload CoSWID, not an evidence CoSWID.</t>
        <sourcecode type="CDDL"><![CDATA[
manifests-claim = (
    manifests => manifests-type
)

manifests-type = [+ $manifest-formats]

; Must be a CoSWID payload type
$manifest-formats /= bytes .cbor concise-swid-tag

$manifest-formats /= bytes .cbor SUIT_Envelope_Tagged

]]></sourcecode>
      </section>
      <section anchor="the-software-evidence-claim-swevidence" numbered="true" toc="default">
        <name>The Software Evidence Claim {swevidence}</name>
        <t>This claim contains descriptions, lists, evidence or measurements of the software that exists on the device.
The defining characteristic of this claim is that its contents are created by processes on the device that inventory, measure or otherwise characterize the software on the device.
The contents of this claim do not originate from the software manufacturer.</t>
        <t>In most cases the contents of this claim are signed as part of attestation signing, but independent signing in addition to the attestation signing is not ruled out when a particular evidence format supports it.</t>
        <t>This claim uses the same mechanism for identification of the type of the swevidence as is used for the type of the manifest in the manifests claim.
It also uses the same byte string based mechanism for containing the claim and easing the hand off to a processing library.
See the discussion above in the manifests claim.</t>
        <t>When the <xref target="CoSWID" format="default"/> format is used, it MUST be evidence CoSWIDs, not payload CoSWIDS.</t>
        <sourcecode type="CDDL"><![CDATA[
swevidence-claim = (
    swevidence => swevidence-type
)

swevidence-type = [+ $swevidence-formats]

; Must be a CoSWID evidence type
$swevidence-formats /= bytes .cbor concise-swid-tag

]]></sourcecode>
      </section>
      <section anchor="the-submodules-part-of-a-token-submods" numbered="true" toc="default">
        <name>The Submodules Part of a Token (submods)</name>
        <t>Some devices are complex, having many subsystems or submodules.  A
mobile phone is a good example. It may have several connectivity
submodules for communications (e.g., Wi-Fi and cellular). It may have
subsystems for low-power audio and video playback. It may have one or
more security-oriented subsystems like a TEE or a Secure Element.</t>
        <t>The claims for each these can be grouped together in a submodule.</t>
        <t>The submods part of a token are in a single map/object with many entries, one
per submodule.  There is only one submods map in a token. It is
identified by its specific label. It is a peer to other claims, but it
is not called a claim because it is a container for a claim set rather
than an individual claim. This submods part of a token allows what
might be called recursion. It allows claim sets inside of claim sets
inside of claims sets...</t>
        <section anchor="two-types-of-submodules" numbered="true" toc="default">
          <name>Two Types of Submodules</name>
          <t>Each entry in the submod map is one of two types:</t>
          <ul spacing="normal">
            <li>A non-token submodule that is a map or object directly containing claims for the submodule.</li>
            <li>A nested EAT that is a fully formed, independently signed EAT token</li>
          </ul>
          <section anchor="non-token-submodules" numbered="true" toc="default">
            <name>Non-token Submodules</name>
            <t>This is simply a map or object containing claims about the submodule.</t>
            <t>It may contain claims that are the same as its surrounding token or superior submodules. 
For example, the top-level of the token may have a UEID, a submod may have a different UEID and a further subordinate submodule may also have a UEID.</t>
            <t>It is signed/encrypted along with the rest of the token and thus the claims are secured by the same Attester with the same signing key as the rest of the token.</t>
            <t>If a token is in CBOR format (a CWT or a UCCS), all non-token submodules must be CBOR format.
If a token in in JSON format (a JWT), all non-token submodules must be in JSON format.</t>
            <t>When decoding, this type of submodule is recognized from the other type by being a data item of type map for CBOR or type object for JSON.</t>
          </section>
          <section anchor="nested-eats" numbered="true" toc="default">
            <name>Nested EATs</name>
            <t>This type of submodule is a fully formed secured EAT as defined in this document except that it MUST NOT be a UCCS or an unsecured JWT.
A nested token that is one that is always secured using COSE or JOSE, usually by an independent Attester.
When the surrounding EAT is a CWT or secured JWT, the nested token becomes securely bound with the other claims in the surrounding token.</t>
            <t>It is allowed to have a CWT as a submodule in a JWT and vice versa, but this SHOULD be avoided unless necessary.</t>
            <section anchor="surrounding-eat-is-cbor-format" numbered="true" toc="default">
              <name>Surrounding EAT is CBOR format</name>
              <t>They type of an EAT nested in a CWT is determined by whether the CBOR type is a text string or a byte string.
If a text string, then it is a JWT.
If a byte string, then it is a CWT.</t>
              <t>A CWT nested in a CBOR-format token is always wrapped by a byte string for easier handling with standard CBOR decoders and token processing APIs that will typically take a byte buffer as input.</t>
              <t>Nested CWTs may be either a CWT CBOR tag or a CWT Protocol Message.
COSE layers in nested CWT EATs MUST be a COSE_Tagged_Message, never a COSE_Untagged_Message.
If a nested EAT has more than one level of COSE, for example one that is both encrypted and signed, a COSE_Tagged_message must be used at every level.</t>
            </section>
            <section anchor="surrounding-eat-is-json-format" numbered="true" toc="default">
              <name>Surrounding EAT is JSON format</name>
              <t>When a CWT is nested in a JWT, it must be as a 55799 tag in order to distinguish it from a nested JWT.</t>
              <t>When a nested EAT in a JWT is decoded, first remove the base64url encoding.
Next, check to see if it starts with the bytes 0xd9d9f7.
If so, then it is a CWT as a JWT will never start with these four bytes. 
If not if it is a JWT.</t>
              <t>Other than the 55799 tag requirement, tag usage for CWT's nested in a JSON format token follow the same rules as for CWTs nested in CBOR-format tokens.
It may be a CWT CBOR tag or a CWT Protocol Message and COSE_Tagged_Message MUST be used at all COSE layers.</t>
            </section>
          </section>
          <section anchor="unsecured-jwts-and-uccs-tokens-as-submodules" numbered="true" toc="default">
            <name>Unsecured JWTs and UCCS Tokens as Submodules</name>
            <t>To incorporate a UCCS token as a submodule, it MUST be as a non-token submodule. 
This can be accomplished inserting the content of the UCCS Tag into the submodule map.
The content of a UCCS tag is exactly a map of claims as required for a non-token submodule.
If the UCCS is not a UCCS tag, then it can just be inserted into the submodule map directly.</t>
            <t>The definition of a nested EAT type of submodule is that it is one that is secured (signed) by an Attester.
Since UCCS tokens are unsecured, they do not fulfill this definition and must be non-token submodules.</t>
            <t>To incorporate an Unsecured JWT as a submodule, the null-security JOSE wrapping should be removed.
The resulting claims set should be inserted as a non-token submodule.</t>
            <t>To incorporate a UCCS token in a surrounding JSON token, the UCCS token claims should be translated from CBOR to JSON.
To incorporate an Unsecured JWT into a surrounding CBOR-format token, the null-security JOSE should be removed and the claims translated from JSON to CBOR.</t>
          </section>
        </section>
        <section anchor="no-inheritance" numbered="true" toc="default">
          <name>No Inheritance</name>
          <t>The subordinate modules do not inherit anything from the containing
token.  The subordinate modules must explicitly include all of their
claims. This is the case even for claims like the nonce and age.</t>
          <t>This rule is in place for simplicity. It avoids complex inheritance
rules that might vary from one type of claim to another.</t>
        </section>
        <section anchor="security-levels" numbered="true" toc="default">
          <name>Security Levels</name>
          <t>The security level of the non-token subordinate modules should always
be less than or equal to that of the containing modules in the case of non-token
submodules. It makes no sense for a module of lesser security to be
signing claims of a module of higher security. An example of this is a
TEE signing claims made by the non-TEE parts (e.g. the high-level OS)
of the device.</t>
          <t>The opposite may be true for the nested tokens. They usually have
their own more secure key material. An example of this is an embedded
secure element.</t>
        </section>
        <section anchor="submodule-names" numbered="true" toc="default">
          <name>Submodule Names</name>
          <t>The label or name for each submodule in the submods map is a text
string naming the submodule. No submodules may have the same name.</t>
        </section>
        <section anchor="submods-cddl" numbered="true" toc="default">
          <name>submods CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
; The part of a token that contains all the submodules.  It is a peer
; with the claims in the token, but not a claim, only a map/object to
; hold all the submodules.

submods-part = (
    submods => submods-type
)

submods-type = { + submod-type }


; The type of a submodule which can either be a nested claim set or a
; nested separately signed token. Nested tokens are wrapped in a bstr
; or a tstr.

submod-type = (
    submod-name => eat-claim-set / nested-token
)


; When this is a bstr, the contents are an eat-token in CWT or UCCS
; format.  When this is a tstr, the contents are an eat-token in JWT
; format.

nested-token = bstr / tstr; 


; Each submodule has a unique text string name.

submod-name = tstr 


]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="keyid" numbered="true" toc="default">
      <name>Endorsements and Verification Keys</name>
      <t>The Verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture" format="default"/> describes what is called an Endorsement.
This is an input to the Verifier that is usually the basis of the trust placed in an EAT and the Attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain Reference Values to which EAT claims are compared as part of the verification process.
It may contain implied claims, those that are passed on to the Relying Party in Attestation Results.</t>
      <t>There is not yet any standard format(s) for an Endorsement.
One format that may be used for an Endorsement is an X.509 certificate.
Endorsement data like Reference Values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the Endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an Endorsement.</t>
      <t>For the components (Attester, Verifier, Relying Party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <section anchor="identification-methods" numbered="true" toc="default">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes Endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for Endorsements in other formats. If such an Endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id" numbered="true" toc="default">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC8152" format="default"/> and <xref target="RFC7515" format="default"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters" numbered="true" toc="default">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft" format="default"/> and JSON Web Siganture <xref target="RFC7515" format="default"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an Endorsement and thus carrying additional input to the Verifier. It may be just an X.509 certificate, not an Endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the Verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters" numbered="true" toc="default">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft" format="default"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification" numbered="true" toc="default">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the device and therefore can work well as a key identifier or Endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
      <section anchor="other-considerations" numbered="true" toc="default">
        <name>Other Considerations</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the Verifier may be configured with a root certificate or a master key by the Verifier system administrator.</t>
        <t>Often an X.509 certificate or an Endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints and an Endorsement might have Reference Values.
When this is the case, the key identifier must be either a protected header or in the payload such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515" format="default"/>.</t>
      </section>
    </section>
    <section anchor="profiles" numbered="true" toc="default">
      <name>Profiles</name>
      <t>This EAT specification does not gaurantee that implementations of it will interoperate.
The variability in this specification is necessary to accommodate the widely varying use cases.
An EAT profile narrows the specification for a specific use case.
An ideal EAT profile will gauarantee interoperability.</t>
      <t>The profile can be named in the token using the profile claim described in <xref target="profile-claim" format="default"/>.</t>
      <section anchor="format-of-a-profile-document" numbered="true" toc="default">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>In some cases CDDL may be created that replaces CDDL in this or other document to express some profile requirements.
For example, to require the altitude data item in the location claim, CDDL can be written that replicates the location claim with the altitude no longer optional.</t>
      </section>
      <section anchor="list-of-profile-issues" numbered="true" toc="default">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, UCCS, JWS, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both" numbered="true" toc="default">
          <name>Use of JSON, CBOR or both</name>
          <t>The profile should indicate whether the token format should be CBOR, JSON, both or even some other encoding.
If some other encoding, a specification for how the CDDL described here is serialized in that encoding is necessary.</t>
          <t>This should be addressed for the top-level token and for any nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding" numbered="true" toc="default">
          <name>CBOR Map and Array Encoding</name>
          <t>The profile should indicate whether definite-length arrays/maps, indefinite-length arrays/maps or both are allowed.
A good default is to allow only definite-length arrays/maps.</t>
          <t>An alternate is to allow both definite and indefinite-length arrays/maps.
The decoder should accept either.
Encoders that need to fit on very small hardware or be actually implement in hardware can use indefinite-length encoding.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
        </section>
        <section anchor="cbor-string-encoding" numbered="true" toc="default">
          <name>CBOR String Encoding</name>
          <t>The profile should indicate whether definite-length strings, indefinite-length strings or both are allowed.
A good default is to allow only definite-length strings.
As with map and array encoding, allowing indefinite-length strings can be beneficial for some smaller implementations.</t>
        </section>
        <section anchor="cbor-preferred-serialization" numbered="true" toc="default">
          <name>CBOR Preferred Serialization</name>
          <t>The profile should indicate whether encoders must use preferred serialization.
The profile should indicate whether decoders must accept non-preferred serialization.</t>
        </section>
        <section anchor="cosejose-protection" numbered="true" toc="default">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
EAT/CWT has the option to have no protection using UCCS and JOSE has a NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, CWT and UCCS are allowed by EAT.</t>
          <t>The profile should list the protections that must be supported by all decoders implementing the profile.
The encoders them must implement a subset of what is listed for the decoders, perhaps only one.</t>
          <t>Implementations may choose to sign or MAC before encryption so that the implementation layer doing the signing or MACing can be the smallest.
It is often easier to make smaller implementations more secure, perhaps even implementing in solely in hardware.
The key material for a signature or MAC is a private key, while for encryption it is likely to be a public key.
The key for encryption requires less protection.</t>
        </section>
        <section anchor="cosejose-algorithms" numbered="true" toc="default">
          <name>COSE/JOSE Algorithms</name>
          <t>The profile document should list the COSE algorithms that a Verifier must implement.
The Attester will select one of them. 
Since there is no negotiation, the Verifier should implement all algorithms listed in the profile.</t>
        </section>
        <section anchor="verification-key-identification" numbered="true" toc="default">
          <name>Verification Key Identification</name>
          <t>Section <xref target="keyid" format="default"/> describes a number of methods for identifying a verification key.
The profile document should specify one of these or one that is not described.
The ones described in this document are only roughly described.
The profile document should go into the full detail.</t>
        </section>
        <section anchor="endorsement-identification" numbered="true" toc="default">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as Verification Key Identification, the profile may wish to specify how Endorsements are to be identified.
However note that Endorsement Identification is optional, where as key identification is not.</t>
        </section>
        <section anchor="freshness" numbered="true" toc="default">
          <name>Freshness</name>
          <t>Just about every use case will require some means of knowing the EAT is recent enough and not a replay of an old token.
The profile should describe how freshness is achieved.
The section on Freshness in <xref target="RATS-Architecture" format="default"/> describes some of the possible solutions to achieve this.</t>
        </section>
        <section anchor="required-claims" numbered="true" toc="default">
          <name>Required Claims</name>
          <t>The profile can list claims whose absence results in Verification failure.</t>
        </section>
        <section anchor="prohibited-claims" numbered="true" toc="default">
          <name>Prohibited Claims</name>
          <t>The profile can list claims whose presence results in Verification failure.</t>
        </section>
        <section anchor="additional-claims" numbered="true" toc="default">
          <name>Additional Claims</name>
          <t>The profile may describe entirely new claims.
These claims can be required or optional.</t>
        </section>
        <section anchor="refined-claim-definition" numbered="true" toc="default">
          <name>Refined Claim Definition</name>
          <t>The profile may lock down optional aspects of individual claims.
For example, it may require altitude in the location claim, or it may require that HW Versions always be described using EAN-13.</t>
        </section>
        <section anchor="cbor-tags" numbered="true" toc="default">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.
Similarly, the profile should specify whether the token should be a UCCS tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unncessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="manifests-and-software-evidence-claims" numbered="true" toc="default">
          <name>Manifests and Software Evidence Claims</name>
          <t>The profile should specify which formats are allowed for the manifests and software evidence claims.
The profile may also go on to say which parts and options of these formats are used, allowed and prohibited.</t>
        </section>
      </section>
    </section>
    <section anchor="encoding" numbered="true" toc="default">
      <name>Encoding</name>
      <t>This makes use of the types defined in CDDL Appendix D, Standard Prelude.</t>
      <t>Some of the CDDL included here is for claims that are defined in CWT <xref target="RFC8392" format="default"/> or JWT <xref target="RFC7519" format="default"/> or are in the IANA CWT or JWT registries.
CDDL was not in use when these claims where defined.</t>
      <section anchor="common-cddl-types" numbered="true" toc="default">
        <name>Common CDDL Types</name>
        <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
        <t>Note that unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949" format="default"/>.
They are just text strings that contain a URI.</t>
        <sourcecode type="CDDL"><![CDATA[
string-or-uri = tstr 

time-int = #6.1(int)
]]></sourcecode>
      </section>
      <section anchor="cddl-for-cwt-defined-claims" numbered="true" toc="default">
        <name>CDDL for CWT-defined Claims</name>
        <t>This section provides CDDL for the claims defined in CWT. It is
non-normative as <xref target="RFC8392" format="default"/> is the authoritative definition of these
claims.</t>
        <t>Note that the subject, issue and audience claims may be a text string containing a URI per <xref target="RFC8392" format="default"/> and <xref target="RFC7519" format="default"/>.
These are never the URI tag defined in <xref target="RFC8949" format="default"/>.</t>
        <sourcecode type="CDDL"><![CDATA[
$$eat-extension //= (
    ? issuer => text,
    ? subject => text,
    ? audience => text,
    ? expiration => time,
    ? not-before => time,
    ? issued-at => time,
    ? cwt-id => bytes,
)

issuer = 1
subject = 2
audience = 3
expiration = 4
not-before = 5
issued-at = 6
cwt-id = 7

]]></sourcecode>
      </section>
      <section anchor="json" numbered="true" toc="default">
        <name>JSON</name>
        <section anchor="json-labels" numbered="true" toc="default">
          <name>JSON Labels</name>
          <sourcecode type="JSON"><![CDATA[
; The following are Claim Keys (labels) assigned for JSON-encoded tokens.

ueid /= "ueid"
sueids /= "sueids"
nonce /= "nonce"
oemid /= "oemid"
security-level /= "seclevel"
secure-boot /= "secboot"
debug-status /= "dbgstat"
location /= "location"
uptime /= "uptime"
profile /= "eat-profile"
intended-use /= "intuse"
boot-seed /= "bootseed"
submods /= "submods"
timestamp /= "timestamp"
manifests /= "manifests"
swevidence /= "swevidence"

latitude /= "lat"
longitude /= "long"
altitude /= "alt"
accuracy /= "accry"
altitude-accuracy /= "alt-accry"
heading /= "heading"
speed /= "speed"
]]></sourcecode>
        </section>
        <section anchor="jsoninterop" numbered="true" toc="default">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per RFC 8610 Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- must be base64url encoded</li>
            <li>time -- must be encoded as NumericDate as described section 2 of <xref target="RFC7519" format="default"/>.</li>
            <li>string-or-uri -- must be encoded as StringOrURI as described section 2 of <xref target="RFC7519" format="default"/>.</li>
            <li>uri -- must be a URI <xref target="RFC3986" format="default"/>.</li>
            <li>oid -- encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1").</li>
          </ul>
        </section>
      </section>
      <section anchor="cbor" numbered="true" toc="default">
        <name>CBOR</name>
        <section anchor="cbor-interoperability" numbered="true" toc="default">
          <name>CBOR Interoperability</name>
          <t>CBOR allows data items to be serialized in more than one form.
If the sender uses a form that the receiver can't decode, there will not be interoperability.</t>
          <t>This specification gives no blanket requirements to narrow CBOR serialization for all uses of EAT.
This allows individual uses to tailor serialization to the environment.
It also may result in EAT implementations that don't interoperate.</t>
          <t>One way to guarantee interoperability is to clearly specify CBOR serialization in a profile document.
See <xref target="profiles" format="default"/> for a list of serialization issues that should be addressed.</t>
          <t>EAT will be commonly used where the device generating the attestation is constrained and the receiver/verifier of the attestation is a capacious server.
Following is a set of serialization requirements that work well for that use case and are guaranteed to interoperate.
Use of this serialization is recommended where possible, but not required.
An EAT profile may just reference the following section rather than spell out serialization details.</t>
          <section anchor="eat-constrained-device-serialization" numbered="true" toc="default">
            <name>EAT Constrained Device Serialization</name>
            <ul spacing="normal">
              <li>Preferred serialization described in section 4.1 of <xref target="RFC8949" format="default"/> is not required.
The EAT decoder must accept all forms of number serialization.
The EAT encoder may use any form it wishes.</li>
              <li>The EAT decoder must accept indefinite length arrays and maps as described in section 3.2.2 of <xref target="RFC8949" format="default"/>.
The EAT encoder may use indefinite length arrays and maps if it wishes.</li>
              <li>The EAT decoder must accept indefinite length strings as described in section 3.2.3 of <xref target="RFC8949" format="default"/>.
The EAT encoder may use indefinite length strings if it wishes.</li>
              <li>Sorting of maps by key is not required.
The EAT decoder must not rely on sorting.</li>
              <li>Deterministic encoding described in Section 4.2 of <xref target="RFC8949" format="default"/> is not required.</li>
              <li>Basic validity described in section 5.3.1 of <xref target="RFC8949" format="default"/> must be followed.
The EAT encoder must not send duplicate map keys/labels or invalid UTF-8 strings.</li>
            </ul>
          </section>
        </section>
      </section>
      <section anchor="collected-cddl" numbered="true" toc="default">
        <name>Collected CDDL</name>
        <sourcecode type="CDDL"><![CDATA[
; This is the top-level definition of the claims in EAT tokens.  To
; form an actual EAT Token, this claim set is enclosed in a COSE, JOSE
; or UCCS message.

eat-claim-set = {
    ? ueid-claim,
    ? sueids-claim,
    ? nonce-claim,
    ? oemid-claim,
    ? hardware-version-claims,
    ? security-level-claim,
    ? secure-boot-claim,
    ? debug-status-claim,
    ? location-claim,
    ? intended-use-claim,
    ? profile-claim,
    ? uptime-claim,
    ? manifests-claim,
    ? swevidence-claim,
    ? submods-part,
    * $$eat-extension,
}


; This is the top-level definition of an EAT Token.  It is a CWT, JWT
; or UCSS where the payload is an eat-claim-set. A JWT_Message is what
; is defined by JWT in RFC 7519. (RFC 7519 doesn't use CDDL so a there
; is no actual CDDL definition of JWT_Message).

eat-token = EAT_Tagged_Message / EAT_Untagged_Message / JWT_Message


; This is CBOR-format EAT token in the CWT or UCCS format that is a
; tag.  COSE_Tagged_message is defined in RFC 8152.  Tag 601 is
; proposed by the UCCS draft, but not yet assigned.

EAT_Tagged_Message = #6.61(COSE_Tagged_Message) / #6.601(eat-claim-set)


; This is a CBOR-format EAT token that is a CWT or UCSS that is not a
; tag COSE_Tagged_message and COSE_Untagged_Message are defined in RFC
; 8152.

EAT_Untagged_Message = COSE_Tagged_Message / COSE_Untagged_Message / UCCS_Untagged_Message


; This is an "unwrapped" UCCS tag. Unwrapping a tag means to use the
; definition of its content without the preceding type 6 tag
; integer. Since a UCCS is nothing but a tag for an unsecured CWT
; claim set, unwrapping reduces to a bare eat-claim-set.

UCCS_Untagged_Message = eat-claim-set


string-or-uri = tstr 

time-int = #6.1(int)

$$eat-extension //= (
    ? issuer => text,
    ? subject => text,
    ? audience => text,
    ? expiration => time,
    ? not-before => time,
    ? issued-at => time,
    ? cwt-id => bytes,
)

issuer = 1
subject = 2
audience = 3
expiration = 4
not-before = 5
issued-at = 6
cwt-id = 7


debug-status-cbor-type = &(
    enabled: 0,
    disabled: 1,
    disabled-since-boot: 2,
    disabled-permanently: 3,
    disabled-fully-and-permanently: 4
)

debug-status-json-type = 
    "enabled" /
    "disabled" /
    "disabled-since-boot" /
    "disabled-permanently" /
    "disabled-fully-and-permanently"

debug-status-claim = (
    debug-status => debug-status-cbor-type / debug-status-json-type
)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude = 1 / "latitude"
longitude = 2 / "longitude"
altitude = 3 / "altitude"
accuracy = 4 / "accuracy"
altitude-accuracy = 5 / "altitude-accuracy"
heading = 6 / "heading"
speed = 7 / "speed"
timestamp = 8 / "timestamp"
age = 9 / "age"

location-claim = (
    location-label => location-type
)

nonce-type = bstr .size (8..64)

nonce-claim = (
    nonce => nonce-type / [ 2* nonce-type ]
)

oemid-claim = (
    oemid => bstr
)

hw-version-type = [
    version:  tstr,
    scheme:  $version-scheme
]

chip-version-claim = (
    chip-version => hw-version-type
)

board-version-claim = (
    board-version => hw-version-type
)

device-version-claim = (
    device-version => hw-version-type
)

hardware-version-claims = (
    ? chip-version-claim,
    ? board-version-claim,
    ? device-version-claim,
)


secure-boot-claim = (
    secure-boot => bool
)

security-level-cbor-type = &(
    unrestricted: 1,
    restricted: 2,
    secure-restricted: 3,
    hardware: 4
)

security-level-json-type = 
    "unrestricted" /
    "restricted" /
    "secure-restricted" /
    "hardware"

security-level-claim = (
    security-level => security-level-cbor-type / security-level-json-type
)

; The part of a token that contains all the submodules.  It is a peer
; with the claims in the token, but not a claim, only a map/object to
; hold all the submodules.

submods-part = (
    submods => submods-type
)

submods-type = { + submod-type }


; The type of a submodule which can either be a nested claim set or a
; nested separately signed token. Nested tokens are wrapped in a bstr
; or a tstr.

submod-type = (
    submod-name => eat-claim-set / nested-token
)


; When this is a bstr, the contents are an eat-token in CWT or UCCS
; format.  When this is a tstr, the contents are an eat-token in JWT
; format.

nested-token = bstr / tstr; 


; Each submodule has a unique text string name.

submod-name = tstr 



ueid-type = bstr .size (7..33)

ueid-claim = (
     ueid => ueid-type
)

sueids-type = {
    + tstr => ueid-type
}

sueids-claim = (
     sueids => sueids-type
)

intended-use-cbor-type = &(
    generic: 1,
    registration: 2,
    provisioning: 3,
    csr: 4,
    pop:  5
)

intended-use-json-type = 
    "generic" /
    "registration" /
    "provisioning" /
    "csr" /
    "pop" 

intended-use-claim = (
    intended-use => intended-use-cbor-type / intended-use-json-type
)

oid = #6.4000(bstr) ; TODO: fill this in with correct CDDL from OID RFC

profile-claim = (
    profile => ~uri / ~oid
)

uptime-claim = (
    uptime => uint
)

manifests-claim = (
    manifests => manifests-type
)

manifests-type = [+ $manifest-formats]

; Must be a CoSWID payload type
$manifest-formats /= bytes .cbor concise-swid-tag

$manifest-formats /= bytes .cbor SUIT_Envelope_Tagged


swevidence-claim = (
    swevidence => swevidence-type
)

swevidence-type = [+ $swevidence-formats]

; Must be a CoSWID evidence type
$swevidence-formats /= bytes .cbor concise-swid-tag


; The following Claim Keys (labels) are pre-assigned by IANA.
; They are for CBOR-based tokens (CWT and UCCS).
; They are not expected to change in the final publication as an RFC.

nonce = 10
ueid = 11
oemid = 13
security-level = 14
secure-boot = 15
debug-status = 16
location-label = 17
profile = 18
submods = 20


boot-seed-claim = (
    boot-seed => bytes
)

; The following are Claim Keys (labels) assigned for JSON-encoded tokens.

ueid /= "ueid"
sueids /= "sueids"
nonce /= "nonce"
oemid /= "oemid"
security-level /= "seclevel"
secure-boot /= "secboot"
debug-status /= "dbgstat"
location /= "location"
uptime /= "uptime"
profile /= "eat-profile"
intended-use /= "intuse"
boot-seed /= "bootseed"
submods /= "submods"
timestamp /= "timestamp"
manifests /= "manifests"
swevidence /= "swevidence"

latitude /= "lat"
longitude /= "long"
altitude /= "alt"
accuracy /= "accry"
altitude-accuracy /= "alt-accry"
heading /= "heading"
speed /= "speed"

]]></sourcecode>
      </section>
    </section>
    <section anchor="iana-considerations" numbered="true" toc="default">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-web-token-cwt-claims-registry" numbered="true" toc="default">
        <name>Reuse of CBOR Web Token (CWT) Claims Registry</name>
        <t>Claims defined for EAT are compatible with those of CWT
so the CWT Claims Registry is re used. No new IANA registry
is created. All EAT claims should be registered in the
CWT and JWT Claims Registries.</t>
      </section>
      <section anchor="claim-characteristics" numbered="true" toc="default">
        <name>Claim Characteristics</name>
        <t>The following is design guidance for creating new EAT claims, particularly those to be registered with IANA.</t>
        <t>Much of this guidance is generic and could also be considered when designing new CWT or JWT claims.</t>
        <section anchor="interoperability-and-relying-party-orientation" numbered="true" toc="default">
          <name>Interoperability and Relying Party Orientation</name>
          <t>It is a broad goal that EATs can be processed by relying parties in a general way regardless of the type, manufacturer or technology of the device from which they originate. 
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
          <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
        </section>
        <section anchor="operating-system-and-technology-neutral" numbered="true" toc="default">
          <name>Operating System and Technology Neutral</name>
          <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
          <t>Claims should not be defined such that they are specific to a SW environment or programming language.</t>
          <t>Claims should not be defined such that they are specific to a chip or particular hardware. 
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
          <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
        </section>
        <section anchor="security-level-neutral" numbered="true" toc="default">
          <name>Security Level Neutral</name>
          <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists. 
Secure Elements and smart cards are examples of this. 
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
          <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
        </section>
        <section anchor="reuse-of-extant-data-formats" numbered="true" toc="default">
          <name>Reuse of Extant Data Formats</name>
          <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
          <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON format for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
          <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
        </section>
        <section anchor="proprietary-claims" numbered="true" toc="default">
          <name>Proprietary Claims</name>
          <t>EAT allows the definition and use of proprietary claims.</t>
          <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer. 
This is a supported use case.</t>
          <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
        </section>
      </section>
      <section anchor="claims-registered-by-this-document" numbered="true" toc="default">
        <name>Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519" format="default"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392" format="default"/>. Each entry below is an addition to both registries (except
for the nonce claim which is already registered for JWT, but not registered for CWT).</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <section anchor="claims-for-early-assignment" numbered="true" toc="default">
          <name>Claims for Early Assignment</name>
          <t>RFC Editor: in the final publication this section should be combined with the following
section as it will no longer be necessary to distinguish claims with early assignment.
Also, the following paragraph should be removed.</t>
          <t>The claims in this section have been (requested for / given) early assignment according to <xref target="RFC7120" format="default"/>.
They have been assigned values and registered before final publication of this document.
While their semantics is not expected to change in final publication, it is possible that they will.
The JWT Claim Names and CWT Claim Keys are not expected to change.</t>
          <ul spacing="normal">
            <li>Claim Name: Nonce</li>
            <li>Claim Description: Nonce</li>
            <li>JWT Claim Name: "nonce" (already registered for JWT)</li>
            <li>Claim Key: 10</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <xref target="OpenIDConnectCore" format="default"/>, <strong>this document</strong></li>
          </ul>
          <t>&nbsp;</t>
          <ul spacing="normal">
            <li>Claim Name: UEID</li>
            <li>Claim Description: The Universal Entity ID</li>
            <li>JWT Claim Name: "ueid"</li>
            <li>CWT Claim Key: 11</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t>&nbsp;</t>
          <ul spacing="normal">
            <li>Claim Name: OEMID</li>
            <li>Claim Description: IEEE-based OEM ID</li>
            <li>JWT Claim Name: "oemid"</li>
            <li>Claim Key: 13</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t>&nbsp;</t>
          <ul spacing="normal">
            <li>Claim Name: Security Level</li>
            <li>Claim Description: Characterization of the security of an Attester or submodule</li>
            <li>JWT Claim Name: "seclevel"</li>
            <li>Claim Key: 14</li>
            <li>Claim Value Type(s): integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t>&nbsp;</t>
          <ul spacing="normal">
            <li>Claim Name: Secure Boot</li>
            <li>Claim Description: Indicate whether the boot was secure</li>
            <li>JWT Claim Name: "secboot"</li>
            <li>Claim Key: 15</li>
            <li>Claim Value Type(s): Boolean</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t>&nbsp;</t>
          <ul spacing="normal">
            <li>Claim Name: Debug Status</li>
            <li>Claim Description: Indicate status of debug facilities</li>
            <li>JWT Claim Name: "dbgstat"</li>
            <li>Claim Key: 16</li>
            <li>Claim Value Type(s): integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t>&nbsp;</t>
          <ul spacing="normal">
            <li>Claim Name: Location</li>
            <li>Claim Description: The geographic location</li>
            <li>JWT Claim Name: "location"</li>
            <li>Claim Key: 17</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t>&nbsp;</t>
          <ul spacing="normal">
            <li>Claim Name: Profile</li>
            <li>Claim Description: Indicates the EAT profile followed</li>
            <li>JWT Claim Name: "eat_profile"</li>
            <li>Claim Key: 18</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t>&nbsp;</t>
          <ul spacing="normal">
            <li>Claim Name: Submodules Section</li>
            <li>Claim Description: The section containing submodules (not actually a claim)</li>
            <li>JWT Claim Name: "submods"</li>
            <li>Claim Key: 20</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="to-be-assigned-claims" numbered="true" toc="default">
          <name>To be Assigned Claims</name>
          <t>TODO: add the rest of the claims in here</t>
        </section>
        <section anchor="registerversionscheme" numbered="true" toc="default">
          <name>Version Schemes Registered by this Document</name>
          <t>IANA is requested to register a new value in the "Software Tag Version Scheme Values" established by <xref target="CoSWID" format="default"/>.</t>
          <t>The new value is a version scheme a 13-digit European Article Number <xref target="EAN-13" format="default"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.
This version scheme is the ASCII text representation of EAN-13 digits, the same ones often printed with a bar code.
This version scheme must comply with the EAN allocation and assignment rules.
For example, this requires the manufacturer to obtain a manufacture code from GS1.</t>
          <table align="center">
            <thead>
              <tr>
                <th align="left">Index</th>
                <th align="left">Version Scheme Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">5</td>
                <td align="left">ean-13</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations" numbered="true" toc="default">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations" numbered="true" toc="default">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Any set of relying parties
that receives tokens that happen to be from a single device will be
able to know the tokens are all from the same device and be able to
track the device. Thus, in many usage situations UEID violates
governmental privacy regulation. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The device obtains explicit permission from the user of the device
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one relying party.</li>
          <li>The device authenticates the relying party and generates a derived
UEID/SUEID just for that particular relying party.  For example, the relying
party could prove their identity cryptographically to the device, then
the device generates a UEID just for that relying party by hashing a
proofed relying party ID with the main device UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per device. Each UEID/SUEID is used in a
different context, use case or system on the device. However, from the
view of the relying party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations" numbered="true" toc="default">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the device generating the attestation.
For example, many mobile phones prompt the user for permission when before sending location data.</t>
      </section>
    </section>
    <section anchor="securitycons" numbered="true" toc="default">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392" format="default"/> and Section 11
of <xref target="RFC7519" format="default"/> apply to EAT in its CWT and JWT form, respectively.  In addition, 
implementors should consider the following.</t>
      <section anchor="key-provisioning" numbered="true" toc="default">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manfuacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949" format="default"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material" numbered="true" toc="default">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="transport-security" numbered="true" toc="default">
        <name>Transport Security</name>
        <t>As stated in Section 8 of <xref target="RFC8392" format="default"/>, "The security of the CWT relies
upon on the protections offered by COSE".  Similar considerations
apply to EAT when sent as a CWT.  However, EAT introduces the concept
of a nonce to protect against replay.  Since an EAT may be created by
an entity that may not support the same type of transport security as
the consumer of the EAT, intermediaries may be required to bridge
communications between the entity and consumer.  As a result, it is
RECOMMENDED that both the consumer create a nonce, and the entity
leverage the nonce along with COSE mechanisms for encryption and/or
signing to create the EAT.</t>
        <t>Similar considerations apply to the use of EAT as a JWT.  Although the
security of a JWT leverages the JSON Web Encryption (JWE) and JSON Web
Signature (JWS) specifications, it is still recommended to make use of
the EAT nonce.</t>
      </section>
      <section anchor="multiple-eat-consumers" numbered="true" toc="default">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer should leverage a secure protocol (e.g.one that
uses transport-layer security, i.e. TLS),</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then transport security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner">
              <organization/>
            </author>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC7515" target="https://www.rfc-editor.org/info/rfc7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC8949" target="https://www.rfc-editor.org/info/rfc8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman">
              <organization/>
            </author>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7517" target="https://www.rfc-editor.org/info/rfc7517">
          <front>
            <title>JSON Web Key (JWK)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key.  This specification also defines a JWK Set JSON data structure that represents a set of JWKs.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries established by that specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7517"/>
          <seriesInfo name="DOI" value="10.17487/RFC7517"/>
        </reference>
        <reference anchor="RFC7519" target="https://www.rfc-editor.org/info/rfc7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC7800" target="https://www.rfc-editor.org/info/rfc7800">
          <front>
            <title>Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="April" year="2016"/>
            <abstract>
              <t>This specification describes how to declare in a JSON Web Token (JWT) that the presenter of the JWT possesses a particular proof-of- possession key and how the recipient can cryptographically confirm proof of possession of the key by the presenter.  Being able to prove possession of a key is also sometimes described as the presenter being a holder-of-key.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7800"/>
          <seriesInfo name="DOI" value="10.17487/RFC7800"/>
        </reference>
        <reference anchor="RFC8126" target="https://www.rfc-editor.org/info/rfc8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <author fullname="T. Narten" initials="T." surname="Narten">
              <organization/>
            </author>
            <date month="June" year="2017"/>
            <abstract>
              <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="RFC8152" target="https://www.rfc-editor.org/info/rfc8152">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad">
              <organization/>
            </author>
            <date month="July" year="2017"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8152"/>
          <seriesInfo name="DOI" value="10.17487/RFC8152"/>
        </reference>
        <reference anchor="RFC8392" target="https://www.rfc-editor.org/info/rfc8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610" target="https://www.rfc-editor.org/info/rfc8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz">
              <organization/>
            </author>
            <author fullname="C. Vigano" initials="C." surname="Vigano">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8747" target="https://www.rfc-editor.org/info/rfc8747">
          <front>
            <title>Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="L. Seitz" initials="L." surname="Seitz">
              <organization/>
            </author>
            <author fullname="G. Selander" initials="G." surname="Selander">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="March" year="2020"/>
            <abstract>
              <t>This specification describes how to declare in a CBOR Web Token (CWT) (which is defined by RFC 8392) that the presenter of the CWT possesses a particular proof-of-possession key. Being able to prove possession of a key is also sometimes described as being the holder-of-key. This specification provides equivalent functionality to "Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)" (RFC 7800) but using Concise Binary Object Representation (CBOR) and CWTs rather than JavaScript Object Notation (JSON) and JSON Web Tokens (JWTs).</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8747"/>
          <seriesInfo name="DOI" value="10.17487/RFC8747"/>
        </reference>
        <reference anchor="RFC3986" target="https://www.rfc-editor.org/info/rfc3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee">
              <organization/>
            </author>
            <author fullname="R. Fielding" initials="R." surname="Fielding">
              <organization/>
            </author>
            <author fullname="L. Masinter" initials="L." surname="Masinter">
              <organization/>
            </author>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RATS.Architecture" target="https://tools.ietf.org/html/draft-ietf-rats-architecture-08">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz">
              <organization/>
            </author>
            <date year="2020"/>
          </front>
        </reference>
        <reference anchor="COSE.X509.Draft" target="https://tools.ietf.org/html/draft-ietf-cose-x509-08">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header parameters for carrying and referencing X.509 certificates</title>
            <author fullname="J. Schaad">
              <organization/>
            </author>
            <date year="2020"/>
          </front>
        </reference>
        <reference anchor="CBOR.Cert.Draft" target="https://tools.ietf.org/html/draft-mattsson-cose-cbor-cert-compress-05">
          <front>
            <title>CBOR Encoding of X.509 Certificates (CBOR Certificates)</title>
            <author fullname="S. Raza">
              <organization/>
            </author>
            <date year="2020"/>
          </front>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="UCCS.Draft" target="https://tools.ietf.org/html/draft-birkholz-rats-uccs-01">
          <front>
            <title>A CBOR Tag for Unprotected CWT Claims Sets</title>
            <author fullname="Henk Birkholz">
              <organization/>
            </author>
            <date year="2020"/>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="FIDO.AROE" target="https://fidoalliance.org/specs/fido-uaf-v1.0-fd-20191115/fido-allowed-AROE-v1.0-fd-20191115.html">
          <front>
            <title>FIDO Authenticator Allowed Restricted Operating Environments List</title>
            <author>
              <organization>The FIDO Alliance</organization>
            </author>
            <date year="2019" month="November"/>
          </front>
        </reference>
        <reference anchor="EAN-13" target="https://www.gs1.org/standards/barcodes/ean-upc">
          <front>
            <title>International Article Number - EAN/UPC barcodes</title>
            <author>
              <organization>GS1</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID" target="https://tools.ietf.org/html/draft-ietf-sacm-coswid-16">
          <front>
            <title>Concise Software Identification Tags</title>
            <author>
              <organization/>
            </author>
            <date year="2020" month="November"/>
          </front>
        </reference>
        <reference anchor="OpenIDConnectCore" target="https://openid.net/specs/openid-connect-core-1_0.html">
          <front>
            <title>OpenID Connect Core 1.0 incorporating errata set 1</title>
            <author fullname="N. Sakimura">
              <organization/>
            </author>
            <author fullname="J. Bradley">
              <organization/>
            </author>
            <author fullname="M. Jones">
              <organization/>
            </author>
            <author fullname="B. de Medeiros">
              <organization/>
            </author>
            <author fullname="C. Mortimore">
              <organization/>
            </author>
            <date year="2014" month="November"/>
          </front>
        </reference>
        <reference anchor="CBOR-OID" target="https://www.ietf.org/archive/id/draft-ietf-cbor-tags-oid-08.txt">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="Carsten Bormann">
              <organization>Universität Bremen TZI</organization>
            </author>
            <date day="21" month="May" year="2021"/>
            <abstract>
              <t>   The Concise Binary Object Representation (CBOR, RFC 8949) is a data
   format whose design goals include the possibility of extremely small
   code size, fairly small message size, and extensibility without the
   need for version negotiation.

   The present document defines CBOR tags for object identifiers (OIDs).
   It is intended as the reference document for the IANA registration of
   the CBOR tags so defined.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cbor-tags-oid-08"/>
        </reference>
        <reference anchor="RATS-Architecture" target="https://www.ietf.org/archive/id/draft-ietf-rats-architecture-12.txt">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="23" month="April" year="2021"/>
            <abstract>
              <t>   In network protocol exchanges it is often useful for one end of a
   communication to know whether the other end is in an intended
   operating state.  This document provides an architectural overview of
   the entities involved that make such tests possible through the
   process of generating, conveying, and evaluating evidentiary claims.
   An attempt is made to provide for a model that is neutral toward
   processor architectures, the content of claims, and protocols.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-12"/>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122" target="https://www.rfc-editor.org/info/rfc4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach">
              <organization/>
            </author>
            <author fullname="M. Mealling" initials="M." surname="Mealling">
              <organization/>
            </author>
            <author fullname="R. Salz" initials="R." surname="Salz">
              <organization/>
            </author>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4949" target="https://www.rfc-editor.org/info/rfc4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey">
              <organization/>
            </author>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120" target="https://www.rfc-editor.org/info/rfc7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC                        Required", "IETF Review", or "Standards Action" policies apply.  This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation.  The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">
          <front>
            <title>IEEE Standard, "IEEE 802.1AR Secure Device Identifier"</title>
            <author>
              <organization/>
            </author>
            <date year="2009" month="December"/>
          </front>
        </reference>
        <reference anchor="ECMAScript" target="http://www.ecma-international.org/ecma-262/5.1/ECMA-262.pdf">
          <front>
            <title>Ecma International, "ECMAScript Language Specification, 5.1 Edition", ECMA Standard 262</title>
            <author>
              <organization/>
            </author>
            <date year="2011" month="June"/>
          </front>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/geolocation-API/#coordinates_interface">
          <front>
            <title>Geolocation API Specification 2nd Edition</title>
            <author>
              <organization>Worldwide Web Consortium</organization>
            </author>
            <date year="2018" month="January"/>
          </front>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://webstore.ansi.org/standards/ieee/ieee8022001r2007">
          <front>
            <title>IEEE Standard For Local And Metropolitan Area Networks Overview And Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2007"/>
          </front>
        </reference>
        <reference anchor="FIPS-140" target="https://csrc.nist.gov/publications/detail/fips/140/2/final">
          <front>
            <title>Security Requirements for Cryptographic Modules</title>
            <author>
              <organization>National Institue of Standards</organization>
            </author>
            <date year="2001" month="May"/>
          </front>
        </reference>
        <reference anchor="Common.Criteria" target="https://www.commoncriteriaportal.org/cc/">
          <front>
            <title>Common Criteria for Information Technology Security Evaluation</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="April"/>
          </front>
        </reference>
      </references>
    </references>
    <section anchor="examples" numbered="true" toc="default">
      <name>Examples</name>
      <section anchor="very-simple-eat" numbered="true" toc="default">
        <name>Very Simple EAT</name>
        <t>This is shown in CBOR diagnostic form. Only the payload signed by COSE
is shown.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
{
    / issuer /           1: "joe",
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /            11: h'0198f50a4ff6c05861c8860d13a638ea',
    / secure-boot /     15: true,
    / debug-disable /   16: 3, / permanent-disable /
    / timestamp (iat) /  6: 1(1526542894)
}
]]></artwork>
      </section>
      <section anchor="example-with-submodules-nesting-and-security-levels" numbered="true" toc="default">
        <name>Example with Submodules, Nesting and Security Levels</name>
        <artwork name="" type="" align="left" alt=""><![CDATA[
{
    / nonce /                 10: h'948f8860d13a463e8e',
    / UEID /                  11: h'0198f50a4ff6c05861c8860d13a638ea',
    / secure-boot /           15: true,
    / debug-disable /         16: 3, / permanent-disable  /
    / timestamp (iat) /        6: 1(1526542894),
    / security-level /        14: 3, / secure restricted OS /
    / submods / 20: {
        / first submod, an Android Application /
        "Android App Foo" :  {
            / security-level /  14: 1 / unrestricted /
        },

        / 2nd submod, A nested EAT from a secure element /
        "Secure Element Eat" :
            / an embedded EAT, bytes of which are not shown /
            h'420123',

        / 3rd submod, information about Linux Android /
        "Linux Android": {
            / security-level /  14: 1 / unrestricted /
        }
    }
}
]]></artwork>
      </section>
    </section>
    <section anchor="ueid-design-rationale" numbered="true" toc="default">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability" numbered="true" toc="default">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion datadbase is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table align="center">
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and SW so this
simple approximation is used. See <xref target="BirthdayAttack" format="default"/>.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
    p = k^2 / 2n 
]]></artwork>
        <t>For this calculation:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
    p  Collision Probability
    n  Total population based on number of bits in UEID
    k  Population in a database
]]></artwork>
        <table align="center">
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's 
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of 
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
  t = 1 / ((k / 10) * p)
  
  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table align="center">
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid" numbered="true" toc="default">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122" format="default"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this 
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality 
random numbers, but do so by mapping into the overall UUID 
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>UUIDs seem to have been designed for scenarios where the implementor
does not have full control over the environment and uniqueness has to
be constructed from identifiers at hand. UEID takes the view that
hardware, software and/or manufacturing process directly implement
UEID in a simple and direct way. It takes the view that cryptographic
quality random number generators are readily available as they are
implemented in commonly used CPU hardware.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid" numbered="true" toc="default">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR" format="default"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR" format="default"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs are used with an open set of network protocols for authentication and such.
In these protocols the DevID secret is used to sign a nonce or similar to proof the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT defines network protocol for proving trustworthiness to a relying party, the very thing that is not defined in <xref target="IEEE.802.1AR" format="default"/>.
Nor does not give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat" numbered="true" toc="default">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT defines a network protocol and <xref target="IEEE.802.1AR" format="default"/> doesn't.
Vice versa, EAT doesn't define a an device implementation and DevID does.</t>
        <t>Hence, EAT can be the network protocol that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the Endorsement sent to the Verifier.</t>
        <t>In this case the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity" numbered="true" toc="default">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat" numbered="true" toc="default">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence" numbered="true" toc="default">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR" format="default"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR" format="default"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts" numbered="true" toc="default">
      <name>Changes from Previous Drafts</name>
      <t>The following is a list of known changes from the previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences.</t>
      <section anchor="from-draft-rats-eat-01" numbered="true" toc="default">
        <name>From draft-rats-eat-01</name>
        <ul spacing="normal">
          <li>Added UEID design rationale appendix</li>
        </ul>
      </section>
      <section anchor="from-draft-mandyam-rats-eat-00" numbered="true" toc="default">
        <name>From draft-mandyam-rats-eat-00</name>
        <t>This is a fairly large change in the orientation of the document, but
no new claims have been added.</t>
        <ul spacing="normal">
          <li>Separate information and data model using CDDL.</li>
          <li>Say an EAT is a CWT or JWT</li>
          <li>Use a map to structure the boot_state and location claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-01" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-01</name>
        <ul spacing="normal">
          <li>Clarifications and corrections for OEMID claim</li>
          <li>Minor spelling and other fixes</li>
          <li>Add the nonce claim, clarify jti claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-02" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-02</name>
        <ul spacing="normal">
          <li>Roll all EUIs back into one UEID type</li>
          <li>UEIDs can be one of three lengths, 128, 192 and 256.</li>
          <li>Added appendix justifying UEID design and size.</li>
          <li>Submods part now includes nested eat tokens so they can be named and
there can be more tha one of them</li>
          <li>Lots of fixes to the CDDL</li>
          <li>Added security considerations</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-03" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-03</name>
        <ul spacing="normal">
          <li>Split boot_state into secure-boot and debug-disable claims</li>
          <li>Debug disable is an enumerated type rather than Booleans</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-04" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-04</name>
        <ul spacing="normal">
          <li>Change IMEI-based UEIDs to be encoded as a 14-byte string</li>
          <li>CDDL cleaned up some more</li>
          <li>CDDL allows for JWTs and UCCSs</li>
          <li>CWT format submodules are byte string wrapped</li>
          <li>Allows for JWT nested in CWT and vice versa</li>
          <li>Allows UCCS (unsigned CWTs) and JWT unsecured tokens</li>
          <li>Clarify tag usage when nesting tokens</li>
          <li>Add section on key inclusion</li>
          <li>Add hardware version claims</li>
          <li>Collected CDDL is now filled in. Other CDDL corrections.</li>
          <li>Rename debug-disable to debug-status; clarify that it is not extensible</li>
          <li>Security level claim is not extensible</li>
          <li>Improve specification of location claim and added a location privacy section</li>
          <li>Add intended use claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-05" numbered="true" toc="default">
        <name>From draft-ietf-rats-05</name>
        <ul spacing="normal">
          <li>CDDL format issues resolved</li>
          <li>Corrected reference to Location Privacy section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-06" numbered="true" toc="default">
        <name>From draft-ietf-rats-06</name>
        <ul spacing="normal">
          <li>Added boot-seed claim</li>
          <li>Rework CBOR interoperability section</li>
          <li>Added profiles claim and section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-07" numbered="true" toc="default">
        <name>From draft-ietf-rats-07</name>
        <ul spacing="normal">
          <li>Filled in IANA and other sections for possible preassignment of claim keys for well understood claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-08" numbered="true" toc="default">
        <name>From draft-ietf-rats-08</name>
        <ul spacing="normal">
          <li>Change profile claim to be either a URL or an OID rather than a test string</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-09" numbered="true" toc="default">
        <name>From draft-ietf-rats-09</name>
        <ul spacing="normal">
          <li>Add SUEIDs</li>
          <li>Add appendix comparing IDevID to EAT</li>
          <li>Added section on use for Evidence and Attestation Results</li>
          <li>Fill in the key ID and endorsements identificaiton section</li>
          <li>Remove origination claim as it is replaced by key IDs and endorsements</li>
          <li>Added manifests and software evidence claims</li>
          <li>Add string labels non-claim labels for use with JSON (e.g. labels for members of location claim)</li>
          <li>EAN-13 HW versions are no longer a separate claim. Now they are folded in as a CoSWID version scheme.</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-10" numbered="true" toc="default">
        <name>From draft-ietf-rats-10</name>
        <ul spacing="normal">
          <li>Hardware version is made into an array of two rather than two claims</li>
        </ul>
      </section>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAErF72AAA+y963Ib2ZEu+r+eooLt2E22AZCUqGtHjzebZHezLYnaImXN
jomJjgJQAMsCquCqAilY1oRfYyL2+XsezE9yMr/MXJcqQN22Z/bEmbDDYVOF
qnVfec8vh8Nh0rRZOf0pW1Rl/jxt63WeFKsafzXtg6OjZ0cPkknWPk+bdpok
02pSZkt6cVpns3ZY5O1sWGdtM8yzdrjI2rxpk+R+/jx9c3pznb6r6vdFOU+/
r6v1KvkinVRlk5fNunmefrnJmy/pUbMeL4umKaqy3ayo3cuLm++SVfE8SdO2
mth7+Mc0X7W39OSE/91UdVvns8a/0WyW8YNJtVxlkzZ4Yz32z8qKH9WzST5t
2s0it9faouV/3Nzm6UVJ/9ikpy1PK2tpjOlN9T4v0/2L05uDJBuP6/zueUr/
SLI6z2jwZZvXZd4m7+9pvYp5yZPPgs8n46qmSU9poZ6nD46OHw6Pj5Js3d5W
9fNkmBYlDf/7UfqSdmSTLWl8stjfF3Uxvc3q4IeqpkX+X+tsQTNapjf55Las
FtW8yBsaxWTEs6X1yWmmj548eZS+rOr8tlo3eXpeF3c5rw5N7Xl6nZXpeZHP
K16LfE5jfJ6eZYtiVtVlkWER12Vb05tvr0/pn6tbHJO9Xx+nTx89TR8/Ok6f
0CHZo5/yZVYsnqdLGeL//ENbjP6g4xvR/9j0XozSF+tyOl5k09xN8EW2rvNy
kkc/YYrX+WRd8y7QhlT1Jn3x4sz3tZgv/mfRLKjHYZ3ziQg7ejlKv80WC1r7
vK4a19XLYr7OF52f/mtXM1jMkwfPngVrOZZR7lzMH0fp1ZfnVVnNb9d+NX/M
63y5iX/55TN88ORZ+l1Wl3RUq/X8Nn1TZVM3w+AHTGfKp/Pt8Un65MV1NL+y
aPNp+lu6ANNqGUz15CQ9fvDoQfrw8cPjp8FUf19NMdj+VJOyqpd0fe5yJgpv
vjt7cHz8TP988uj4kf759NlJ8PSJ/9M9fXp0ZO8eP3js/nxy4v589MD+fPjM
/fn42H325MTaffjsKVrg//ATonaj03pyS7OetHSW5bc2q+e8pLdtu2qeHx62
VbVoRkw0R7Qfh7ftcnHYJaRZ0Mrw6Km0IzTpTb6s2jyiR6/riggYvdqkYff4
yugK/z1MZ+vFQo7HD3n5Pv22qN/fVos/4lejRw+OEvr32dX1xeifHx09G53z
2P6mqUyqJh9+oDY6U9g7+/bqTXo1/j2NM702CllOidZO6s0Kc9rnARzwOIkO
1Okqq2nYdFOblO5ROsnqemNfEcHPmXDwv/95RN2lk7xui1kxYVa099lloLtz
PbnNcLijJcCO8jhHZ9TY37YIdGDbpqlKWQgm+0Me2ZD5D21WMzx6FC4LVoWW
oJryTKqZTuYsmAwtC78UPjr47PyuR+mb7I/Z1tm9+/766Uk8pz2bVJ7V7e2w
KGfVqJxno2WxOFzdrg6n1X25IFIwon/8ZlYs8m8mVVVPh/fz5unJXjiZd1dv
Xpyn319cnV/cXJ6l1//7+ubiZXr87OnJIH31/eno+ubV+ejo6OHjn45HR6Oj
nzCYLVMByXqFc54t0u/zqlnRP7LFkNnsYlHMwTFO+f826T61fBDN9fhkePSE
jx89vTx9dTo6e3czOltkxbLp7ybN+/7+flRkZYatzBpm38u8bJvDyX3b26t3
+dhkAWr2IJV2w0mk4Sy4/2Bws2zR5G5cP3bG1TtmO0f2ex2ZDe3H66tX4dB+
7AwtHltvcN3RvT07uw6P/19x/sdKXoSmrScTOvHH0VhPZSFvsjmu9dtyVVdM
vYhr0IrqqIn9t/HQbeSfI2cdenZzS4zt+9evR5cvLy63X+QVyQ7ZYvRwvlph
JtO8ed9Wq2U1XRP/Pbxe5RO5dHQWO/88z1tiYM0oa1YfftOEv1xOv3ny4Fl4
dB7WUzrHZV4r8aabRv9obosVE3KmiV8La6YWFmnUjcjQ6RlJHumrvL0nyRoU
8CavlwXdj+br9NV6Oc5rIiCDNJtOmcoYmSymdFxcU7uu2kNao/gGPUt5/b67
PL8anb65ungezoWfpqfUCjdNDdMeni4W1T3t3xtiT3WBrbxaYbI0jovyrqgr
Objpi6Jpt27ErJhWJPPQaZ/k2Ale0QaPh+tsNrwjkjGcTYc8uOPj40fySyYd
D3mQvVdGfCx3zZnFfJmJdhoswKvqLucV9StxcfpqePxw+xHiSzpvjmXQrFJl
9bQ5HBM7JyGpIapaDterSbiCoi0YfTsluj5Z5LqLND7q7PDt67PUmtg1he+v
jzu7BiZeXb+7PP+beHeTTZbMt+6L6fD4cUT6KmK1JPVeV7P2nlSe9DI6WHyZ
m+0LKDeRTkN5eU6tlHTU+ShvH19FrxXTESlSuv3ygMaED+n/STQ6/unI76yO
T9pPtQO5LHQaSFamT+iOy0nMa/ojS5u8TY+3jfYpmMc2Wu6JzisSHrL3xXJd
Z9sEi2/rbLrIN72fSCf5keTgpvfDt6N0mqcv82leiEYS/3w2Yp2jLZY0o0Sl
k+EV7W96OTwficTFMkZLGzCsimnipNJhJJX613uyZpIkzPNjUfvk+IHJwSeB
fH38gERi+puobns7zTYkkWaT9xF5sJ9Y/aXftu5zXo7ui/fFKp8Wwtv4X4f2
5U/y5Wgr37y4uBg9PXowOj59E3XLP6TXev0G6R7+rS+KLkk6W35XTPzZzeu9
oIvzfGJn9ujZNjHB3W1ax1xo1Kwop01Lt91+O9Qeh9yInFKmHmcvT68ndbFq
oyFfTJZZTAto3P5d0o3L+Tqb5zE/GKSPRsfpxbTgf+wN0LibePrg8YNgTumP
6zLnQ328S+7JaQwk8gVjwMTwmNo6pL4OuQf+x2g1nfF03j08G5FQ9qKaRNOh
R4tK6cHp68sOF3vAor4MOhjgj1m5zki5pyE+3Ulc7x9iTDdvDue+iyF1cfgF
JFHigiQT/4RZzLLJNh0I9PJdVS+mRNtySEpEK9hwUKyXIFBvL0ffr+m3eEr8
ZFHQvRVRhSggiegXH9q8nBKPI133D+vwPKX7F28vDwbpVT3PyuKPuqKLzbY3
r/AmM+kzNk2Vm5QI2P7Z5XkozJ6u5+um5eV5snV5tpxJopU0vPZwmi0P+eHQ
8yT/130+Jrl+shZpsl0TEyf5mpjVurBd5hV5UVXv16v+PXuTz4mPqzBzipWG
vcxLqFtHW+dz3pbRllG7R0Sfhjy61Xp8eFfk97hEX9TSYZE3O4nCm9NfOs5f
upIkl07XE6KWTV4z4WhsAod07fMPngntoFFMBI53E6n0OzpSdIlYBKBT8DJv
62pVLQr6mWSCPDNpr0mv7ngA+T3e62n7vSuTjxvaz3yUlU3RkUp4bvgfGh6P
rqb/eRIJEfRPSH6vr4fHJ0fR6J1F7k3+h3VR5yLR8cU4Yw2+mtfZ6raYEMOC
8Lx1cJOmnoxK2pTRvLrjTV444XoKeZpo6qo5pK4PHzB5zXYKcE4/vCwbGuAa
V9PWNjwmLzOmL1BCIB4tl1U5OqOJkMicRROU31L7DVO7NNbIUo4ZzzZ+LS7u
ssXaS9fb6NcEzU60VdU4cFUnh+FdX9XFQq56MhwO02zMR3fSJslp+TMW6ZSO
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
YE6TxbqJ2UaQABfk8UjqXSmp+9HKBvffpB8n6F58YDDC9Jz5ggBlNUgKjOIh
Y/kSQX0LEvimHhccwck+cHkQYfIqGpBwVKlCibQyD5qoR5O1WloNTmFFPXVW
bk2wFNnR5bUJ8ndd3eXNtnhlyR7MZXKW0RWEOAe3LisDKKFugLEGWaybANZC
EThc+CU4sQAdi97gMGj1a4dJbEgQ24KRtQ6QS1ZN6WfOWcp4cRy2hVAf/cds
x3CbLqyYS4UF+kvbCl6E5VB+Rg5CCfjOZVMdeyvy7TQ9e/OiB8KeNcNChZ2o
HKTUEcrFR9AT7xzN1mgFFG+f1Rl9vZbqA5HioXmNVpXxM8MLcqtXNL6Wc0ot
Fw3qm8Sgi6AdFe3SO7MKPnQ6RQfXytGfQJaPiJF5SjDNfoueXuJK98oRoJYl
h1dzLxWYlsYlZe22zq1wnMRfO4gVT1D5xKDGt9DgLSMyGRR7wqgjjXBDMJRq
fIeIb42Zx05wcuKtIhbMgA2Fo9fd6YGtqylHEVGx5QhunGxgrMba/DFJj+63
JW8hm06bTrT2navSwM/3HPojlH9lEntOBY9yQqjLMAvVguX3OgaEjpq/l2xr
QzIDR2lQy3ucMzKUREBZrg8UaAaW8kmt6b7U4k1c1aXKJSiqhojkCiHaAWOb
iWochrxHv7HdQ6WfPUvX5xBd5BvvDeihGB/PSG6rOVS23sMa7F1Ha24bQquo
xpGl1S3wwMg2dit9e9bJ2w0G8dt8o/3Iv4FKKjm5+83BnrOrmpXFbR1fpqgl
Lgy1h8WJ7TjdLwcuuzZIJ7amnFHFNxcDPre9DsstbXncZqHtFzCanMKqiePM
gYkXdAiq+vluc28bptN6WUJgnfKgdLE7/4m9nXld00MyshwSgoqGRVEdZWD0
Now2c6NlNCktShpcNXZxAsd1W0lCKUIZC9Q2Nki2kJj3mUfmDrvpEJlI5UFv
AIA/rbUKs97S4wdHLgPat+gMx3e+rkhwETR2rL/UZqfyCT3vAHfUAqzbK94a
frndaN9rdqDqjcf4cnoXb42cufjINe7CBHbx3b4ChN77r5+nr5hcuGfBFfc/
xR0+N/N4ur+bqhy4Fmk8z9nnYP/295Wu6/NQKuBXuiTleXp5cf09ZzVsJSpo
4uPHq1VeXp7TV3Ra27OKAV4G6U8/RRv0009J8j/KcbP6ursCjFm+fQF4td+W
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
riNz2gq1lq2qcKfpVex8jlGi6X9u8vljrSMiR9gmJ1XbL9WyTEo1c090HNBq
m4I0JWctFZ2nCKY534Cjy/FoFHdL/c21Q6SVSsUOIuxdYXVdy+quXlAQS5VX
te+iblWRh9LE7Nz3Y7zz64j6lDl5yTg1r8YRxSEnblqu58oHVvAOsWUoWJgp
7rDfl4uHptyuPMYVYGb+YTAi+agkFgJVb2sLVcjOL7QICCmoKowThp5xWLxE
AdEStdg/Q4YVUleOPuW0lgb27XRD9vVdmUt2oJ979dl/89NiU7Q1lbi3EuKZ
YjY7zZchjw+WagFMAJhW/8LODKMm/JGv2UVRY2fh76sUvcDhe8GC5SsUI82h
f65FMb5S4iot6gUKFdCD9tUV2Db8fXVfB9Hffw22/nZ8Nci+90H5xc9kPMqm
wnRfiQ2TP/p96+8rbfvOV7Zn98ejT+NJL/yyo5f+KO7pL/QSbxLq6KhnvWD0
US/oI+7nL/TS3Y7U04899BKsD3FHMs82VneZ+Oin0ptRXljR6QteYr/tUsIR
XTiX7OCcyitNXy+MD46P2E/3WaMYwxG6IgY0yY34ku8az2nbInaKhuPsXDdQ
F7/Rkc3sPyEkIbveVOLj7RyuVlx0xferSy+YQgFEUxdSTcN0qhXBAw+y4tO/
B58/TZ7vT6oeKzfhiewRFUYeqDIUpUg0j3Du6EOf/X+nDP4f/RgMfB0wyUqG
3JCkKparIsokElOnaRGZWhLTcUlMgLLzeCGwtZBOiFW9y/2K8C2/EUbhNK5+
53xrT6SGDV261PpSLk1NY5glLsKky8mriTTMoK+CuJ6opGdn7NtqO1qfqszR
O09TG+RWatvhbkABgZkJrMJPjxKUsrAKF+EtUvn0OIUofVQCZuPJycC3yFqu
//hiEn+cHB1HH1Nx+ZT8+8ZH95Qkm2Q/eNnwaTA+oo8n8vGAPx7JxyP66J4S
VtrQ6EXS0ORF0tDhC2nocXlkDaUjmqQjOuQRuXcUkAP/vDDDtxV+YJiJdkq+
6ociX3slz0n8hnh2bUXVd76lS6b6GWkZDnXsFJmhLcRQyBOl0l7jZECORMIY
hkk8l9vSGSOllfQv0j7iE4L6jNtDXJOjbgHeID/f5lKTdYq4MCPb/AmaKRAT
kWCl2zeHfty0gxnTgIDCWiGTxDnCaeiYFN3Z03GDmVK0Amoraaiy3S6aX5Ja
ILgO0XUzRbI1DJq8UUAYoWqcLm+p2/Xamzm+S1vk6+JeNfJhF2uNLk0bKbRH
dmG5lPvmO1TG85bdIsRu5V36uZjpTLK0AgPGIaVAxa3kXivInM46urxzVJoN
Ic7VYFEGCdgKXv3+/mf///Go5/fNquei37MPmA7PIhqq2yE/45nhhCEBBa53
Jg9fx5vhLwjB7O8Tg/8/QXjMmhUI3ojG9GlyqJ/p42H4+KQoPIEjpK7mTVC+
Po3Tpg6Sph4XhifZskSMn7THTY3TpsJHIOoUXKPeE1nOLlSuottGAyfwj3g9
qOWInI0GqVr5P9665BRxBNtKV1kbCqPQZi3KmesRxW+jG7+E3DvZt9icT1ig
jdtKlRbGjkfKAfOKvAPtEWC+3gwOnNvxAuWsBZGQYpQNXF9Jc5vVPJJKCnlB
keFekiHavNimS20T67NyY3u/Sz7XTd+Igrv1zizmc4nafFdnUjXx40evb0Q5
Doy+jm8lLGk8QaTdlAP0uNzj7LYuZwF5IQAMhOB5NMCqLxn5bJAar7A7UeMG
qBiscQ5H0xDxnGFFgQ2wwv00oHjgV5uExdqT1QtzBSmkjAhTGknOszLpXl18
ZLUxoJbRiWMIWYgoseCJuV0QTUbeAsJ7/h9HQ/d+C++NIg3isfmJT9ccwUB5
CxzfxFaF79CFAeCuG0lpqLESBen6ibUL8KbcCXdWGrY71+/czFp2tgkVRBFP
EeiaerOGpc1HQ7kWZCzNazrMeMXmNWdlGHwXjgm0vZvuLiU8xyX5NhCzD3cD
F0EihCeykShLYcHs5QLCD3YHDgki4gLOFp6DLE54kGG5qtpxTh2RikpxAeyF
j/kvQIbKtDpsQ+5AuqqzaJjIhJT6ZsyUhG6BpV89GAc3hbdA/egDiASjMWrE
5ayo/BrXTVS1LYoZdaixFjw4CEag4O51vcjMixbD9hH6EN3/VWAWUqEovstW
Gh1jYRPgLfYEDnkTM+gWGWcIBScpoczWD+hvEiQaAkA5xYuQlUIElk3GsYCo
KDuJzSxCxyTQdIDYgeQ7uk4Zx+3csBqyXFsoRD4vE7svb+wSNEg8lt9pAVy/
v8PWpvQ63I5cFiKt/UoCBGF4MpoMx6eXmkAvbqZzzVrY91+cv+4prpCEfWnV
ysbSbRgjhQnAUPJ8T1JRL9k5NePlaNynF6brYsFJGzVfs6TguXUna81PY6uF
miBrQS1yMnL0d6fcYCovoIAvEC+R7fGo3tLt43APOGdhZsg44mGzSHuj/5aY
TmA9hZhZysScCRYuh7LnWdK8P1miSwoB5IRr+1pyeDjyLGffSrfmMcOtziU5
TpsOVfzYA1xylbdSbIHHhs8FkiUep15RBB35a8RHavEP7AaO8mv0KgaCkKyD
VrJD9HnQn8fmeWVdhGweC+6Wm1sK0jb3EmWssOHQNPWsTAAruL0E2cwSWST7
w7mfHlie5E3blwKvIEyzNSeO5EekAUXNbhr8DBBSOZPyHbkirNYwUmlcXjAC
1esy5tC9Q/yySj06+KTuMU4ecBdC1vucSKE0jbjrEeYaui68JAKLqW40ZxXf
4aRleyhcc3kVUK5/ulqSFz83mBafkRz/GofuYgc1GkhDoavwS3lGJQ5u7Pfo
HQIMtJkrUiBi0L+b//sUSuWFX5R0G1XR3pkoIeXAQSzhGI5uhQDm8Cg6Fkua
PLRURMIIb94wJki91seKVoIQQ0yKElBFo+S1sBrJPX5Ea79jHSjE5FTyi6zI
b8qZ+TZvYvBbIk7Kkw7db+if8pCkIalbamCMuSV1dUReIAre8UP+paAwNQoa
zC1FdGs8nD4QpI1JDpY3yU6fIsZRDr24QjrCphMRgJDB+H3OumriHQ6fAkEC
o0kOniLYYFb3mwhk7Depzc54fuKkbELAlV4cS1ekhjOErmDKPbLAVO+d47rt
FojP6J4KPg4vbtWvTmfVPtX+8P8KT3HP+0QCxicowlx65uvS7pO+wjWa2Gda
AdIPz58MjwnIANkp94UAFa/nmFpuOGObxgyXpZwrdnuVDqJem4XDepUcQuTe
T8aQvMc745ea8fEvmM5EgLOAFbdb72DHEDrrS+ox1lGCDTn4kLKiGbyJEXm3
8OckBKS7bw1pdSc9813U/ECnXAdlIICOW/ktkI5a4jNXURaj/GPufFcvOhQW
8JpYLGlFAqqOe1ATHpGgFzBeg+akmDqavQW93xUPechgaQxfhBJH7yTBZ6nR
bWkenQRgdjf1/W0R7YMkIZtRRRve8E0UD27Z67DKiuaWTl3y7op/Yeg4MDQZ
JJ2Kwdbge2n0YV0KyDaorJHLdFwL9e8g8NnOgHVFvPOPiytL2fM0M1lmVOsy
jqzsbooJjXZlkenGhuyjV4j78i6LgUkidogiOolyc7ZL0k6k4n3UC7ilIgBS
dctK7Q0ZvacQTmWDxbuq1SlvYlND8KVhmz/jMzQd5lABy5uzAyRCmgVHsTz0
3ZSZn8RuBHyddhfxiaAd49tpWSmuIbEiW6syhJ0DGzrBJtSTMoLWfyD9K+6c
dTELgjbzjxQzyeDq0kO2d9DStQxyR5fRNL3OmayBOJBcNBdShJrO20P3vlIs
BmqFgpApVrUMwNiSa8DmqLiQ5OwGhPdsV/+KWRzZ05jYmi8HItuRLyIYI5iL
b+O92PgMaPPIzOJwH52OXq3yaXBaCVDxz1bMWyuNBPTHCF5a0HUZDjqWwIxj
vQV6vIV+k7zEqAZI9OJqgr5lbuHuILMS0Y2enhRbFY+qaTfXOCHub2v/BZWw
0npLmyoK5NdifrTLdwzRnV/z6mz9JsC3Yi77mbDZJpfHqmHlFW82Ic6mCaoO
v6gK7VaIDf9M0EKGgJFYgx1bL1UEubig2W/hxGVtDmMIHupWrlxU75E7QmlO
om3yWRuYhzhPER5Ypw46AeljFxIrOytY2/MfyQJZ2ff9iHy8I9TEFBCFsjJq
WFCRQJOaH2pRXhepWBUA1Rk7qWsJJSNni52CelxQvSC/Dx4oxCHGTolHU8nS
assyBFPgMYbB7AHAVeBD8v9vWwbmrVjGVYQCOUB4f5yVjebIsFCRU7Epis8R
NCsmgQEJ+aJWRFSYHcPd3FMMFQugraHBP0muGaz+9/tmxIj9fktRtJ2OQS49
Jg3tMIloI5DFgy/IFi6ieEPlevis4x8fEdScoLChM/ZZArofkbKM2PaxGTG4
U0qquIkmacUu0RUs3/iH2Id9f69EGSAz/0JveV+v8+t2V8UrYMswFB3jqs3i
15OL4jk1oVFw9BaFwlUDiBLPAi0FG1r522UhnHhbLFYZWgEgELmXw4EMYVi1
hgMy04JdP1O5GvQ48FNuBigJNxoDDuaUQrUFQIg0rbWGMmekHczLL90mPD3n
D/kyamoUlz+6zkt4ITmkJy05WIc6WSYnBMqM06cqLmQmx06Eu4xhEn7NleAG
pMHgldSUoNBT8SOiDucQb+Bar1JlO4/qfPkfcYdFxYH5nNJbAlKd6rr9nxAc
0UET6xLFmxTXXeK+8jQImY2SSkpFQkutakVYu9ykf+FtWcG/tyoWC83m4BPr
uvxCqKOnAngYobZT0Q1KR/ujLaWlp8c2wdguPduSAXb28byhNCA+eA3ThSpe
gkIUci6SjNLZsXCIBvcn2E1729ANbh9X43y9dXQ8DJylPEQOHT9ITCvmNk7l
+xcDTV9JIgVVXgZEmZgkjeYpFAGEi7XzBx0YCvOSw89lcv8lP2hkcxh6sURs
wQ/Zm5oDs4m2qiCDacLoH/GYuW8Q+IAm4w3RNmYiIm+c/mIFgiyDRVnrB4Gp
1e9LcX8gC4wz1ZEX7f9pkW4Cn/vNoR26gM95/vbsXMCceZFZQVXVjJSW8eEg
BmjGyyhvO0NnUN9WfNsKKtuPovIKtjfzPYqT0sReCWxK3saIpDBUo360bDWt
RNKacoKUjyZvgXn3osfRX7Zv2qV/tukZbIv/WiwOZqawV71emN8I8hwpKJUk
VoUHsQX1PkcMemJTuteX3+0uWLEpw8IiVIW900QrOn/vqZowzWqYvadFZSoH
YUH747KoGJcv5hnS+kPF0P82ccAOd/O5i54+XRQsRuP6QpItufPJcy6e06mN
sQWvyM523vPhJ4W/EoIpfSJsx+JbImt0ZIwlfCPgd14/ozBRpipRirC75OgD
YbagpWwcj/Z2HHZ/KIkqQ8QKkNbDZmS3Do02nlkLAiPcRCT69gh+REc/K0Nw
Uc9wEjTx6RHCb2HoGp6p5fISuA8evPcnimd7FANq4dD81hk2OonkhIImS1Ey
FhJcrd4bB5dvyP1fUbXrWCShYGHTmuR4tKsXTtmC8c70kx0dVCGVxMK5mmls
/0ZiWrejOmfPtNosKHcaOeAuCbuhURqrZoJtLN7SyMvcmFN7lpctA4IoH19S
lrWV0ow2gladIzCMGfu4uP1mq4MwiVA6NymxZmVzgwghCcRykgsaU/YUdy5f
aOwFmQWEvMAu+ejnZWHlONOd3EMfgsr7y+8qwrRKhBb7yA3Bid9CjtG9XbFD
KxbvO+OLcDntFKp3SzcNTDEeYRC/dMUooT3O5SgFi63XOYOl3NcJ7+GzEux/
AfTtID4IpwEA

-->

</rfc>
