<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.4.19 -->
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" obsoletes="" updates="" submissionType="IETF" xml:lang="en" tocInclude="true" tocDepth="4" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.9.1 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@island-resort.com</email>
      </address>
    </author>
    <author initials="M." surname="Ballesteros" fullname="Miguel Ballesteros">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 4299</phone>
        <email>mballest@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <date year="2021" month="July" day="15"/>
    <area>Internet</area>
    <workgroup>RATS Working Group</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides a signed (attested) set of
claims that describe state and characteristics of an entity, typically
a device like a phone or an IoT device.  These claims are used by a
relying party to determine how much it wishes to trust the entity.</t>
      <t>An EAT is either a CWT or JWT with some attestation-oriented 
claims. To a large degree, all this document does is extend
CWT and JWT.</t>
    </abstract>
    <note>
      <name>Contributing</name>
      <t>TBD</t>
    </note>
  </front>
  <middle>
    <section anchor="introduction" numbered="true" toc="default">
      <name>Introduction</name>
      <t>Remote device attestation is a fundamental service that allows a remote
device such as a mobile phone, an Internet-of-Things (IoT) device, or
other endpoint to prove itself to a relying party, a server or a
service.  This allows the relying party to know some characteristics
about the device and decide whether it trusts the device.</t>
      <t>Remote attestation is a fundamental service that can underlie other
protocols and services that need to know about the trustworthiness of
the device before proceeding. One good example is biometric
authentication where the biometric matching is done on the device. The
relying party needs to know that the device is one that is known to do
biometric matching correctly.  Another example is content protection
where the relying party wants to know the device will protect the
data.  This generalizes on to corporate enterprises that might want to
know that a device is trustworthy before allowing corporate data to be
accessed by it.</t>
      <t>The notion of attestation here is large and may include, but is not
limited to the following:</t>
      <ul spacing="normal">
        <li>Proof of the make and model of the device hardware (HW)</li>
        <li>Proof of the make and model of the device processor, particularly
for security-oriented chips</li>
        <li>Measurement of the software (SW) running on the device</li>
        <li>Configuration and state of the device</li>
        <li>Environmental characteristics of the device such as its GPS location</li>
      </ul>
      <section anchor="cwt-jwt-and-uccs" numbered="true" toc="default">
        <name>CWT, JWT and UCCS</name>
        <t>For flexibility and ease of imlpementation in a wide variety of environments, EATs can be either CBOR <xref target="RFC8949" format="default"/> or JSON <xref target="ECMAScript" format="default"/> format.
This specification simultaneously describes both formats.</t>
        <t>An EAT is either a CWT as defined in <xref target="RFC8392" format="default"/>, a UCCS as defined in <xref target="UCCS.Draft" format="default"/>, or a JWT as defined in <xref target="RFC7519" format="default"/>.
This specification extends those specifications with additional claims for attestation.</t>
        <t>The identification of a protocol element as an EAT, whether CBOR or JSON format, follows the general conventions used by CWT, JWT and UCCS.
Largely this depends on the protocol carrying the EAT.
In some cases it may be by content type (e.g., MIME type).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
      </section>
      <section anchor="cddl" numbered="true" toc="default">
        <name>CDDL</name>
        <t>This specification uses CDDL, <xref target="RFC8610" format="default"/>, as the primary formalism to
define each claim.  The implementor then interprets the CDDL to come
to either the CBOR <xref target="RFC8949" format="default"/> or JSON <xref target="ECMAScript" format="default"/>
representation. In the case of JSON, Appendix E of <xref target="RFC8610" format="default"/> is
followed. Additional rules are given in <xref target="jsoninterop" format="default"/> of this
document where Appendix E is insufficient.  (Note that this is not to
define a general means to translate between CBOR and JSON, but only to
define enough such that the claims defined in this document can be
rendered unambiguously in JSON).</t>
        <t>The CWT specification was authored before CDDL was available and did not use it.
This specification includes a CDDL definition of most of what is described in <xref target="RFC8392" format="default"/>.</t>
      </section>
      <section anchor="entity-overview" numbered="true" toc="default">
        <name>Entity Overview</name>
        <t>An "entity" can be any device or device subassembly ("submodule") that
can generate its own attestation in the form of an EAT.  The
attestation should be cryptographically verifiable by the EAT
consumer. An EAT at the device-level can be composed of several
submodule EAT's.</t>
        <t>Modern devices such as a mobile phone have many different execution
environments operating with different security levels. For example, it
is common for a mobile phone to have an "apps" environment that runs
an operating system (OS) that hosts a plethora of downloadable
apps. It may also have a TEE (Trusted Execution Environment) that is
distinct, isolated, and hosts security-oriented functionality like
biometric authentication. Additionally, it may have an eSE (embedded
Secure Element) - a high security chip with defenses against HW
attacks that is used to produce attestations.  This device attestation format
allows the attested data to be tagged at a security level from which
it originates.  In general, any discrete execution environment that
has an identifiable security level can be considered an entity.</t>
      </section>
      <section anchor="use-as-evidence-and-attestation-results" numbered="true" toc="default">
        <name>Use as Evidence and Attestation Results</name>
        <t>Here, normative reference is made to <xref target="RATS-Architecture" format="default"/>, particularly the definition of Evidence, the Verifier, Attestation Results and the Relying Party.
Per Figure 1 in <xref target="RATS-Architecture" format="default"/>, Evidence is a protocol message that goes from the Attester to the Verifier and Attestation Results a message that goes from the Verifier to the Relying Party.
EAT is defined such that it can be used to represent either Evidence, Attestation Results or both.
No claims defined here are considered exclusive to or are prohibited in either use.
It is useful to create EAT profiles as described in <xref target="profiles" format="default"/> for either use.</t>
        <t>It is useful to characterize the relationship of claims in Evidence to those in Attestation Results.</t>
        <t>Many claims in Evidence simply will pass through the Verifier to the Relying Party without modification.
They will be verified as authentic from the device by the Verifier just through normal verification of the Attester's signature.
They will be protected from modification when they are conveyed to the Relying Party by whatever means is used to protect Attestation Results. 
(The details of that protection are out of scope of this document.)</t>
        <t>Some claims in Evidence will be verified by the Verifier by comparison to Reference Values.
In this case the claims in Evidence will not likely be conveyed to the Relying Party.
Instead, some claim indicating they were checked may be added to the Attestation Results or it may be tacitly known that the Verifier always does this check.</t>
        <t>In some cases the Verifier may provide privacy-preserving functionality by stripping or modifying claims that do not posses sufficient privacy-preserving characteristics.</t>
      </section>
      <section anchor="eat-operating-models" numbered="true" toc="default">
        <name>EAT Operating Models</name>
        <t>TODO: Rewrite (or eliminate) this section in light of the RATS architecture draft.</t>
        <t>At least the following three participants exist in all EAT operating
models. Some operating models have additional participants.</t>
        <dl>
          <dt>
The Entity.  </dt>
          <dd>
            <t>This is the phone, the IoT device, the sensor, the sub-assembly or
such that the attestation provides information about.</t>
          </dd>
          <dt>
The Manufacturer.  </dt>
          <dd>
            <t>The company that made the entity.  This may be a chip vendor, a
circuit board module vendor or a vendor of finished consumer products.</t>
          </dd>
          <dt>
The Relying Party.  </dt>
          <dd>
            <t>The server, service or company that makes use of the information in
the EAT about the entity.</t>
          </dd>
        </dl>
        <t>In all operating models, the manufacturer provisions some secret
attestation key material (AKM) into the entity during manufacturing.
This might be during the manufacturer of a chip at a fabrication
facility (fab) or during final assembly of a consumer product or any
time in between. This attestation key material is used for signing
EATs.</t>
        <t>In all operating models, hardware and/or software on the entity create
an EAT of the format described in this document. The EAT is always
signed by the attestation key material provisioned by the
manufacturer.</t>
        <t>In all operating models, the relying party must end up knowing that
the signature on the EAT is valid and consistent with data from claims
in the EAT.  This can happen in many different ways. Here are some
examples.</t>
        <ul spacing="normal">
          <li>The EAT is transmitted to the relying party. The relying party gets
corresponding key material (e.g. a root certificate) from the
manufacturer. The relying party performs the verification.</li>
          <li>The EAT is transmitted to the relying party. The relying party
transmits the EAT to a verification service offered by the
manufacturer. The server returns the validated claims.</li>
          <li>The EAT is transmitted directly to a verification service, perhaps
operated by the manufacturer or perhaps by another party. It
verifies the EAT and makes the validated claims available to the
relying party. It may even modify the claims in some way and re-sign
the EAT (with a different signing key).</li>
        </ul>
        <t>All these operating models are supported and there is no preference
of one over the other. It is important to support this variety of
operating models to generally facilitate deployment and to allow for
some special scenarios. One special scenario has a validation service
that is monetized, most likely by the manufacturer.  In another, a
privacy proxy service processes the EAT before it is transmitted to
the relying party. In yet another, symmetric key material is used for
signing. In this case the manufacturer should perform the
verification, because any release of the key material would enable a
participant other than the entity to create valid signed EATs.</t>
      </section>
      <section anchor="what-is-not-standardized" numbered="true" toc="default">
        <name>What is Not Standardized</name>
        <t>The following is not standardized for EAT, just the same they are not
standardized for CWT or JWT.</t>
        <section anchor="transmission-protocol" numbered="true" toc="default">
          <name>Transmission Protocol</name>
          <t>EATs may be transmitted by any protocol the same as CWTs and JWTs. For
example, they might be added in extension fields of other protocols,
bundled into an HTTP header, or just transmitted as files. This
flexibility is intentional to allow broader adoption. This flexibility
is possible because EAT's are self-secured with signing (and possibly
additionally with encryption and anti-replay). The transmission
protocol is not required to fulfill any additional security
requirements.</t>
          <t>For certain devices, a direct connection may not exist between the
EAT-producing device and the Relying Party. In such cases, the EAT
should be protected against malicious access. The use of COSE and JOSE
allows for signing and encryption of the EAT. Therefore, even if the
EAT is conveyed through intermediaries between the device and Relying
Party, such intermediaries cannot easily modify the EAT payload or
alter the signature.</t>
        </section>
        <section anchor="signing-scheme" numbered="true" toc="default">
          <name>Signing Scheme</name>
          <t>The term "signing scheme" is used to refer to the system that includes
end-end process of establishing signing attestation key material in
the entity, signing the EAT, and verifying it. This might involve key
IDs and X.509 certificate chains or something similar but
different. The term "signing algorithm" refers just to the algorithm
ID in the COSE signing structure. No particular signing algorithm or
signing scheme is required by this standard.</t>
          <t>There are three main implementation issues driving this. First, secure
non-volatile storage space in the entity for the attestation key
material may be highly limited, perhaps to only a few hundred bits, on
some small IoT chips. Second, the factory cost of provisioning key
material in each chip or device may be high, with even millisecond
delays adding to the cost of a chip. Third, privacy-preserving signing
schemes like ECDAA (Elliptic Curve Direct Anonymous Attestation) are
complex and not suitable for all use cases.</t>
          <t>Over time to faciliate interoperability, some signing schemes may be
defined in EAT profiles or other documents either in the IETF or outside.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology" numbered="true" toc="default">
      <name>Terminology</name>
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in
BCP 14 <xref target="RFC2119" format="default"/> <xref target="RFC8174" format="default"/> when, and only when, they appear in all
capitals, as shown here.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519" format="default"/>, COSE
<xref target="RFC8152" format="default"/>, and CWT <xref target="RFC8392" format="default"/>.</t>
      <dl>
        <dt>
Claim Name.  </dt>
        <dd>
          <t>The human-readable name used to identify a claim.</t>
        </dd>
        <dt>
Claim Key.  </dt>
        <dd>
          <t>The CBOR map key or JSON name used to identify a claim.</t>
        </dd>
        <dt>
Claim Value.  </dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>
CWT Claims Set.  </dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
        <dt>
Attestation Key Material (AKM).  </dt>
        <dd>
          <t>The key material used to sign the EAT token. If it is done
symmetrically with HMAC, then this is a simple symmetric key.
If it is done with ECC, such as an IEEE DevID <xref target="IEEE.802.1AR" format="default"/>, then this
is the private part of the EC key pair. If ECDAA 
is used, (e.g., as used by Enhanced Privacy ID, i.e. EPID) then it is the key material 
needed for ECDAA.</t>
        </dd>
      </dl>
    </section>
    <section anchor="the-claims" numbered="true" toc="default">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation. It also
mentions several claims defined by CWT and JWT that are particularly
important for EAT.</t>
      <t>Note also:
* Any claim defined for CWT or JWT may be used in an EAT including 
  those in the CWT <xref target="IANA.CWT.Claims" format="default"/> and JWT IANA <xref target="IANA.JWT.Claims" format="default"/>
  claims registries.</t>
      <ul spacing="normal">
        <li>All claims are optional</li>
        <li>No claims are mandatory</li>
        <li>All claims that are not understood by implementations MUST be ignored</li>
      </ul>
      <t>There are no default values or meanings assigned to absent claims
other than they are not reported. The reason for a claim's absence may
be the implementation not supporting the claim, an inability to
determine its value, or a preference to report in a different way such
as a proprietary claim.</t>
      <t>CDDL along with text descriptions is used to define each claim
indepdent of encoding.  Each claim is defined as a CDDL group (the
group is a general aggregation and type definition feature of
CDDL). In the encoding section <xref target="encoding" format="default"/>, the CDDL groups turn into
CBOR map entries and JSON name/value pairs.</t>
      <t>Map labels are assigned both an integer and string value.
CBOR encoded tokens MUST use only integer labels.
JSON encoded tokens MUST use only string labels.</t>
      <t>TODO: add paragraph here about use for Attestation Evidence and for Results.</t>
      <section anchor="token-id-claim-cti-and-jti" numbered="true" toc="default">
        <name>Token ID Claim (cti and jti)</name>
        <t>CWT defines the "cti" claim. JWT defines the "jti" claim. These are
equivalent to each other in EAT and carry a unique token identifier as
they do in JWT and CWT.  They may be used to defend against re use of
the token but are distinct from the nonce that is used by the relying
party to guarantee freshness and defend against replay.</t>
      </section>
      <section anchor="timestamp-claim-iat" numbered="true" toc="default">
        <name>Timestamp claim (iat)</name>
        <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
        <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even 
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
        <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. No token may contain an iat claim in
float-point format. Any recipient of a token with a floating-point
format iat claim may consider it an error.  A 64-bit integer 
representation of epoch time can represent a range of +/- 500 billion
years, so the only point of a floating-point timestamp is to 
have precession greater than one second. This is not needed for EAT.</t>
      </section>
      <section anchor="nonce-claim-nonce" numbered="true" toc="default">
        <name>Nonce Claim (nonce)</name>
        <t>All EATs should have a nonce to prevent replay attacks. The nonce is
generated by the relying party, the end consumer of the token. It is
conveyed to the entity over whatever transport is in use before the
token is generated and then included in the token as the nonce claim.</t>
        <t>This documents the nonce claim for registration in the IANA CWT 
claims registry. This is equivalent to the JWT nonce claim that is
already registered.</t>
        <t>The nonce must be at least 8 bytes (64 bits) as fewer are unlikely
to be secure. A maximum of 64 bytes is set to limit the memory
a constrained implementation uses. This size range is not set
for the already-registered JWT nonce, but it should follow
this size recommendation when used in an EAT.</t>
        <t>Multiple nonces are allowed to accommodate multistage verification
and consumption.</t>
        <section anchor="nonce-cddl" numbered="true" toc="default">
          <name>nonce CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
nonce-type = bstr .size (8..64)

nonce-claim = (
    nonce => nonce-type / [ 2* nonce-type ]
)
]]></sourcecode>
        </section>
      </section>
      <section anchor="universal-entity-id-claim-ueid" numbered="true" toc="default">
        <name>Universal Entity ID Claim (ueid)</name>
        <t>UEID's identify individual manufactured entities / devices such as a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire device or a submodule or
subsystem. It does not identify types, models or classes of
devices. It is akin to a serial number, though it does not have to be
sequential.</t>
        <t>UEID's must be universally and globally unique across manufacturers
and countries. UEIDs must also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then relying parties receiving them will have
to track other characteristics of the device to keep devices distinct
between manufacturers).</t>
        <t>There are privacy considerations for UEID's. See <xref target="ueidprivacyconsiderations" format="default"/>.</t>
        <t>The UEID is permanent. It never change for a given
device / entity.</t>
        <t>UEIDs are variable length. All implementations MUST be able to receive
UEIDs that are 33 bytes long (1 type byte and 256 bits).  The
recommended maximum sent is also 33 bytes.</t>
        <t>When the entity constructs the UEID, the first byte is a type and the
following bytes the ID for that type. Several types are allowed to
accommodate different industries and different manufacturing processes
and to give options to avoid paying fees for certain types of
manufacturer registrations.</t>
        <t>Creation of new types requires a Standards Action <xref target="RFC8126" format="default"/>.</t>
        <table anchor="ueid-types-table" align="center">
          <name>UEID Composition Types</name>
          <thead>
            <tr>
              <th align="left">Type Byte</th>
              <th align="left">Type Name</th>
              <th align="left">Specification</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">0x01</td>
              <td align="left">RAND</td>
              <td align="left">This is a 128, 192 or 256 bit random number generated once and stored in the device. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the device and stored. It may not be smaller than 128 bits.</td>
            </tr>
            <tr>
              <td align="left">0x02</td>
              <td align="left">IEEE EUI</td>
              <td align="left">This makes use of the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-device identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while devices with multiple network interfaces may have multiple MAC addresses, there is only one UEID for a device) <xref target="IEEE.802-2001" format="default"/>, <xref target="OUI.Guide" format="default"/></td>
            </tr>
            <tr>
              <td align="left">0x03</td>
              <td align="left">IMEI</td>
              <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which SHALL be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded SHALL NOT include Luhn checksum or SVN information. <xref target="ThreeGPP.IMEI" format="default"/></td>
            </tr>
          </tbody>
        </table>
        <t>UEID's are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
        <t>The consumer (the relying party) of a UEID MUST treat a UEID as a
completely opaque string of bytes and not make any use of its internal
structure. For example, they should not use the OUI part of a type
0x02 UEID to identify the manufacturer of the device. Instead they
should use the oemid claim that is defined elsewhere. The reasons for
this are:</t>
        <ul spacing="normal">
          <li>UEIDs types may vary freely from one manufacturer to the next.</li>
          <li>New types of UEIDs may be created. For example, a type 0x07 UEID may
be created based on some other manufacturer registration scheme.</li>
          <li>Device manufacturers are allowed to change from one type of UEID to
another anytime they want. For example, they may find they can
optimize their manufacturing by switching from type 0x01 to type
0x02 or vice versa.  The main requirement on the manufacturer is
that UEIDs be universally unique.</li>
        </ul>
        <section anchor="ueid-cddl" numbered="true" toc="default">
          <name>ueid CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
ueid-type = bstr .size (7..33)

ueid-claim = (
     ueid => ueid-type
)
]]></sourcecode>
        </section>
      </section>
      <section anchor="semi-permanent-ueids-sueids" numbered="true" toc="default">
        <name>Semi-permanent UEIDs (SUEIDs)</name>
        <t>An SEUID is of the same format as a UEID, but it may change to a different value on device life-cycle events.
Examples of these events are change of ownership, factory reset and on-boarding into an IoT device management system.
A device may have both a UEID and SUEIDs, neither, one or the other.</t>
        <t>There may be multiple SUEIDs.
Each one has a text string label the purpose of which is to distinguish it from others in the token.
The label may name the purpose, application or type of the SUEID.
Typically, there will be few SUEDs so there is no need for a formal labeling mechanism like a registry.
The EAT profile may describe how SUEIDs should be labeled.
If there is only one SUEID, the claim remains a map and there still must be a label.
For example, the label for the SUEID used by FIDO Onboarding Protocol could simply be "FDO".</t>
        <t>There are privacy considerations for SUEID's. See <xref target="ueidprivacyconsiderations" format="default"/>.</t>
        <sourcecode type="CDDL"><![CDATA[
sueids-type = {
    + tstr => ueid-type
}

sueids-claim = (
     sueids => sueids-type
)
]]></sourcecode>
      </section>
      <section anchor="oemid" numbered="true" toc="default">
        <name>OEM Identification by IEEE (oemid)</name>
        <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE.RA" format="default"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide" format="default"/> and provides a lookup
services <xref target="OUI.Lookup" format="default"/></t>
        <t>Companies that have more than one of these IDs or MAC address blocks
should pick one and prefer that for all their devices.</t>
        <t>Commonly, these are expressed in Hexadecimal Representation
<xref target="IEEE.802-2001" format="default"/> also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48. For JSON encoded
tokens, this is further base64url encoded.</t>
        <section anchor="oemid-cddl" numbered="true" toc="default">
          <name>oemid CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
oemid-claim = (
    oemid => bstr
)
]]></sourcecode>
        </section>
      </section>
      <section anchor="hardware-version-claims-hardware-version-claims" numbered="true" toc="default">
        <name>Hardware Version Claims (hardware-version-claims)</name>
        <t>The hardware version can be claimed at three different levels, the chip, the circuit board and the final device assembly.
An EAT can include any combination these claims.</t>
        <t>The hardware version is a simple text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID" format="default"/>.</t>
        <t>The hardware version can also be given by a 13-digit <xref target="EAN-13" format="default"/>.
A new CoSWID version scheme is registered with IANA by this document in <xref target="registerversionscheme" format="default"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.</t>
        <sourcecode type="CDDL"><![CDATA[
hw-version-type = [
    version:  tstr,
    scheme:  $version-scheme
]

chip-version-claim = (
    chip-version => hw-version-type
)

board-version-claim = (
    board-version => hw-version-type
)

device-version-claim = (
    device-version => hw-version-type
)

hardware-version-claims = (
    ? chip-version-claim,
    ? board-version-claim,
    ? device-version-claim,
)

]]></sourcecode>
      </section>
      <section anchor="the-security-level-claim-security-level" numbered="true" toc="default">
        <name>The Security Level Claim (security-level)</name>
        <t>This claim characterizes the device/entity 
ability to defend against attacks aimed at capturing the signing
key, forging claims and at forging EATs. This is done by
defining four security levels as described below. This is similar
to the key protection types defined by the Fast Identity Online (FIDO) Alliance <xref target="FIDO.Registry" format="default"/>.</t>
        <t>These claims describe security environment and countermeasures
available on the end-entity / client device where the attestation key
reside and the claims originate.</t>
        <dl>
          <dt>
1 -- Unrestricted  </dt>
          <dd>
            <t>There is some expectation that implementor will
protect the attestation signing keys at this level. Otherwise
the EAT provides no meaningful security assurances.</t>
          </dd>
          <dt>
2-- Restricted  </dt>
          <dd>
            <t>Entities at this level should not be general-purpose
operating environments that host features such as app download
systems, web browsers and complex productivity applications.
It is akin to the Secure Restricted level (see below) without the
security orientation. Examples include a Wi-Fi subsystem,
an IoT camera, or sensor device.</t>
          </dd>
          <dt>
3 -- Secure Restricted  </dt>
          <dd>
            <t>Entities at this level must meet the criteria defined by FIDO Allowed
Restricted Operating Environments <xref target="FIDO.AROE" format="default"/>. Examples include TEE's and 
schemes using virtualization-based security. Like the FIDO security goal,
security at this level is aimed at defending well against large-scale
network / remote attacks against the device.</t>
          </dd>
          <dt>
4 -- Hardware  </dt>
          <dd>
            <t>Entities at this level must include substantial defense 
against physical or electrical attacks against the device itself.
It is assumed any potential attacker has captured the device and can 
disassemble it. Example include TPMs and Secure Elements.</t>
          </dd>
        </dl>
        <t>The entity should claim the highest security level it achieves and no higher.
This set is not extensible so as to provide a common interoperable description of security level to the relying party.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of security and its own proprietary claim as a refined indication.</t>
        <t>This claim is not intended as a replacement for a proper end-device
security certification schemes such as those based on FIPS 140 <xref target="FIPS-140" format="default"/> 
or those based on Common Criteria <xref target="Common.Criteria" format="default"/>. The 
claim made here is solely a self-claim made by the Entity Originator.</t>
        <section anchor="security-level-cddl" numbered="true" toc="default">
          <name>security-level CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
security-level-cbor-type = &(
    unrestricted: 1,
    restricted: 2,
    secure-restricted: 3,
    hardware: 4
)

security-level-json-type = 
    "unrestricted" /
    "restricted" /
    "secure-restricted" /
    "hardware"

security-level-claim = (
    security-level => security-level-cbor-type / security-level-json-type
)
]]></sourcecode>
        </section>
      </section>
      <section anchor="secure-boot-claim-secure-boot" numbered="true" toc="default">
        <name>Secure Boot Claim (secure-boot)</name>
        <t>The value of true indicates secure boot is enabled. Secure boot is
considered enabled when base software, the firmware and operating
system, are under control of the entity manufacturer identified in the
OEMID claim described in <xref target="oemid" format="default"/>. This may because the software is
in ROM or because it is cryptographically authenticated or some
combination of the two or other.</t>
        <section anchor="secure-boot-cddl" numbered="true" toc="default">
          <name>secure-boot CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
secure-boot-claim = (
    secure-boot => bool
)
]]></sourcecode>
        </section>
      </section>
      <section anchor="debug-status-claim-debug-status" numbered="true" toc="default">
        <name>Debug Status Claim (debug-status)</name>
        <t>This applies to system-wide or submodule-wide debug facilities of the
target device / submodule like JTAG and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
        <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-device
public keys.</t>
        <t>As with all claims, the absence of the debug level claim means
it is not reported. A conservative interpretation might assume
the Not Disabled state. It could however be that it is reported
in a proprietary claim.</t>
        <t>This claim is not extensible so as to provide a common interoperable description of debug status to the relying party.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
        <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
        <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The verifier or relying party receiving an EAT cannot
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
        <t>An individual target device / submodule may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
        <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the relying party can know the debug status
of the submodules since there is no inheritance.</t>
        <section anchor="enabled" numbered="true" toc="default">
          <name>Enabled</name>
          <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
        </section>
        <section anchor="disabled" numbered="true" toc="default">
          <name>Disabled</name>
          <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future, and it may also be
possible that they were enabled in the past after the
target device/sub-system booted/started, but they are currently disabled.</t>
        </section>
        <section anchor="disabled-since-boot" numbered="true" toc="default">
          <name>Disabled Since Boot</name>
          <t>This level indicates all debug facilities are currently disabled and
have been so since the target device/sub-system booted/started.</t>
        </section>
        <section anchor="disabled-permanently" numbered="true" toc="default">
          <name>Disabled Permanently</name>
          <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer cannot enable them. Only
the manufacturer indicated in the OEMID claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
        </section>
        <section anchor="disabled-fully-and-permanently" numbered="true" toc="default">
          <name>Disabled Fully and Permanently</name>
          <t>This level indicates that all debug capabilities for the target
device/sub-module are permanently disabled.</t>
        </section>
        <section anchor="debug-status-cddl" numbered="true" toc="default">
          <name>debug-status CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
debug-status-cbor-type = &(
    enabled: 0,
    disabled: 1,
    disabled-since-boot: 2,
    disabled-permanently: 3,
    disabled-fully-and-permanently: 4
)

debug-status-json-type = 
    "enabled" /
    "disabled" /
    "disabled-since-boot" /
    "disabled-permanently" /
    "disabled-fully-and-permanently"

debug-status-claim = (
    debug-status => debug-status-cbor-type / debug-status-json-type
)
]]></sourcecode>
        </section>
      </section>
      <section anchor="including-keys" numbered="true" toc="default">
        <name>Including Keys</name>
        <t>An EAT may include a cryptographic key such as a public key.
The signing of the EAT binds the key to all the other claims in the token.</t>
        <t>The purpose for inclusion of the key may vary by use case.
For example, the key may be included as part of an IoT device onboarding protocol.
When the FIDO protocol includes a pubic key in its attestation message, the key represents the binding of a user, device and relying party.
This document describes how claims containing keys should be defined for the various use cases.
It does not define specific claims for specific use cases.</t>
        <t>Keys in CBOR format tokens SHOULD be the COSE_Key format <xref target="RFC8152" format="default"/> and keys in JSON format tokens SHOULD be the JSON Web Key format <xref target="RFC7517" format="default"/>.
These two formats support many common key types.
Their use avoids the need to decode other serialization formats.
These two formats can be extended to support further key types through their IANA registries.</t>
        <t>The general confirmation claim format <xref target="RFC8747" format="default"/>, <xref target="RFC7800" format="default"/> may also be used.
It provides key encryption. 
It also allows for inclusion by reference through a key ID.
The confirmation claim format may employed in the definition of some new claim for a a particular use case.</t>
        <t>When the actual confirmation claim is included in an EAT, this document associates no use case semantics other than proof of posession.
Different EAT use cases may choose to associate further semantics.
The key in the confirmation claim MUST be protected the same as the key used to sign the EAT. 
That is, the same, equivalent or better hardware defenses, access controls, key generation and such must be used.</t>
      </section>
      <section anchor="the-location-claim-location" numbered="true" toc="default">
        <name>The Location Claim (location)</name>
        <t>The location claim gives the location of the device entity from which the attestation originates.
It is derived from the W3C Geolocation API <xref target="W3C.GeoLoc" format="default"/>.
The latitude, longitude, altitude and accuracy must conform to <xref target="WGS84" format="default"/>.
The altitude is in meters above the <xref target="WGS84" format="default"/> ellipsoid.
The two accuracy values are positive numbers in meters.
The heading is in degrees relative to true north.
If the device is stationary, the heading is NaN (floating-point not-a-number).
The speed is the horizontal component of the device velocity in meters per second.</t>
        <t>When encoding floating-point numbers half-precision should not be used.
It usually does not provide enough precision for a geographic location.
It is not a requirement that the receiver of an EAT implement half-precision, so the receiver may not be able to decode the location.</t>
        <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.</t>
        <t>The age data item can be used when the entity doesn't know what time
it is either because it doesn't have a clock or it isn't set. The
entity must still have a "ticker" that can measure a time
interval. The age is the interval between acquisition of the location
data and token creation.</t>
        <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations" format="default"/> below.</t>
        <section anchor="location-cddl" numbered="true" toc="default">
          <name>location CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude = 1 / "latitude"
longitude = 2 / "longitude"
altitude = 3 / "altitude"
accuracy = 4 / "accuracy"
altitude-accuracy = 5 / "altitude-accuracy"
heading = 6 / "heading"
speed = 7 / "speed"
timestamp = 8 / "timestamp"
age = 9 / "age"

location-claim = (
    location-label => location-type
)
]]></sourcecode>
        </section>
      </section>
      <section anchor="the-uptime-claim-uptime" numbered="true" toc="default">
        <name>The Uptime Claim (uptime)</name>
        <t>The "uptime" claim contains a value that represents the number of
seconds that have elapsed since the entity or submod was last booted.</t>
        <section anchor="uptime-cddl" numbered="true" toc="default">
          <name>uptime CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
uptime-claim = (
    uptime => uint
)
]]></sourcecode>
        </section>
      </section>
      <section anchor="the-boot-seed-claim-boot-seed" numbered="true" toc="default">
        <name>The Boot Seed Claim (boot-seed)</name>
        <t>The Boot Seed claim is a random value created at system boot time that will allow differentiation of reports from different boot sessions.
This value is usually public and not protected.
It is not the same as a seed for a random number generator which must be kept secret.</t>
        <sourcecode type="CDDL"><![CDATA[
boot-seed-claim = (
    boot-seed => bytes
)
]]></sourcecode>
      </section>
      <section anchor="the-intended-use-claim-intended-use" numbered="true" toc="default">
        <name>The Intended Use Claim (intended-use)</name>
        <t>EAT's may be used in the context of several different applications.  The intended-use
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it uses EAT.</t>
        <dl>
          <dt>
1 -- Generic  </dt>
          <dd>
            <t>Generic attestation describes an application where the EAT consumer
requres the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
          </dd>
          <dt>
2-- Registration  </dt>
          <dd>
            <t>Entities that are registering for a new service may be expected to 
provide an attestation as part of the registration process.  This intended-use
setting indicates that the attestation is not intended for any use but registration.</t>
          </dd>
          <dt>
3 -- Provisioning  </dt>
          <dd>
            <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess device security state of the entity prior to provisioning.</t>
          </dd>
          <dt>
4 -- Certificate Issuance (Certificate Signing Request)  </dt>
          <dd>
            <t>Certifying authorities (CA's) may require attestations prior to
the issuance of certificates related to keypairs hosted at the entity.  An
EAT may be used as part of the certificate signing request (CSR).</t>
          </dd>
          <dt>
5 -- Proof-of-Possession  </dt>
          <dd>
            <t>An EAT consumer may require an attestation as part of an accompanying 
proof-of-possession (PoP) appication. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has posession
of a key.  This kind of attestation may be neceesary to verify the
security state of the entity storing the private key used in a PoP application.</t>
          </dd>
        </dl>
        <section anchor="intended-use-cddl" numbered="true" toc="default">
          <name>intended-use CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
intended-use-cbor-type = &(
    generic: 1,
    registration: 2,
    provisioning: 3,
    csr: 4,
    pop:  5
)

intended-use-json-type = 
    "generic" /
    "registration" /
    "provisioning" /
    "csr" /
    "pop" 

intended-use-claim = (
    intended-use => intended-use-cbor-type / intended-use-json-type
)
]]></sourcecode>
        </section>
      </section>
      <section anchor="profile-claim" numbered="true" toc="default">
        <name>The Profile Claim (profile)</name>
        <t>See <xref target="profiles" format="default"/> for the detailed description of a profile.</t>
        <t>A profile is identified by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the profile claim is to uniquely identify the profile even if it is a private profile.</t>
        <t>The OID is encoded in CBOR according to <xref target="CBOR-OID" format="default"/> and the URI according to <xref target="RFC8949" format="default"/>.
Both are unwrapped and thus not tags.
The OID is always absolute and never relative.
If the claims CBOR type is a text string it is a URI and if a byte string it is an OID.</t>
        <t>Note that this named "eat_profile" for JWT and is distinct from the already registered "profile" claim in the JWT claims registry.</t>
        <sourcecode type="CDDL"><![CDATA[
oid = #6.4000(bstr) ; TODO: fill this in with correct CDDL from OID RFC

profile-claim = (
    profile => ~uri / ~oid
)
]]></sourcecode>
      </section>
      <section anchor="the-software-manifests-claim-manifests" numbered="true" toc="default">
        <name>The Software Manifests Claim (manifests)</name>
        <t>This claim contains descriptions of software that is present on the device.
These manifests are installed on the device when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the device, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is that they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the Verifier and/or the Relying Party.</t>
        <t>In some cases these will be signed by the software manufacturer independent of any signing for the purpose of EAT attestation.
Manifest claims should include the manufacturer's signature (which will be signed over  by the attestation signature).
In other cases the attestation signature will be the only one.</t>
        <t>This claim allows multiple formats for the manifest.
For example the manifest may be a CBOR-format CoSWID, an XML-format SWID or other.
Identification of the type of manifest is always by a CBOR tag.
In many cases, for examples CoSWID, a tag will already be registered with IANA.
If not, a tag MUST be registered.
It can be in the first-come-first-served space which has minimal requirements for registration.</t>
        <t>The claim is an array of one or more manifests.
To facilitate hand off of the manifest to a decoding library, each manifest is contained in a byte string.
This occurs for CBOR-format manifests as well as non-CBOR format manifests.</t>
        <t>If a particular manifest type uses CBOR encoding, then the item in the array for it MUST be a byte string that contains a CBOR tag.
The EAT decoder must decode the byte string and then the CBOR within it to find the tag number to identify the type of manifest.
The contents of the byte string is then handed to the particular manifest processor for that type of manifest.
CoSWID and SUIT manifest are examples of this.</t>
        <t>If a particular manifest type does not use CBOR encoding, then the item in the array for it must be a CBOR tag that contains a byte string.
The EAT decoder uses the tag to identify the processor for that type of manifest.
The contents of the tag, the byte string, are handed to the manifest processor.
Note that a byte string is used to contain the manifest whether it is a text based format or not.
An example of this is an XML format ISO/IEC 19770 SWID.</t>
        <t>It is not possible to describe the above requirements in CDDL so the type for an individual manifest is any in the CDDL below.
The above text sets the encoding requirement.</t>
        <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests may be of multiple formats.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
        <t>When the <xref target="CoSWID" format="default"/> format is used, it MUST be a payload CoSWID, not an evidence CoSWID.</t>
        <sourcecode type="CDDL"><![CDATA[
manifests-claim = (
    manifests => manifests-type
)

manifests-type = [+ $manifest-formats]

; Must be a CoSWID payload type
$manifest-formats /= bytes .cbor concise-swid-tag

$manifest-formats /= bytes .cbor SUIT_Envelope_Tagged

]]></sourcecode>
      </section>
      <section anchor="the-software-evidence-claim-swevidence" numbered="true" toc="default">
        <name>The Software Evidence Claim {swevidence}</name>
        <t>This claim contains descriptions, lists, evidence or measurements of the software that exists on the device.
The defining characteristic of this claim is that its contents are created by processes on the device that inventory, measure or otherwise characterize the software on the device.
The contents of this claim do not originate from the software manufacturer.</t>
        <t>In most cases the contents of this claim are signed as part of attestation signing, but independent signing in addition to the attestation signing is not ruled out when a particular evidence format supports it.</t>
        <t>This claim uses the same mechanism for identification of the type of the swevidence as is used for the type of the manifest in the manifests claim.
It also uses the same byte string based mechanism for containing the claim and easing the hand off to a processing library.
See the discussion above in the manifests claim.</t>
        <t>When the <xref target="CoSWID" format="default"/> format is used, it MUST be evidence CoSWIDs, not payload CoSWIDS.</t>
        <sourcecode type="CDDL"><![CDATA[
swevidence-claim = (
    swevidence => swevidence-type
)

swevidence-type = [+ $swevidence-formats]

; Must be a CoSWID evidence type
$swevidence-formats /= bytes .cbor concise-swid-tag

]]></sourcecode>
      </section>
      <section anchor="the-submodules-part-of-a-token-submods" numbered="true" toc="default">
        <name>The Submodules Part of a Token (submods)</name>
        <t>Some devices are complex, having many subsystems or submodules.  A
mobile phone is a good example. It may have several connectivity
submodules for communications (e.g., Wi-Fi and cellular). It may have
subsystems for low-power audio and video playback. It may have one or
more security-oriented subsystems like a TEE or a Secure Element.</t>
        <t>The claims for each these can be grouped together in a submodule.</t>
        <t>The submods part of a token are in a single map/object with many entries, one
per submodule.  There is only one submods map in a token. It is
identified by its specific label. It is a peer to other claims, but it
is not called a claim because it is a container for a claim set rather
than an individual claim. This submods part of a token allows what
might be called recursion. It allows claim sets inside of claim sets
inside of claims sets...</t>
        <section anchor="two-types-of-submodules" numbered="true" toc="default">
          <name>Two Types of Submodules</name>
          <t>Each entry in the submod map is one of two types:</t>
          <ul spacing="normal">
            <li>A non-token submodule that is a map or object directly containing claims for the submodule.</li>
            <li>A nested EAT that is a fully formed, independently signed EAT token</li>
          </ul>
          <section anchor="non-token-submodules" numbered="true" toc="default">
            <name>Non-token Submodules</name>
            <t>This is simply a map or object containing claims about the submodule.</t>
            <t>It may contain claims that are the same as its surrounding token or superior submodules. 
For example, the top-level of the token may have a UEID, a submod may have a different UEID and a further subordinate submodule may also have a UEID.</t>
            <t>It is signed/encrypted along with the rest of the token and thus the claims are secured by the same Attester with the same signing key as the rest of the token.</t>
            <t>If a token is in CBOR format (a CWT or a UCCS), all non-token submodules must be CBOR format.
If a token in in JSON format (a JWT), all non-token submodules must be in JSON format.</t>
            <t>When decoding, this type of submodule is recognized from the other type by being a data item of type map for CBOR or type object for JSON.</t>
          </section>
          <section anchor="nested-eats" numbered="true" toc="default">
            <name>Nested EATs</name>
            <t>This type of submodule is a fully formed secured EAT as defined in this document except that it MUST NOT be a UCCS or an unsecured JWT.
A nested token that is one that is always secured using COSE or JOSE, usually by an independent Attester.
When the surrounding EAT is a CWT or secured JWT, the nested token becomes securely bound with the other claims in the surrounding token.</t>
            <t>It is allowed to have a CWT as a submodule in a JWT and vice versa, but this SHOULD be avoided unless necessary.</t>
            <section anchor="surrounding-eat-is-cbor-format" numbered="true" toc="default">
              <name>Surrounding EAT is CBOR format</name>
              <t>They type of an EAT nested in a CWT is determined by whether the CBOR type is a text string or a byte string.
If a text string, then it is a JWT.
If a byte string, then it is a CWT.</t>
              <t>A CWT nested in a CBOR-format token is always wrapped by a byte string for easier handling with standard CBOR decoders and token processing APIs that will typically take a byte buffer as input.</t>
              <t>Nested CWTs may be either a CWT CBOR tag or a CWT Protocol Message.
COSE layers in nested CWT EATs MUST be a COSE_Tagged_Message, never a COSE_Untagged_Message.
If a nested EAT has more than one level of COSE, for example one that is both encrypted and signed, a COSE_Tagged_message must be used at every level.</t>
            </section>
            <section anchor="surrounding-eat-is-json-format" numbered="true" toc="default">
              <name>Surrounding EAT is JSON format</name>
              <t>When a CWT is nested in a JWT, it must be as a 55799 tag in order to distinguish it from a nested JWT.</t>
              <t>When a nested EAT in a JWT is decoded, first remove the base64url encoding.
Next, check to see if it starts with the bytes 0xd9d9f7.
If so, then it is a CWT as a JWT will never start with these four bytes. 
If not if it is a JWT.</t>
              <t>Other than the 55799 tag requirement, tag usage for CWT's nested in a JSON format token follow the same rules as for CWTs nested in CBOR-format tokens.
It may be a CWT CBOR tag or a CWT Protocol Message and COSE_Tagged_Message MUST be used at all COSE layers.</t>
            </section>
          </section>
          <section anchor="unsecured-jwts-and-uccs-tokens-as-submodules" numbered="true" toc="default">
            <name>Unsecured JWTs and UCCS Tokens as Submodules</name>
            <t>To incorporate a UCCS token as a submodule, it MUST be as a non-token submodule. 
This can be accomplished inserting the content of the UCCS Tag into the submodule map.
The content of a UCCS tag is exactly a map of claims as required for a non-token submodule.
If the UCCS is not a UCCS tag, then it can just be inserted into the submodule map directly.</t>
            <t>The definition of a nested EAT type of submodule is that it is one that is secured (signed) by an Attester.
Since UCCS tokens are unsecured, they do not fulfill this definition and must be non-token submodules.</t>
            <t>To incorporate an Unsecured JWT as a submodule, the null-security JOSE wrapping should be removed.
The resulting claims set should be inserted as a non-token submodule.</t>
            <t>To incorporate a UCCS token in a surrounding JSON token, the UCCS token claims should be translated from CBOR to JSON.
To incorporate an Unsecured JWT into a surrounding CBOR-format token, the null-security JOSE should be removed and the claims translated from JSON to CBOR.</t>
          </section>
        </section>
        <section anchor="no-inheritance" numbered="true" toc="default">
          <name>No Inheritance</name>
          <t>The subordinate modules do not inherit anything from the containing
token.  The subordinate modules must explicitly include all of their
claims. This is the case even for claims like the nonce and age.</t>
          <t>This rule is in place for simplicity. It avoids complex inheritance
rules that might vary from one type of claim to another.</t>
        </section>
        <section anchor="security-levels" numbered="true" toc="default">
          <name>Security Levels</name>
          <t>The security level of the non-token subordinate modules should always
be less than or equal to that of the containing modules in the case of non-token
submodules. It makes no sense for a module of lesser security to be
signing claims of a module of higher security. An example of this is a
TEE signing claims made by the non-TEE parts (e.g. the high-level OS)
of the device.</t>
          <t>The opposite may be true for the nested tokens. They usually have
their own more secure key material. An example of this is an embedded
secure element.</t>
        </section>
        <section anchor="submodule-names" numbered="true" toc="default">
          <name>Submodule Names</name>
          <t>The label or name for each submodule in the submods map is a text
string naming the submodule. No submodules may have the same name.</t>
        </section>
        <section anchor="submods-cddl" numbered="true" toc="default">
          <name>submods CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
; The part of a token that contains all the submodules.  It is a peer
; with the claims in the token, but not a claim, only a map/object to
; hold all the submodules.

submods-part = (
    submods => submods-type
)

submods-type = { + submod-type }


; The type of a submodule which can either be a nested claim set or a
; nested separately signed token. Nested tokens are wrapped in a bstr
; or a tstr.

submod-type = (
    submod-name => eat-claim-set / nested-token
)


; When this is a bstr, the contents are an eat-token in CWT or UCCS
; format.  When this is a tstr, the contents are an eat-token in JWT
; format.

nested-token = bstr / tstr; 


; Each submodule has a unique text string name.

submod-name = tstr 


]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="keyid" numbered="true" toc="default">
      <name>Endorsements and Verification Keys</name>
      <t>The Verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture" format="default"/> describes what is called an Endorsement.
This is an input to the Verifier that is usually the basis of the trust placed in an EAT and the Attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain Reference Values to which EAT claims are compared as part of the verification process.
It may contain implied claims, those that are passed on to the Relying Party in Attestation Results.</t>
      <t>There is not yet any standard format(s) for an Endorsement.
One format that may be used for an Endorsement is an X.509 certificate.
Endorsement data like Reference Values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the Endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an Endorsement.</t>
      <t>For the components (Attester, Verifier, Relying Party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <section anchor="identification-methods" numbered="true" toc="default">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes Endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for Endorsements in other formats. If such an Endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id" numbered="true" toc="default">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC8152" format="default"/> and <xref target="RFC7515" format="default"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters" numbered="true" toc="default">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft" format="default"/> and JSON Web Siganture <xref target="RFC7515" format="default"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an Endorsement and thus carrying additional input to the Verifier. It may be just an X.509 certificate, not an Endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the Verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters" numbered="true" toc="default">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft" format="default"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification" numbered="true" toc="default">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the device and therefore can work well as a key identifier or Endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
      <section anchor="other-considerations" numbered="true" toc="default">
        <name>Other Considerations</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the Verifier may be configured with a root certificate or a master key by the Verifier system administrator.</t>
        <t>Often an X.509 certificate or an Endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints and an Endorsement might have Reference Values.
When this is the case, the key identifier must be either a protected header or in the payload such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515" format="default"/>.</t>
      </section>
    </section>
    <section anchor="profiles" numbered="true" toc="default">
      <name>Profiles</name>
      <t>This EAT specification does not gaurantee that implementations of it will interoperate.
The variability in this specification is necessary to accommodate the widely varying use cases.
An EAT profile narrows the specification for a specific use case.
An ideal EAT profile will gauarantee interoperability.</t>
      <t>The profile can be named in the token using the profile claim described in <xref target="profile-claim" format="default"/>.</t>
      <section anchor="format-of-a-profile-document" numbered="true" toc="default">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>In some cases CDDL may be created that replaces CDDL in this or other document to express some profile requirements.
For example, to require the altitude data item in the location claim, CDDL can be written that replicates the location claim with the altitude no longer optional.</t>
      </section>
      <section anchor="list-of-profile-issues" numbered="true" toc="default">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, UCCS, JWS, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both" numbered="true" toc="default">
          <name>Use of JSON, CBOR or both</name>
          <t>The profile should indicate whether the token format should be CBOR, JSON, both or even some other encoding.
If some other encoding, a specification for how the CDDL described here is serialized in that encoding is necessary.</t>
          <t>This should be addressed for the top-level token and for any nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding" numbered="true" toc="default">
          <name>CBOR Map and Array Encoding</name>
          <t>The profile should indicate whether definite-length arrays/maps, indefinite-length arrays/maps or both are allowed.
A good default is to allow only definite-length arrays/maps.</t>
          <t>An alternate is to allow both definite and indefinite-length arrays/maps.
The decoder should accept either.
Encoders that need to fit on very small hardware or be actually implement in hardware can use indefinite-length encoding.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
        </section>
        <section anchor="cbor-string-encoding" numbered="true" toc="default">
          <name>CBOR String Encoding</name>
          <t>The profile should indicate whether definite-length strings, indefinite-length strings or both are allowed.
A good default is to allow only definite-length strings.
As with map and array encoding, allowing indefinite-length strings can be beneficial for some smaller implementations.</t>
        </section>
        <section anchor="cbor-preferred-serialization" numbered="true" toc="default">
          <name>CBOR Preferred Serialization</name>
          <t>The profile should indicate whether encoders must use preferred serialization.
The profile should indicate whether decoders must accept non-preferred serialization.</t>
        </section>
        <section anchor="cosejose-protection" numbered="true" toc="default">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
EAT/CWT has the option to have no protection using UCCS and JOSE has a NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, CWT and UCCS are allowed by EAT.</t>
          <t>The profile should list the protections that must be supported by all decoders implementing the profile.
The encoders them must implement a subset of what is listed for the decoders, perhaps only one.</t>
          <t>Implementations may choose to sign or MAC before encryption so that the implementation layer doing the signing or MACing can be the smallest.
It is often easier to make smaller implementations more secure, perhaps even implementing in solely in hardware.
The key material for a signature or MAC is a private key, while for encryption it is likely to be a public key.
The key for encryption requires less protection.</t>
        </section>
        <section anchor="cosejose-algorithms" numbered="true" toc="default">
          <name>COSE/JOSE Algorithms</name>
          <t>The profile document should list the COSE algorithms that a Verifier must implement.
The Attester will select one of them. 
Since there is no negotiation, the Verifier should implement all algorithms listed in the profile.</t>
        </section>
        <section anchor="verification-key-identification" numbered="true" toc="default">
          <name>Verification Key Identification</name>
          <t>Section <xref target="keyid" format="default"/> describes a number of methods for identifying a verification key.
The profile document should specify one of these or one that is not described.
The ones described in this document are only roughly described.
The profile document should go into the full detail.</t>
        </section>
        <section anchor="endorsement-identification" numbered="true" toc="default">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as Verification Key Identification, the profile may wish to specify how Endorsements are to be identified.
However note that Endorsement Identification is optional, where as key identification is not.</t>
        </section>
        <section anchor="freshness" numbered="true" toc="default">
          <name>Freshness</name>
          <t>Just about every use case will require some means of knowing the EAT is recent enough and not a replay of an old token.
The profile should describe how freshness is achieved.
The section on Freshness in <xref target="RATS-Architecture" format="default"/> describes some of the possible solutions to achieve this.</t>
        </section>
        <section anchor="required-claims" numbered="true" toc="default">
          <name>Required Claims</name>
          <t>The profile can list claims whose absence results in Verification failure.</t>
        </section>
        <section anchor="prohibited-claims" numbered="true" toc="default">
          <name>Prohibited Claims</name>
          <t>The profile can list claims whose presence results in Verification failure.</t>
        </section>
        <section anchor="additional-claims" numbered="true" toc="default">
          <name>Additional Claims</name>
          <t>The profile may describe entirely new claims.
These claims can be required or optional.</t>
        </section>
        <section anchor="refined-claim-definition" numbered="true" toc="default">
          <name>Refined Claim Definition</name>
          <t>The profile may lock down optional aspects of individual claims.
For example, it may require altitude in the location claim, or it may require that HW Versions always be described using EAN-13.</t>
        </section>
        <section anchor="cbor-tags" numbered="true" toc="default">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.
Similarly, the profile should specify whether the token should be a UCCS tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unncessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="manifests-and-software-evidence-claims" numbered="true" toc="default">
          <name>Manifests and Software Evidence Claims</name>
          <t>The profile should specify which formats are allowed for the manifests and software evidence claims.
The profile may also go on to say which parts and options of these formats are used, allowed and prohibited.</t>
        </section>
      </section>
    </section>
    <section anchor="encoding" numbered="true" toc="default">
      <name>Encoding</name>
      <t>This makes use of the types defined in CDDL Appendix D, Standard Prelude.</t>
      <t>Some of the CDDL included here is for claims that are defined in CWT <xref target="RFC8392" format="default"/> or JWT <xref target="RFC7519" format="default"/> or are in the IANA CWT or JWT registries.
CDDL was not in use when these claims where defined.</t>
      <section anchor="common-cddl-types" numbered="true" toc="default">
        <name>Common CDDL Types</name>
        <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
        <t>Note that unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949" format="default"/>.
They are just text strings that contain a URI.</t>
        <sourcecode type="CDDL"><![CDATA[
string-or-uri = tstr 

time-int = #6.1(int)
]]></sourcecode>
      </section>
      <section anchor="cddl-for-cwt-defined-claims" numbered="true" toc="default">
        <name>CDDL for CWT-defined Claims</name>
        <t>This section provides CDDL for the claims defined in CWT. It is
non-normative as <xref target="RFC8392" format="default"/> is the authoritative definition of these
claims.</t>
        <t>Note that the subject, issue and audience claims may be a text string containing a URI per <xref target="RFC8392" format="default"/> and <xref target="RFC7519" format="default"/>.
These are never the URI tag defined in <xref target="RFC8949" format="default"/>.</t>
        <sourcecode type="CDDL"><![CDATA[
$$eat-extension //= (
    ? issuer => text,
    ? subject => text,
    ? audience => text,
    ? expiration => time,
    ? not-before => time,
    ? issued-at => time,
    ? cwt-id => bytes,
)

issuer = 1
subject = 2
audience = 3
expiration = 4
not-before = 5
issued-at = 6
cwt-id = 7

]]></sourcecode>
      </section>
      <section anchor="json" numbered="true" toc="default">
        <name>JSON</name>
        <section anchor="json-labels" numbered="true" toc="default">
          <name>JSON Labels</name>
          <sourcecode type="JSON"><![CDATA[
; The following are Claim Keys (labels) assigned for JSON-encoded tokens.

ueid /= "ueid"
sueids /= "sueids"
nonce /= "nonce"
oemid /= "oemid"
security-level /= "seclevel"
secure-boot /= "secboot"
debug-status /= "dbgstat"
location /= "location"
uptime /= "uptime"
profile /= "eat-profile"
intended-use /= "intuse"
boot-seed /= "bootseed"
submods /= "submods"
timestamp /= "timestamp"
manifests /= "manifests"
swevidence /= "swevidence"

latitude /= "lat"
longitude /= "long"
altitude /= "alt"
accuracy /= "accry"
altitude-accuracy /= "alt-accry"
heading /= "heading"
speed /= "speed"
]]></sourcecode>
        </section>
        <section anchor="jsoninterop" numbered="true" toc="default">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per RFC 8610 Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- must be base64url encoded</li>
            <li>time -- must be encoded as NumericDate as described section 2 of <xref target="RFC7519" format="default"/>.</li>
            <li>string-or-uri -- must be encoded as StringOrURI as described section 2 of <xref target="RFC7519" format="default"/>.</li>
            <li>uri -- must be a URI <xref target="RFC3986" format="default"/>.</li>
            <li>oid -- encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1").</li>
          </ul>
        </section>
      </section>
      <section anchor="cbor" numbered="true" toc="default">
        <name>CBOR</name>
        <section anchor="cbor-interoperability" numbered="true" toc="default">
          <name>CBOR Interoperability</name>
          <t>CBOR allows data items to be serialized in more than one form.
If the sender uses a form that the receiver can't decode, there will not be interoperability.</t>
          <t>This specification gives no blanket requirements to narrow CBOR serialization for all uses of EAT.
This allows individual uses to tailor serialization to the environment.
It also may result in EAT implementations that don't interoperate.</t>
          <t>One way to guarantee interoperability is to clearly specify CBOR serialization in a profile document.
See <xref target="profiles" format="default"/> for a list of serialization issues that should be addressed.</t>
          <t>EAT will be commonly used where the device generating the attestation is constrained and the receiver/verifier of the attestation is a capacious server.
Following is a set of serialization requirements that work well for that use case and are guaranteed to interoperate.
Use of this serialization is recommended where possible, but not required.
An EAT profile may just reference the following section rather than spell out serialization details.</t>
          <section anchor="eat-constrained-device-serialization" numbered="true" toc="default">
            <name>EAT Constrained Device Serialization</name>
            <ul spacing="normal">
              <li>Preferred serialization described in section 4.1 of <xref target="RFC8949" format="default"/> is not required.
The EAT decoder must accept all forms of number serialization.
The EAT encoder may use any form it wishes.</li>
              <li>The EAT decoder must accept indefinite length arrays and maps as described in section 3.2.2 of <xref target="RFC8949" format="default"/>.
The EAT encoder may use indefinite length arrays and maps if it wishes.</li>
              <li>The EAT decoder must accept indefinite length strings as described in section 3.2.3 of <xref target="RFC8949" format="default"/>.
The EAT encoder may use indefinite length strings if it wishes.</li>
              <li>Sorting of maps by key is not required.
The EAT decoder must not rely on sorting.</li>
              <li>Deterministic encoding described in Section 4.2 of <xref target="RFC8949" format="default"/> is not required.</li>
              <li>Basic validity described in section 5.3.1 of <xref target="RFC8949" format="default"/> must be followed.
The EAT encoder must not send duplicate map keys/labels or invalid UTF-8 strings.</li>
            </ul>
          </section>
        </section>
      </section>
      <section anchor="collected-cddl" numbered="true" toc="default">
        <name>Collected CDDL</name>
        <sourcecode type="CDDL"><![CDATA[
; This is the top-level definition of the claims in EAT tokens.  To
; form an actual EAT Token, this claim set is enclosed in a COSE, JOSE
; or UCCS message.

eat-claim-set = {
    ? ueid-claim,
    ? sueids-claim,
    ? nonce-claim,
    ? oemid-claim,
    ? hardware-version-claims,
    ? security-level-claim,
    ? secure-boot-claim,
    ? debug-status-claim,
    ? location-claim,
    ? intended-use-claim,
    ? profile-claim,
    ? uptime-claim,
    ? manifests-claim,
    ? swevidence-claim,
    ? submods-part,
    * $$eat-extension,
}


; This is the top-level definition of an EAT Token.  It is a CWT, JWT
; or UCSS where the payload is an eat-claim-set. A JWT_Message is what
; is defined by JWT in RFC 7519. (RFC 7519 doesn't use CDDL so a there
; is no actual CDDL definition of JWT_Message).

eat-token = EAT_Tagged_Message / EAT_Untagged_Message / JWT_Message


; This is CBOR-format EAT token in the CWT or UCCS format that is a
; tag.  COSE_Tagged_message is defined in RFC 8152.  Tag 601 is
; proposed by the UCCS draft, but not yet assigned.

EAT_Tagged_Message = #6.61(COSE_Tagged_Message) / #6.601(eat-claim-set)


; This is a CBOR-format EAT token that is a CWT or UCSS that is not a
; tag COSE_Tagged_message and COSE_Untagged_Message are defined in RFC
; 8152.

EAT_Untagged_Message = COSE_Tagged_Message / COSE_Untagged_Message / UCCS_Untagged_Message


; This is an "unwrapped" UCCS tag. Unwrapping a tag means to use the
; definition of its content without the preceding type 6 tag
; integer. Since a UCCS is nothing but a tag for an unsecured CWT
; claim set, unwrapping reduces to a bare eat-claim-set.

UCCS_Untagged_Message = eat-claim-set


string-or-uri = tstr 

time-int = #6.1(int)

$$eat-extension //= (
    ? issuer => text,
    ? subject => text,
    ? audience => text,
    ? expiration => time,
    ? not-before => time,
    ? issued-at => time,
    ? cwt-id => bytes,
)

issuer = 1
subject = 2
audience = 3
expiration = 4
not-before = 5
issued-at = 6
cwt-id = 7


debug-status-cbor-type = &(
    enabled: 0,
    disabled: 1,
    disabled-since-boot: 2,
    disabled-permanently: 3,
    disabled-fully-and-permanently: 4
)

debug-status-json-type = 
    "enabled" /
    "disabled" /
    "disabled-since-boot" /
    "disabled-permanently" /
    "disabled-fully-and-permanently"

debug-status-claim = (
    debug-status => debug-status-cbor-type / debug-status-json-type
)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude = 1 / "latitude"
longitude = 2 / "longitude"
altitude = 3 / "altitude"
accuracy = 4 / "accuracy"
altitude-accuracy = 5 / "altitude-accuracy"
heading = 6 / "heading"
speed = 7 / "speed"
timestamp = 8 / "timestamp"
age = 9 / "age"

location-claim = (
    location-label => location-type
)

nonce-type = bstr .size (8..64)

nonce-claim = (
    nonce => nonce-type / [ 2* nonce-type ]
)

oemid-claim = (
    oemid => bstr
)

hw-version-type = [
    version:  tstr,
    scheme:  $version-scheme
]

chip-version-claim = (
    chip-version => hw-version-type
)

board-version-claim = (
    board-version => hw-version-type
)

device-version-claim = (
    device-version => hw-version-type
)

hardware-version-claims = (
    ? chip-version-claim,
    ? board-version-claim,
    ? device-version-claim,
)


secure-boot-claim = (
    secure-boot => bool
)

security-level-cbor-type = &(
    unrestricted: 1,
    restricted: 2,
    secure-restricted: 3,
    hardware: 4
)

security-level-json-type = 
    "unrestricted" /
    "restricted" /
    "secure-restricted" /
    "hardware"

security-level-claim = (
    security-level => security-level-cbor-type / security-level-json-type
)

; The part of a token that contains all the submodules.  It is a peer
; with the claims in the token, but not a claim, only a map/object to
; hold all the submodules.

submods-part = (
    submods => submods-type
)

submods-type = { + submod-type }


; The type of a submodule which can either be a nested claim set or a
; nested separately signed token. Nested tokens are wrapped in a bstr
; or a tstr.

submod-type = (
    submod-name => eat-claim-set / nested-token
)


; When this is a bstr, the contents are an eat-token in CWT or UCCS
; format.  When this is a tstr, the contents are an eat-token in JWT
; format.

nested-token = bstr / tstr; 


; Each submodule has a unique text string name.

submod-name = tstr 



ueid-type = bstr .size (7..33)

ueid-claim = (
     ueid => ueid-type
)

sueids-type = {
    + tstr => ueid-type
}

sueids-claim = (
     sueids => sueids-type
)

intended-use-cbor-type = &(
    generic: 1,
    registration: 2,
    provisioning: 3,
    csr: 4,
    pop:  5
)

intended-use-json-type = 
    "generic" /
    "registration" /
    "provisioning" /
    "csr" /
    "pop" 

intended-use-claim = (
    intended-use => intended-use-cbor-type / intended-use-json-type
)

oid = #6.4000(bstr) ; TODO: fill this in with correct CDDL from OID RFC

profile-claim = (
    profile => ~uri / ~oid
)

uptime-claim = (
    uptime => uint
)

manifests-claim = (
    manifests => manifests-type
)

manifests-type = [+ $manifest-formats]

; Must be a CoSWID payload type
$manifest-formats /= bytes .cbor concise-swid-tag

$manifest-formats /= bytes .cbor SUIT_Envelope_Tagged


swevidence-claim = (
    swevidence => swevidence-type
)

swevidence-type = [+ $swevidence-formats]

; Must be a CoSWID evidence type
$swevidence-formats /= bytes .cbor concise-swid-tag


; The following Claim Keys (labels) are pre-assigned by IANA.
; They are for CBOR-based tokens (CWT and UCCS).
; They are not expected to change in the final publication as an RFC.

nonce = 10
ueid = 11
oemid = 13
security-level = 14
secure-boot = 15
debug-status = 16
location-label = 17
profile = 18
submods = 20


boot-seed-claim = (
    boot-seed => bytes
)

; The following are Claim Keys (labels) assigned for JSON-encoded tokens.

ueid /= "ueid"
sueids /= "sueids"
nonce /= "nonce"
oemid /= "oemid"
security-level /= "seclevel"
secure-boot /= "secboot"
debug-status /= "dbgstat"
location /= "location"
uptime /= "uptime"
profile /= "eat-profile"
intended-use /= "intuse"
boot-seed /= "bootseed"
submods /= "submods"
timestamp /= "timestamp"
manifests /= "manifests"
swevidence /= "swevidence"

latitude /= "lat"
longitude /= "long"
altitude /= "alt"
accuracy /= "accry"
altitude-accuracy /= "alt-accry"
heading /= "heading"
speed /= "speed"

]]></sourcecode>
      </section>
    </section>
    <section anchor="iana-considerations" numbered="true" toc="default">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-web-token-cwt-claims-registry" numbered="true" toc="default">
        <name>Reuse of CBOR Web Token (CWT) Claims Registry</name>
        <t>Claims defined for EAT are compatible with those of CWT
so the CWT Claims Registry is re used. No new IANA registry
is created. All EAT claims should be registered in the
CWT and JWT Claims Registries.</t>
      </section>
      <section anchor="claim-characteristics" numbered="true" toc="default">
        <name>Claim Characteristics</name>
        <t>The following is design guidance for creating new EAT claims, particularly those to be registered with IANA.</t>
        <t>Much of this guidance is generic and could also be considered when designing new CWT or JWT claims.</t>
        <section anchor="interoperability-and-relying-party-orientation" numbered="true" toc="default">
          <name>Interoperability and Relying Party Orientation</name>
          <t>It is a broad goal that EATs can be processed by relying parties in a general way regardless of the type, manufacturer or technology of the device from which they originate. 
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
          <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
        </section>
        <section anchor="operating-system-and-technology-neutral" numbered="true" toc="default">
          <name>Operating System and Technology Neutral</name>
          <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
          <t>Claims should not be defined such that they are specific to a SW environment or programming language.</t>
          <t>Claims should not be defined such that they are specific to a chip or particular hardware. 
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
          <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
        </section>
        <section anchor="security-level-neutral" numbered="true" toc="default">
          <name>Security Level Neutral</name>
          <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists. 
Secure Elements and smart cards are examples of this. 
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
          <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
        </section>
        <section anchor="reuse-of-extant-data-formats" numbered="true" toc="default">
          <name>Reuse of Extant Data Formats</name>
          <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
          <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON format for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
          <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
        </section>
        <section anchor="proprietary-claims" numbered="true" toc="default">
          <name>Proprietary Claims</name>
          <t>EAT allows the definition and use of proprietary claims.</t>
          <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer. 
This is a supported use case.</t>
          <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
        </section>
      </section>
      <section anchor="claims-registered-by-this-document" numbered="true" toc="default">
        <name>Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519" format="default"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392" format="default"/>. Each entry below is an addition to both registries (except
for the nonce claim which is already registered for JWT, but not registered for CWT).</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <section anchor="claims-for-early-assignment" numbered="true" toc="default">
          <name>Claims for Early Assignment</name>
          <t>RFC Editor: in the final publication this section should be combined with the following
section as it will no longer be necessary to distinguish claims with early assignment.
Also, the following paragraph should be removed.</t>
          <t>The claims in this section have been (requested for / given) early assignment according to <xref target="RFC7120" format="default"/>.
They have been assigned values and registered before final publication of this document.
While their semantics is not expected to change in final publication, it is possible that they will.
The JWT Claim Names and CWT Claim Keys are not expected to change.</t>
          <ul spacing="normal">
            <li>Claim Name: Nonce</li>
            <li>Claim Description: Nonce</li>
            <li>JWT Claim Name: "nonce" (already registered for JWT)</li>
            <li>Claim Key: 10</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <xref target="OpenIDConnectCore" format="default"/>, <strong>this document</strong></li>
          </ul>
          <t>&nbsp;</t>
          <ul spacing="normal">
            <li>Claim Name: UEID</li>
            <li>Claim Description: The Universal Entity ID</li>
            <li>JWT Claim Name: "ueid"</li>
            <li>CWT Claim Key: 11</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t>&nbsp;</t>
          <ul spacing="normal">
            <li>Claim Name: OEMID</li>
            <li>Claim Description: IEEE-based OEM ID</li>
            <li>JWT Claim Name: "oemid"</li>
            <li>Claim Key: 13</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t>&nbsp;</t>
          <ul spacing="normal">
            <li>Claim Name: Security Level</li>
            <li>Claim Description: Characterization of the security of an Attester or submodule</li>
            <li>JWT Claim Name: "seclevel"</li>
            <li>Claim Key: 14</li>
            <li>Claim Value Type(s): integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t>&nbsp;</t>
          <ul spacing="normal">
            <li>Claim Name: Secure Boot</li>
            <li>Claim Description: Indicate whether the boot was secure</li>
            <li>JWT Claim Name: "secboot"</li>
            <li>Claim Key: 15</li>
            <li>Claim Value Type(s): Boolean</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t>&nbsp;</t>
          <ul spacing="normal">
            <li>Claim Name: Debug Status</li>
            <li>Claim Description: Indicate status of debug facilities</li>
            <li>JWT Claim Name: "dbgstat"</li>
            <li>Claim Key: 16</li>
            <li>Claim Value Type(s): integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t>&nbsp;</t>
          <ul spacing="normal">
            <li>Claim Name: Location</li>
            <li>Claim Description: The geographic location</li>
            <li>JWT Claim Name: "location"</li>
            <li>Claim Key: 17</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t>&nbsp;</t>
          <ul spacing="normal">
            <li>Claim Name: Profile</li>
            <li>Claim Description: Indicates the EAT profile followed</li>
            <li>JWT Claim Name: "eat_profile"</li>
            <li>Claim Key: 18</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t>&nbsp;</t>
          <ul spacing="normal">
            <li>Claim Name: Submodules Section</li>
            <li>Claim Description: The section containing submodules (not actually a claim)</li>
            <li>JWT Claim Name: "submods"</li>
            <li>Claim Key: 20</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="to-be-assigned-claims" numbered="true" toc="default">
          <name>To be Assigned Claims</name>
          <t>TODO: add the rest of the claims in here</t>
        </section>
        <section anchor="registerversionscheme" numbered="true" toc="default">
          <name>Version Schemes Registered by this Document</name>
          <t>IANA is requested to register a new value in the "Software Tag Version Scheme Values" established by <xref target="CoSWID" format="default"/>.</t>
          <t>The new value is a version scheme a 13-digit European Article Number <xref target="EAN-13" format="default"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.
This version scheme is the ASCII text representation of EAN-13 digits, the same ones often printed with a bar code.
This version scheme must comply with the EAN allocation and assignment rules.
For example, this requires the manufacturer to obtain a manufacture code from GS1.</t>
          <table align="center">
            <thead>
              <tr>
                <th align="left">Index</th>
                <th align="left">Version Scheme Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">5</td>
                <td align="left">ean-13</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations" numbered="true" toc="default">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations" numbered="true" toc="default">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Any set of relying parties
that receives tokens that happen to be from a single device will be
able to know the tokens are all from the same device and be able to
track the device. Thus, in many usage situations UEID violates
governmental privacy regulation. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The device obtains explicit permission from the user of the device
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one relying party.</li>
          <li>The device authenticates the relying party and generates a derived
UEID/SUEID just for that particular relying party.  For example, the relying
party could prove their identity cryptographically to the device, then
the device generates a UEID just for that relying party by hashing a
proofed relying party ID with the main device UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per device. Each UEID/SUEID is used in a
different context, use case or system on the device. However, from the
view of the relying party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations" numbered="true" toc="default">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the device generating the attestation.
For example, many mobile phones prompt the user for permission when before sending location data.</t>
      </section>
    </section>
    <section anchor="securitycons" numbered="true" toc="default">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392" format="default"/> and Section 11
of <xref target="RFC7519" format="default"/> apply to EAT in its CWT and JWT form, respectively.  In addition, 
implementors should consider the following.</t>
      <section anchor="key-provisioning" numbered="true" toc="default">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manfuacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949" format="default"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material" numbered="true" toc="default">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="transport-security" numbered="true" toc="default">
        <name>Transport Security</name>
        <t>As stated in Section 8 of <xref target="RFC8392" format="default"/>, "The security of the CWT relies
upon on the protections offered by COSE".  Similar considerations
apply to EAT when sent as a CWT.  However, EAT introduces the concept
of a nonce to protect against replay.  Since an EAT may be created by
an entity that may not support the same type of transport security as
the consumer of the EAT, intermediaries may be required to bridge
communications between the entity and consumer.  As a result, it is
RECOMMENDED that both the consumer create a nonce, and the entity
leverage the nonce along with COSE mechanisms for encryption and/or
signing to create the EAT.</t>
        <t>Similar considerations apply to the use of EAT as a JWT.  Although the
security of a JWT leverages the JSON Web Encryption (JWE) and JSON Web
Signature (JWS) specifications, it is still recommended to make use of
the EAT nonce.</t>
      </section>
      <section anchor="multiple-eat-consumers" numbered="true" toc="default">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer should leverage a secure protocol (e.g.one that
uses transport-layer security, i.e. TLS),</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then transport security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner">
              <organization/>
            </author>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC7515" target="https://www.rfc-editor.org/info/rfc7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC8949" target="https://www.rfc-editor.org/info/rfc8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman">
              <organization/>
            </author>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7517" target="https://www.rfc-editor.org/info/rfc7517">
          <front>
            <title>JSON Web Key (JWK)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key.  This specification also defines a JWK Set JSON data structure that represents a set of JWKs.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries established by that specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7517"/>
          <seriesInfo name="DOI" value="10.17487/RFC7517"/>
        </reference>
        <reference anchor="RFC7519" target="https://www.rfc-editor.org/info/rfc7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC7800" target="https://www.rfc-editor.org/info/rfc7800">
          <front>
            <title>Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="April" year="2016"/>
            <abstract>
              <t>This specification describes how to declare in a JSON Web Token (JWT) that the presenter of the JWT possesses a particular proof-of- possession key and how the recipient can cryptographically confirm proof of possession of the key by the presenter.  Being able to prove possession of a key is also sometimes described as the presenter being a holder-of-key.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7800"/>
          <seriesInfo name="DOI" value="10.17487/RFC7800"/>
        </reference>
        <reference anchor="RFC8126" target="https://www.rfc-editor.org/info/rfc8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <author fullname="T. Narten" initials="T." surname="Narten">
              <organization/>
            </author>
            <date month="June" year="2017"/>
            <abstract>
              <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="RFC8152" target="https://www.rfc-editor.org/info/rfc8152">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad">
              <organization/>
            </author>
            <date month="July" year="2017"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8152"/>
          <seriesInfo name="DOI" value="10.17487/RFC8152"/>
        </reference>
        <reference anchor="RFC8392" target="https://www.rfc-editor.org/info/rfc8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610" target="https://www.rfc-editor.org/info/rfc8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz">
              <organization/>
            </author>
            <author fullname="C. Vigano" initials="C." surname="Vigano">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8747" target="https://www.rfc-editor.org/info/rfc8747">
          <front>
            <title>Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="L. Seitz" initials="L." surname="Seitz">
              <organization/>
            </author>
            <author fullname="G. Selander" initials="G." surname="Selander">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="March" year="2020"/>
            <abstract>
              <t>This specification describes how to declare in a CBOR Web Token (CWT) (which is defined by RFC 8392) that the presenter of the CWT possesses a particular proof-of-possession key. Being able to prove possession of a key is also sometimes described as being the holder-of-key. This specification provides equivalent functionality to "Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)" (RFC 7800) but using Concise Binary Object Representation (CBOR) and CWTs rather than JavaScript Object Notation (JSON) and JSON Web Tokens (JWTs).</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8747"/>
          <seriesInfo name="DOI" value="10.17487/RFC8747"/>
        </reference>
        <reference anchor="RFC3986" target="https://www.rfc-editor.org/info/rfc3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee">
              <organization/>
            </author>
            <author fullname="R. Fielding" initials="R." surname="Fielding">
              <organization/>
            </author>
            <author fullname="L. Masinter" initials="L." surname="Masinter">
              <organization/>
            </author>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RATS.Architecture" target="https://tools.ietf.org/html/draft-ietf-rats-architecture-08">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz">
              <organization/>
            </author>
            <date year="2020"/>
          </front>
        </reference>
        <reference anchor="COSE.X509.Draft" target="https://tools.ietf.org/html/draft-ietf-cose-x509-08">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header parameters for carrying and referencing X.509 certificates</title>
            <author fullname="J. Schaad">
              <organization/>
            </author>
            <date year="2020"/>
          </front>
        </reference>
        <reference anchor="CBOR.Cert.Draft" target="https://tools.ietf.org/html/draft-mattsson-cose-cbor-cert-compress-05">
          <front>
            <title>CBOR Encoding of X.509 Certificates (CBOR Certificates)</title>
            <author fullname="S. Raza">
              <organization/>
            </author>
            <date year="2020"/>
          </front>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="UCCS.Draft" target="https://tools.ietf.org/html/draft-birkholz-rats-uccs-01">
          <front>
            <title>A CBOR Tag for Unprotected CWT Claims Sets</title>
            <author fullname="Henk Birkholz">
              <organization/>
            </author>
            <date year="2020"/>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="FIDO.AROE" target="https://fidoalliance.org/specs/fido-uaf-v1.0-fd-20191115/fido-allowed-AROE-v1.0-fd-20191115.html">
          <front>
            <title>FIDO Authenticator Allowed Restricted Operating Environments List</title>
            <author>
              <organization>The FIDO Alliance</organization>
            </author>
            <date year="2019" month="November"/>
          </front>
        </reference>
        <reference anchor="EAN-13" target="https://www.gs1.org/standards/barcodes/ean-upc">
          <front>
            <title>International Article Number - EAN/UPC barcodes</title>
            <author>
              <organization>GS1</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID" target="https://tools.ietf.org/html/draft-ietf-sacm-coswid-16">
          <front>
            <title>Concise Software Identification Tags</title>
            <author>
              <organization/>
            </author>
            <date year="2020" month="November"/>
          </front>
        </reference>
        <reference anchor="OpenIDConnectCore" target="https://openid.net/specs/openid-connect-core-1_0.html">
          <front>
            <title>OpenID Connect Core 1.0 incorporating errata set 1</title>
            <author fullname="N. Sakimura">
              <organization/>
            </author>
            <author fullname="J. Bradley">
              <organization/>
            </author>
            <author fullname="M. Jones">
              <organization/>
            </author>
            <author fullname="B. de Medeiros">
              <organization/>
            </author>
            <author fullname="C. Mortimore">
              <organization/>
            </author>
            <date year="2014" month="November"/>
          </front>
        </reference>
        <reference anchor="CBOR-OID" target="https://www.ietf.org/archive/id/draft-ietf-cbor-tags-oid-08.txt">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="Carsten Bormann">
              <organization>Universität Bremen TZI</organization>
            </author>
            <date day="21" month="May" year="2021"/>
            <abstract>
              <t>   The Concise Binary Object Representation (CBOR, RFC 8949) is a data
   format whose design goals include the possibility of extremely small
   code size, fairly small message size, and extensibility without the
   need for version negotiation.

   The present document defines CBOR tags for object identifiers (OIDs).
   It is intended as the reference document for the IANA registration of
   the CBOR tags so defined.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cbor-tags-oid-08"/>
        </reference>
        <reference anchor="RATS-Architecture" target="https://www.ietf.org/archive/id/draft-ietf-rats-architecture-12.txt">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="23" month="April" year="2021"/>
            <abstract>
              <t>   In network protocol exchanges it is often useful for one end of a
   communication to know whether the other end is in an intended
   operating state.  This document provides an architectural overview of
   the entities involved that make such tests possible through the
   process of generating, conveying, and evaluating evidentiary claims.
   An attempt is made to provide for a model that is neutral toward
   processor architectures, the content of claims, and protocols.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-12"/>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122" target="https://www.rfc-editor.org/info/rfc4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach">
              <organization/>
            </author>
            <author fullname="M. Mealling" initials="M." surname="Mealling">
              <organization/>
            </author>
            <author fullname="R. Salz" initials="R." surname="Salz">
              <organization/>
            </author>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4949" target="https://www.rfc-editor.org/info/rfc4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey">
              <organization/>
            </author>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120" target="https://www.rfc-editor.org/info/rfc7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC                        Required", "IETF Review", or "Standards Action" policies apply.  This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation.  The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">
          <front>
            <title>IEEE Standard, "IEEE 802.1AR Secure Device Identifier"</title>
            <author>
              <organization/>
            </author>
            <date year="2009" month="December"/>
          </front>
        </reference>
        <reference anchor="ECMAScript" target="http://www.ecma-international.org/ecma-262/5.1/ECMA-262.pdf">
          <front>
            <title>Ecma International, "ECMAScript Language Specification, 5.1 Edition", ECMA Standard 262</title>
            <author>
              <organization/>
            </author>
            <date year="2011" month="June"/>
          </front>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/geolocation-API/#coordinates_interface">
          <front>
            <title>Geolocation API Specification 2nd Edition</title>
            <author>
              <organization>Worldwide Web Consortium</organization>
            </author>
            <date year="2018" month="January"/>
          </front>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://webstore.ansi.org/standards/ieee/ieee8022001r2007">
          <front>
            <title>IEEE Standard For Local And Metropolitan Area Networks Overview And Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2007"/>
          </front>
        </reference>
        <reference anchor="FIDO.Registry" target="https://fidoalliance.org/specs/common-specs/fido-registry-v2.1-ps-20191217.html">
          <front>
            <title>FIDO Registry of Predefined Values</title>
            <author>
              <organization>The FIDO Alliance</organization>
            </author>
            <date year="2019" month="December"/>
          </front>
        </reference>
        <reference anchor="FIPS-140" target="https://csrc.nist.gov/publications/detail/fips/140/2/final">
          <front>
            <title>Security Requirements for Cryptographic Modules</title>
            <author>
              <organization>National Institue of Standards</organization>
            </author>
            <date year="2001" month="May"/>
          </front>
        </reference>
        <reference anchor="Common.Criteria" target="https://www.commoncriteriaportal.org/cc/">
          <front>
            <title>Common Criteria for Information Technology Security Evaluation</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="April"/>
          </front>
        </reference>
      </references>
    </references>
    <section anchor="examples" numbered="true" toc="default">
      <name>Examples</name>
      <section anchor="very-simple-eat" numbered="true" toc="default">
        <name>Very Simple EAT</name>
        <t>This is shown in CBOR diagnostic form. Only the payload signed by COSE
is shown.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
{
    / issuer /           1: "joe",
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /            11: h'0198f50a4ff6c05861c8860d13a638ea',
    / secure-boot /     15: true,
    / debug-disable /   16: 3, / permanent-disable /
    / timestamp (iat) /  6: 1(1526542894)
}
]]></artwork>
      </section>
      <section anchor="example-with-submodules-nesting-and-security-levels" numbered="true" toc="default">
        <name>Example with Submodules, Nesting and Security Levels</name>
        <artwork name="" type="" align="left" alt=""><![CDATA[
{
    / nonce /                 10: h'948f8860d13a463e8e',
    / UEID /                  11: h'0198f50a4ff6c05861c8860d13a638ea',
    / secure-boot /           15: true,
    / debug-disable /         16: 3, / permanent-disable  /
    / timestamp (iat) /        6: 1(1526542894),
    / security-level /        14: 3, / secure restricted OS /
    / submods / 20: {
        / first submod, an Android Application /
        "Android App Foo" :  {
            / security-level /  14: 1 / unrestricted /
        },

        / 2nd submod, A nested EAT from a secure element /
        "Secure Element Eat" :
            / an embedded EAT, bytes of which are not shown /
            h'420123',

        / 3rd submod, information about Linux Android /
        "Linux Android": {
            / security-level /  14: 1 / unrestricted /
        }
    }
}
]]></artwork>
      </section>
    </section>
    <section anchor="ueid-design-rationale" numbered="true" toc="default">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability" numbered="true" toc="default">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion datadbase is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table align="center">
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and SW so this
simple approximation is used. See <xref target="BirthdayAttack" format="default"/>.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
    p = k^2 / 2n 
]]></artwork>
        <t>For this calculation:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
    p  Collision Probability
    n  Total population based on number of bits in UEID
    k  Population in a database
]]></artwork>
        <table align="center">
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's 
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of 
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
  t = 1 / ((k / 10) * p)
  
  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table align="center">
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid" numbered="true" toc="default">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122" format="default"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this 
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality 
random numbers, but do so by mapping into the overall UUID 
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>UUIDs seem to have been designed for scenarios where the implementor
does not have full control over the environment and uniqueness has to
be constructed from identifiers at hand. UEID takes the view that
hardware, software and/or manufacturing process directly implement
UEID in a simple and direct way. It takes the view that cryptographic
quality random number generators are readily available as they are
implemented in commonly used CPU hardware.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid" numbered="true" toc="default">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR" format="default"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR" format="default"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs are used with an open set of network protocols for authentication and such.
In these protocols the DevID secret is used to sign a nonce or similar to proof the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT defines network protocol for proving trustworthiness to a relying party, the very thing that is not defined in <xref target="IEEE.802.1AR" format="default"/>.
Nor does not give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat" numbered="true" toc="default">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT defines a network protocol and <xref target="IEEE.802.1AR" format="default"/> doesn't.
Vice versa, EAT doesn't define a an device implementation and DevID does.</t>
        <t>Hence, EAT can be the network protocol that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the Endorsement sent to the Verifier.</t>
        <t>In this case the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity" numbered="true" toc="default">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat" numbered="true" toc="default">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence" numbered="true" toc="default">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR" format="default"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR" format="default"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts" numbered="true" toc="default">
      <name>Changes from Previous Drafts</name>
      <t>The following is a list of known changes from the previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences.</t>
      <section anchor="from-draft-rats-eat-01" numbered="true" toc="default">
        <name>From draft-rats-eat-01</name>
        <ul spacing="normal">
          <li>Added UEID design rationale appendix</li>
        </ul>
      </section>
      <section anchor="from-draft-mandyam-rats-eat-00" numbered="true" toc="default">
        <name>From draft-mandyam-rats-eat-00</name>
        <t>This is a fairly large change in the orientation of the document, but
no new claims have been added.</t>
        <ul spacing="normal">
          <li>Separate information and data model using CDDL.</li>
          <li>Say an EAT is a CWT or JWT</li>
          <li>Use a map to structure the boot_state and location claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-01" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-01</name>
        <ul spacing="normal">
          <li>Clarifications and corrections for OEMID claim</li>
          <li>Minor spelling and other fixes</li>
          <li>Add the nonce claim, clarify jti claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-02" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-02</name>
        <ul spacing="normal">
          <li>Roll all EUIs back into one UEID type</li>
          <li>UEIDs can be one of three lengths, 128, 192 and 256.</li>
          <li>Added appendix justifying UEID design and size.</li>
          <li>Submods part now includes nested eat tokens so they can be named and
there can be more tha one of them</li>
          <li>Lots of fixes to the CDDL</li>
          <li>Added security considerations</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-03" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-03</name>
        <ul spacing="normal">
          <li>Split boot_state into secure-boot and debug-disable claims</li>
          <li>Debug disable is an enumerated type rather than Booleans</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-04" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-04</name>
        <ul spacing="normal">
          <li>Change IMEI-based UEIDs to be encoded as a 14-byte string</li>
          <li>CDDL cleaned up some more</li>
          <li>CDDL allows for JWTs and UCCSs</li>
          <li>CWT format submodules are byte string wrapped</li>
          <li>Allows for JWT nested in CWT and vice versa</li>
          <li>Allows UCCS (unsigned CWTs) and JWT unsecured tokens</li>
          <li>Clarify tag usage when nesting tokens</li>
          <li>Add section on key inclusion</li>
          <li>Add hardware version claims</li>
          <li>Collected CDDL is now filled in. Other CDDL corrections.</li>
          <li>Rename debug-disable to debug-status; clarify that it is not extensible</li>
          <li>Security level claim is not extensible</li>
          <li>Improve specification of location claim and added a location privacy section</li>
          <li>Add intended use claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-05" numbered="true" toc="default">
        <name>From draft-ietf-rats-05</name>
        <ul spacing="normal">
          <li>CDDL format issues resolved</li>
          <li>Corrected reference to Location Privacy section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-06" numbered="true" toc="default">
        <name>From draft-ietf-rats-06</name>
        <ul spacing="normal">
          <li>Added boot-seed claim</li>
          <li>Rework CBOR interoperability section</li>
          <li>Added profiles claim and section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-07" numbered="true" toc="default">
        <name>From draft-ietf-rats-07</name>
        <ul spacing="normal">
          <li>Filled in IANA and other sections for possible preassignment of claim keys for well understood claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-08" numbered="true" toc="default">
        <name>From draft-ietf-rats-08</name>
        <ul spacing="normal">
          <li>Change profile claim to be either a URL or an OID rather than a test string</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-09" numbered="true" toc="default">
        <name>From draft-ietf-rats-09</name>
        <ul spacing="normal">
          <li>Add SUEIDs</li>
          <li>Add appendix comparing IDevID to EAT</li>
          <li>Added section on use for Evidence and Attestation Results</li>
          <li>Fill in the key ID and endorsements identificaiton section</li>
          <li>Remove origination claim as it is replaced by key IDs and endorsements</li>
          <li>Added manifests and software evidence claims</li>
          <li>Add string labels non-claim labels for use with JSON (e.g. labels for members of location claim)</li>
          <li>EAN-13 HW versions are no longer a separate claim. Now they are folded in as a CoSWID version scheme.</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-10" numbered="true" toc="default">
        <name>From draft-ietf-rats-10</name>
        <ul spacing="normal">
          <li>Hardware version is made into an array of two rather than two claims</li>
        </ul>
      </section>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIACvC72AAA+y963Ib2ZEu+r+eooLt2E22AZCUqGtHjzebZHezLYnaImXN
jomJjgJQAMsCquCqAilY1oRfYyL2+XsezE9yMr/MXJcqQN22Z/bEmbDDYVOF
qnVfec8vh8Nh0rRZOf0pW1Rl/jxt63WeFKsafzXtg6OjZ0cPkknWPk+bdpok
02pSZkt6cVpns3ZY5O1sWGdtM8yzdrjI2rxpk+R+/jx9c3pznb6r6vdFOU+/
r6v1KvkinVRlk5fNunmefrnJmy/pUbMeL4umKaqy3ayo3cuLm++SVfE8SdO2
mth7+Mc0X7W39OSE/91UdVvns8a/0WyW8YNJtVxlkzZ4Yz32z8qKH9WzST5t
2s0it9faouV/3Nzm6UVJ/9ikpy1PK2tpjOlN9T4v0/2L05uDJBuP6/zueUr/
SLI6z2jwZZvXZd4m7+9pvYp5yZPPgs8n46qmSU9poZ6nD46OHw6Pj5Js3d5W
9fNkmBYlDf/7UfqSdmSTLWl8stjfF3Uxvc3q4IeqpkX+X+tsQTNapjf55Las
FtW8yBsaxWTEs6X1yWmmj548eZS+rOr8tlo3eXpeF3c5rw5N7Xl6nZXpeZHP
K16LfE5jfJ6eZYtiVtVlkWER12Vb05tvr0/pn6tbHJO9Xx+nTx89TR8/Ok6f
0CHZo5/yZVYsnqdLGeL//ENbjP6g4xvR/9j0XozSF+tyOl5k09xN8EW2rvNy
kkc/YYrX+WRd8y7QhlT1Jn3x4sz3tZgv/mfRLKjHYZ3ziQg7ejlKv80WC1r7
vK4a19XLYr7OF52f/mtXM1jMkwfPngVrOZZR7lzMH0fp1ZfnVVnNb9d+NX/M
63y5iX/55TN88ORZ+l1Wl3RUq/X8Nn1TZVM3w+AHTGfKp/Pt8Un65MV1NL+y
aPNp+lu6ANNqGUz15CQ9fvDoQfrw8cPjp8FUf19NMdj+VJOyqpd0fe5yJgpv
vjt7cHz8TP988uj4kf759NlJ8PSJ/9M9fXp0ZO8eP3js/nxy4v589MD+fPjM
/fn42H325MTaffjsKVrg//ATonaj03pyS7OetHSW5bc2q+e8pLdtu2qeHx62
VbVoRkw0R7Qfh7ftcnHYJaRZ0Mrw6Km0IzTpTb6s2jyiR6/riggYvdqkYff4
yugK/z1MZ+vFQo7HD3n5Pv22qN/fVos/4lejRw+OEvr32dX1xeifHx09G53z
2P6mqUyqJh9+oDY6U9g7+/bqTXo1/j2NM702CllOidZO6s0Kc9rnARzwOIkO
1Okqq2nYdFOblO5ROsnqemNfEcHPmXDwv/95RN2lk7xui1kxYVa099lloLtz
PbnNcLijJcCO8jhHZ9TY37YIdGDbpqlKWQgm+0Me2ZD5D21WMzx6FC4LVoWW
oJryTKqZTuYsmAwtC78UPjr47PyuR+mb7I/Z1tm9+/766Uk8pz2bVJ7V7e2w
KGfVqJxno2WxOFzdrg6n1X25IFIwon/8ZlYs8m8mVVVPh/fz5unJXjiZd1dv
Xpyn319cnV/cXJ6l1//7+ubiZXr87OnJIH31/eno+ubV+ejo6OHjn45HR6Oj
nzCYLVMByXqFc54t0u/zqlnRP7LFkNnsYlHMwTFO+f826T61fBDN9fhkePSE
jx89vTx9dTo6e3czOltkxbLp7ybN+/7+flRkZYatzBpm38u8bJvDyX3b26t3
+dhkAWr2IJV2w0mk4Sy4/2Bws2zR5G5cP3bG1TtmO0f2ex2ZDe3H66tX4dB+
7AwtHltvcN3RvT07uw6P/19x/sdKXoSmrScTOvHH0VhPZSFvsjmu9dtyVVdM
vYhr0IrqqIn9t/HQbeSfI2cdenZzS4zt+9evR5cvLy63X+QVyQ7ZYvRwvlph
JtO8ed9Wq2U1XRP/Pbxe5RO5dHQWO/88z1tiYM0oa1YfftOEv1xOv3ny4Fl4
dB7WUzrHZV4r8aabRv9obosVE3KmiV8La6YWFmnUjcjQ6RlJHumrvL0nyRoU
8CavlwXdj+br9NV6Oc5rIiCDNJtOmcoYmSymdFxcU7uu2kNao/gGPUt5/b67
PL8anb65ungezoWfpqfUCjdNDdMeni4W1T3t3xtiT3WBrbxaYbI0jovyrqgr
Objpi6Jpt27ErJhWJPPQaZ/k2Ale0QaPh+tsNrwjkjGcTYc8uOPj40fySyYd
D3mQvVdGfCx3zZnFfJmJdhoswKvqLucV9StxcfpqePxw+xHiSzpvjmXQrFJl
9bQ5HBM7JyGpIapaDterSbiCoi0YfTsluj5Z5LqLND7q7PDt67PUmtg1he+v
jzu7BiZeXb+7PP+beHeTTZbMt+6L6fD4cUT6KmK1JPVeV7P2nlSe9DI6WHyZ
m+0LKDeRTkN5eU6tlHTU+ShvH19FrxXTESlSuv3ygMaED+n/STQ6/unI76yO
T9pPtQO5LHQaSFamT+iOy0nMa/ojS5u8TY+3jfYpmMc2Wu6JzisSHrL3xXJd
Z9sEi2/rbLrIN72fSCf5keTgpvfDt6N0mqcv82leiEYS/3w2Yp2jLZY0o0Sl
k+EV7W96OTwficTFMkZLGzCsimnipNJhJJX613uyZpIkzPNjUfvk+IHJwSeB
fH38gERi+puobns7zTYkkWaT9xF5sJ9Y/aXftu5zXo7ui/fFKp8Wwtv4X4f2
5U/y5Wgr37y4uBg9PXowOj59E3XLP6TXev0G6R7+rS+KLkk6W35XTPzZzeu9
oIvzfGJn9ujZNjHB3W1ax1xo1Kwop01Lt91+O9Qeh9yInFKmHmcvT68ndbFq
oyFfTJZZTAto3P5d0o3L+Tqb5zE/GKSPRsfpxbTgf+wN0LibePrg8YNgTumP
6zLnQ328S+7JaQwk8gVjwMTwmNo6pL4OuQf+x2g1nfF03j08G5FQ9qKaRNOh
R4tK6cHp68sOF3vAor4MOhjgj1m5zki5pyE+3Ulc7x9iTDdvDue+iyF1cfgF
JFHigiQT/4RZzLLJNh0I9PJdVS+mRNtySEpEK9hwUKyXIFBvL0ffr+m3eEr8
ZFHQvRVRhSggiegXH9q8nBKPI133D+vwPKX7F28vDwbpVT3PyuKPuqKLzbY3
r/AmM+kzNk2Vm5QI2P7Z5XkozJ6u5+um5eV5snV5tpxJopU0vPZwmi0P+eHQ
8yT/130+Jrl+shZpsl0TEyf5mpjVurBd5hV5UVXv16v+PXuTz4mPqzBzipWG
vcxLqFtHW+dz3pbRllG7R0Sfhjy61Xp8eFfk97hEX9TSYZE3O4nCm9NfOs5f
upIkl07XE6KWTV4z4WhsAod07fMPngntoFFMBI53E6n0OzpSdIlYBKBT8DJv
62pVLQr6mWSCPDNpr0mv7ngA+T3e62n7vSuTjxvaz3yUlU3RkUp4bvgfGh6P
rqb/eRIJEfRPk/x09TZ96c9+4dvwuibeRYSQ7sPvssU63771O8Q7tvXQXQ5k
Pd3pzfCOCOlw1Yg09+D4yd8szQWEnaW5FNN7fT08PjmKZuYMjm/yP6yLOheB
le/9GRsoqnmdrW6LCfFj6AZbpzlp6smopAmM5tUdn+GF0x2mUBdokqvmkLo+
fMDcI9s5I6f+XpYNDXANymNHJ7wFLzMmn9CxIP3xgo7OaCKkEWTRBOW31H7D
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
/wtpz30/WagBAA==

-->

</rfc>
