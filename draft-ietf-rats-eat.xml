<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.4.19 -->
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" obsoletes="" updates="" submissionType="IETF" xml:lang="en" tocInclude="true" tocDepth="4" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.9.1 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@island-resort.com</email>
      </address>
    </author>
    <author initials="M." surname="Ballesteros" fullname="Miguel Ballesteros">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 4299</phone>
        <email>mballest@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <date year="2021" month="July" day="15"/>
    <area>Internet</area>
    <workgroup>RATS Working Group</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides a signed (attested) set of
claims that describe state and characteristics of an entity, typically
a device like a phone or an IoT device.  These claims are used by a
relying party to determine how much it wishes to trust the entity.</t>
      <t>An EAT is either a CWT or JWT with some attestation-oriented 
claims. To a large degree, all this document does is extend
CWT and JWT.</t>
    </abstract>
    <note>
      <name>Contributing</name>
      <t>TBD</t>
    </note>
  </front>
  <middle>
    <section anchor="introduction" numbered="true" toc="default">
      <name>Introduction</name>
      <t>Remote device attestation is a fundamental service that allows a remote
device such as a mobile phone, an Internet-of-Things (IoT) device, or
other endpoint to prove itself to a relying party, a server or a
service.  This allows the relying party to know some characteristics
about the device and decide whether it trusts the device.</t>
      <t>Remote attestation is a fundamental service that can underlie other
protocols and services that need to know about the trustworthiness of
the device before proceeding. One good example is biometric
authentication where the biometric matching is done on the device. The
relying party needs to know that the device is one that is known to do
biometric matching correctly.  Another example is content protection
where the relying party wants to know the device will protect the
data.  This generalizes on to corporate enterprises that might want to
know that a device is trustworthy before allowing corporate data to be
accessed by it.</t>
      <t>The notion of attestation here is large and may include, but is not
limited to the following:</t>
      <ul spacing="normal">
        <li>Proof of the make and model of the device hardware (HW)</li>
        <li>Proof of the make and model of the device processor, particularly
for security-oriented chips</li>
        <li>Measurement of the software (SW) running on the device</li>
        <li>Configuration and state of the device</li>
        <li>Environmental characteristics of the device such as its GPS location</li>
      </ul>
      <section anchor="cwt-jwt-and-uccs" numbered="true" toc="default">
        <name>CWT, JWT and UCCS</name>
        <t>For flexibility and ease of imlpementation in a wide variety of environments, EATs can be either CBOR <xref target="RFC8949" format="default"/> or JSON <xref target="ECMAScript" format="default"/> format.
This specification simultaneously describes both formats.</t>
        <t>An EAT is either a CWT as defined in <xref target="RFC8392" format="default"/>, a UCCS as defined in <xref target="UCCS.Draft" format="default"/>, or a JWT as defined in <xref target="RFC7519" format="default"/>.
This specification extends those specifications with additional claims for attestation.</t>
        <t>The identification of a protocol element as an EAT, whether CBOR or JSON format, follows the general conventions used by CWT, JWT and UCCS.
Largely this depends on the protocol carrying the EAT.
In some cases it may be by content type (e.g., MIME type).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
      </section>
      <section anchor="cddl" numbered="true" toc="default">
        <name>CDDL</name>
        <t>This specification uses CDDL, <xref target="RFC8610" format="default"/>, as the primary formalism to
define each claim.  The implementor then interprets the CDDL to come
to either the CBOR <xref target="RFC8949" format="default"/> or JSON <xref target="ECMAScript" format="default"/>
representation. In the case of JSON, Appendix E of <xref target="RFC8610" format="default"/> is
followed. Additional rules are given in <xref target="jsoninterop" format="default"/> of this
document where Appendix E is insufficient.  (Note that this is not to
define a general means to translate between CBOR and JSON, but only to
define enough such that the claims defined in this document can be
rendered unambiguously in JSON).</t>
        <t>The CWT specification was authored before CDDL was available and did not use it.
This specification includes a CDDL definition of most of what is described in <xref target="RFC8392" format="default"/>.</t>
      </section>
      <section anchor="entity-overview" numbered="true" toc="default">
        <name>Entity Overview</name>
        <t>An "entity" can be any device or device subassembly ("submodule") that
can generate its own attestation in the form of an EAT.  The
attestation should be cryptographically verifiable by the EAT
consumer. An EAT at the device-level can be composed of several
submodule EAT's.</t>
        <t>Modern devices such as a mobile phone have many different execution
environments operating with different security levels. For example, it
is common for a mobile phone to have an "apps" environment that runs
an operating system (OS) that hosts a plethora of downloadable
apps. It may also have a TEE (Trusted Execution Environment) that is
distinct, isolated, and hosts security-oriented functionality like
biometric authentication. Additionally, it may have an eSE (embedded
Secure Element) - a high security chip with defenses against HW
attacks that is used to produce attestations.  This device attestation format
allows the attested data to be tagged at a security level from which
it originates.  In general, any discrete execution environment that
has an identifiable security level can be considered an entity.</t>
      </section>
      <section anchor="use-as-evidence-and-attestation-results" numbered="true" toc="default">
        <name>Use as Evidence and Attestation Results</name>
        <t>Here, normative reference is made to <xref target="RATS-Architecture" format="default"/>, particularly the definition of Evidence, the Verifier, Attestation Results and the Relying Party.
Per Figure 1 in <xref target="RATS-Architecture" format="default"/>, Evidence is a protocol message that goes from the Attester to the Verifier and Attestation Results a message that goes from the Verifier to the Relying Party.
EAT is defined such that it can be used to represent either Evidence, Attestation Results or both.
No claims defined here are considered exclusive to or are prohibited in either use.
It is useful to create EAT profiles as described in <xref target="profiles" format="default"/> for either use.</t>
        <t>It is useful to characterize the relationship of claims in Evidence to those in Attestation Results.</t>
        <t>Many claims in Evidence simply will pass through the Verifier to the Relying Party without modification.
They will be verified as authentic from the device by the Verifier just through normal verification of the Attester's signature.
They will be protected against modification when they are conveyed to the Relying Party by whatever means is used to protect Attestation Results. 
(The details of that protection are out of scope of this document.)
The UEID, <xref target="UEID" format="default"/>, and Location, <xref target="location" format="default"/>, claims are examples of claims that are passed through.</t>
        <t>Some claims in Evidence will be verified by the Verifier by comparison to Reference Values.
In this case the claims in Evidence will not likely be conveyed to the Relying Party.
Instead, some claim indicating they were checked may be added to the Attestation Results or it may be tacitly known that the Verifier always does this check.
For example, the Verifier receives the Software Evidence claim, <xref target="swevidence" format="default"/>, compares it to reference values and conveys the results to the Relying Party in a Software Measurement Results Claim, <xref target="swresults" format="default"/>.</t>
        <t>In some cases the Verifier may provide privacy-preserving functionality by stripping or modifying claims that do not posses sufficient privacy-preserving characteristics.
For example, the data in the Location claim, <xref target="location" format="default"/>, may be modified to have a precision of a few kilometers rather than a few meters.</t>
      </section>
      <section anchor="eat-operating-models" numbered="true" toc="default">
        <name>EAT Operating Models</name>
        <t>TODO: Rewrite (or eliminate) this section in light of the RATS architecture draft.</t>
        <t>At least the following three participants exist in all EAT operating
models. Some operating models have additional participants.</t>
        <dl>
          <dt>
The Entity.  </dt>
          <dd>
            <t>This is the phone, the IoT device, the sensor, the sub-assembly or
such that the attestation provides information about.</t>
          </dd>
          <dt>
The Manufacturer.  </dt>
          <dd>
            <t>The company that made the entity.  This may be a chip vendor, a
circuit board module vendor or a vendor of finished consumer products.</t>
          </dd>
          <dt>
The Relying Party.  </dt>
          <dd>
            <t>The server, service or company that makes use of the information in
the EAT about the entity.</t>
          </dd>
        </dl>
        <t>In all operating models, the manufacturer provisions some secret
attestation key material (AKM) into the entity during manufacturing.
This might be during the manufacturer of a chip at a fabrication
facility (fab) or during final assembly of a consumer product or any
time in between. This attestation key material is used for signing
EATs.</t>
        <t>In all operating models, hardware and/or software on the entity create
an EAT of the format described in this document. The EAT is always
signed by the attestation key material provisioned by the
manufacturer.</t>
        <t>In all operating models, the relying party must end up knowing that
the signature on the EAT is valid and consistent with data from claims
in the EAT.  This can happen in many different ways. Here are some
examples.</t>
        <ul spacing="normal">
          <li>The EAT is transmitted to the relying party. The relying party gets
corresponding key material (e.g. a root certificate) from the
manufacturer. The relying party performs the verification.</li>
          <li>The EAT is transmitted to the relying party. The relying party
transmits the EAT to a verification service offered by the
manufacturer. The server returns the validated claims.</li>
          <li>The EAT is transmitted directly to a verification service, perhaps
operated by the manufacturer or perhaps by another party. It
verifies the EAT and makes the validated claims available to the
relying party. It may even modify the claims in some way and re-sign
the EAT (with a different signing key).</li>
        </ul>
        <t>All these operating models are supported and there is no preference
of one over the other. It is important to support this variety of
operating models to generally facilitate deployment and to allow for
some special scenarios. One special scenario has a validation service
that is monetized, most likely by the manufacturer.  In another, a
privacy proxy service processes the EAT before it is transmitted to
the relying party. In yet another, symmetric key material is used for
signing. In this case the manufacturer should perform the
verification, because any release of the key material would enable a
participant other than the entity to create valid signed EATs.</t>
      </section>
      <section anchor="what-is-not-standardized" numbered="true" toc="default">
        <name>What is Not Standardized</name>
        <t>The following is not standardized for EAT, just the same they are not
standardized for CWT or JWT.</t>
        <section anchor="transmission-protocol" numbered="true" toc="default">
          <name>Transmission Protocol</name>
          <t>EATs may be transmitted by any protocol the same as CWTs and JWTs. For
example, they might be added in extension fields of other protocols,
bundled into an HTTP header, or just transmitted as files. This
flexibility is intentional to allow broader adoption. This flexibility
is possible because EAT's are self-secured with signing (and possibly
additionally with encryption and anti-replay). The transmission
protocol is not required to fulfill any additional security
requirements.</t>
          <t>For certain devices, a direct connection may not exist between the
EAT-producing device and the Relying Party. In such cases, the EAT
should be protected against malicious access. The use of COSE and JOSE
allows for signing and encryption of the EAT. Therefore, even if the
EAT is conveyed through intermediaries between the device and Relying
Party, such intermediaries cannot easily modify the EAT payload or
alter the signature.</t>
        </section>
        <section anchor="signing-scheme" numbered="true" toc="default">
          <name>Signing Scheme</name>
          <t>The term "signing scheme" is used to refer to the system that includes
end-end process of establishing signing attestation key material in
the entity, signing the EAT, and verifying it. This might involve key
IDs and X.509 certificate chains or something similar but
different. The term "signing algorithm" refers just to the algorithm
ID in the COSE signing structure. No particular signing algorithm or
signing scheme is required by this standard.</t>
          <t>There are three main implementation issues driving this. First, secure
non-volatile storage space in the entity for the attestation key
material may be highly limited, perhaps to only a few hundred bits, on
some small IoT chips. Second, the factory cost of provisioning key
material in each chip or device may be high, with even millisecond
delays adding to the cost of a chip. Third, privacy-preserving signing
schemes like ECDAA (Elliptic Curve Direct Anonymous Attestation) are
complex and not suitable for all use cases.</t>
          <t>Over time to faciliate interoperability, some signing schemes may be
defined in EAT profiles or other documents either in the IETF or outside.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology" numbered="true" toc="default">
      <name>Terminology</name>
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in
BCP 14 <xref target="RFC2119" format="default"/> <xref target="RFC8174" format="default"/> when, and only when, they appear in all
capitals, as shown here.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519" format="default"/>, COSE
<xref target="RFC8152" format="default"/>, and CWT <xref target="RFC8392" format="default"/>.</t>
      <dl>
        <dt>
Claim Name.  </dt>
        <dd>
          <t>The human-readable name used to identify a claim.</t>
        </dd>
        <dt>
Claim Key.  </dt>
        <dd>
          <t>The CBOR map key or JSON name used to identify a claim.</t>
        </dd>
        <dt>
Claim Value.  </dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>
CWT Claims Set.  </dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
        <dt>
Attestation Key Material (AKM).  </dt>
        <dd>
          <t>The key material used to sign the EAT token. If it is done
symmetrically with HMAC, then this is a simple symmetric key.
If it is done with ECC, such as an IEEE DevID <xref target="IEEE.802.1AR" format="default"/>, then this
is the private part of the EC key pair. If ECDAA 
is used, (e.g., as used by Enhanced Privacy ID, i.e. EPID) then it is the key material 
needed for ECDAA.</t>
        </dd>
      </dl>
    </section>
    <section anchor="the-claims" numbered="true" toc="default">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation. It also
mentions several claims defined by CWT and JWT that are particularly
important for EAT.</t>
      <t>Note also:
* Any claim defined for CWT or JWT may be used in an EAT including 
  those in the CWT <xref target="IANA.CWT.Claims" format="default"/> and JWT IANA <xref target="IANA.JWT.Claims" format="default"/>
  claims registries.</t>
      <ul spacing="normal">
        <li>All claims are optional</li>
        <li>No claims are mandatory</li>
        <li>All claims that are not understood by implementations MUST be ignored</li>
      </ul>
      <t>There are no default values or meanings assigned to absent claims
other than they are not reported. The reason for a claim's absence may
be the implementation not supporting the claim, an inability to
determine its value, or a preference to report in a different way such
as a proprietary claim.</t>
      <t>CDDL along with text descriptions is used to define each claim
indepdent of encoding.  Each claim is defined as a CDDL group (the
group is a general aggregation and type definition feature of
CDDL). In the encoding section <xref target="encoding" format="default"/>, the CDDL groups turn into
CBOR map entries and JSON name/value pairs.</t>
      <t>Map labels are assigned both an integer and string value.
CBOR encoded tokens MUST use only integer labels.
JSON encoded tokens MUST use only string labels.</t>
      <t>TODO: add paragraph here about use for Attestation Evidence and for Results.</t>
      <section anchor="token-id-claim-cti-and-jti" numbered="true" toc="default">
        <name>Token ID Claim (cti and jti)</name>
        <t>CWT defines the "cti" claim. JWT defines the "jti" claim. These are
equivalent to each other in EAT and carry a unique token identifier as
they do in JWT and CWT.  They may be used to defend against re use of
the token but are distinct from the nonce that is used by the relying
party to guarantee freshness and defend against replay.</t>
      </section>
      <section anchor="timestamp-claim-iat" numbered="true" toc="default">
        <name>Timestamp claim (iat)</name>
        <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
        <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even 
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
        <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. No token may contain an iat claim in
float-point format. Any recipient of a token with a floating-point
format iat claim may consider it an error.  A 64-bit integer 
representation of epoch time can represent a range of +/- 500 billion
years, so the only point of a floating-point timestamp is to 
have precession greater than one second. This is not needed for EAT.</t>
      </section>
      <section anchor="nonce-claim-nonce" numbered="true" toc="default">
        <name>Nonce Claim (nonce)</name>
        <t>All EATs should have a nonce to prevent replay attacks. The nonce is
generated by the relying party, the end consumer of the token. It is
conveyed to the entity over whatever transport is in use before the
token is generated and then included in the token as the nonce claim.</t>
        <t>This documents the nonce claim for registration in the IANA CWT 
claims registry. This is equivalent to the JWT nonce claim that is
already registered.</t>
        <t>The nonce must be at least 8 bytes (64 bits) as fewer are unlikely
to be secure. A maximum of 64 bytes is set to limit the memory
a constrained implementation uses. This size range is not set
for the already-registered JWT nonce, but it should follow
this size recommendation when used in an EAT.</t>
        <t>Multiple nonces are allowed to accommodate multistage verification
and consumption.</t>
        <section anchor="nonce-cddl" numbered="true" toc="default">
          <name>nonce CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
nonce-type = bstr .size (8..64)

nonce-claim = (
    nonce => nonce-type / [ 2* nonce-type ]
)
]]></sourcecode>
        </section>
      </section>
      <section anchor="UEID" numbered="true" toc="default">
        <name>Universal Entity ID Claim (ueid)</name>
        <t>UEID's identify individual manufactured entities / devices such as a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire device or a submodule or
subsystem. It does not identify types, models or classes of
devices. It is akin to a serial number, though it does not have to be
sequential.</t>
        <t>UEID's must be universally and globally unique across manufacturers
and countries. UEIDs must also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then relying parties receiving them will have
to track other characteristics of the device to keep devices distinct
between manufacturers).</t>
        <t>There are privacy considerations for UEID's. See <xref target="ueidprivacyconsiderations" format="default"/>.</t>
        <t>The UEID is permanent. It never change for a given
device / entity.</t>
        <t>UEIDs are variable length. All implementations MUST be able to receive
UEIDs that are 33 bytes long (1 type byte and 256 bits).  The
recommended maximum sent is also 33 bytes.</t>
        <t>When the entity constructs the UEID, the first byte is a type and the
following bytes the ID for that type. Several types are allowed to
accommodate different industries and different manufacturing processes
and to give options to avoid paying fees for certain types of
manufacturer registrations.</t>
        <t>Creation of new types requires a Standards Action <xref target="RFC8126" format="default"/>.</t>
        <table anchor="ueid-types-table" align="center">
          <name>UEID Composition Types</name>
          <thead>
            <tr>
              <th align="left">Type Byte</th>
              <th align="left">Type Name</th>
              <th align="left">Specification</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">0x01</td>
              <td align="left">RAND</td>
              <td align="left">This is a 128, 192 or 256 bit random number generated once and stored in the device. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the device and stored. It may not be smaller than 128 bits.</td>
            </tr>
            <tr>
              <td align="left">0x02</td>
              <td align="left">IEEE EUI</td>
              <td align="left">This makes use of the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-device identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while devices with multiple network interfaces may have multiple MAC addresses, there is only one UEID for a device) <xref target="IEEE.802-2001" format="default"/>, <xref target="OUI.Guide" format="default"/></td>
            </tr>
            <tr>
              <td align="left">0x03</td>
              <td align="left">IMEI</td>
              <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which SHALL be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded SHALL NOT include Luhn checksum or SVN information. <xref target="ThreeGPP.IMEI" format="default"/></td>
            </tr>
          </tbody>
        </table>
        <t>UEID's are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
        <t>The consumer (the relying party) of a UEID MUST treat a UEID as a
completely opaque string of bytes and not make any use of its internal
structure. For example, they should not use the OUI part of a type
0x02 UEID to identify the manufacturer of the device. Instead they
should use the oemid claim that is defined elsewhere. The reasons for
this are:</t>
        <ul spacing="normal">
          <li>UEIDs types may vary freely from one manufacturer to the next.</li>
          <li>New types of UEIDs may be created. For example, a type 0x07 UEID may
be created based on some other manufacturer registration scheme.</li>
          <li>Device manufacturers are allowed to change from one type of UEID to
another anytime they want. For example, they may find they can
optimize their manufacturing by switching from type 0x01 to type
0x02 or vice versa.  The main requirement on the manufacturer is
that UEIDs be universally unique.</li>
        </ul>
        <section anchor="ueid-cddl" numbered="true" toc="default">
          <name>ueid CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
ueid-type = bstr .size (7..33)

ueid-claim = (
     ueid => ueid-type
)
]]></sourcecode>
        </section>
      </section>
      <section anchor="semi-permanent-ueids-sueids" numbered="true" toc="default">
        <name>Semi-permanent UEIDs (SUEIDs)</name>
        <t>An SEUID is of the same format as a UEID, but it may change to a different value on device life-cycle events.
Examples of these events are change of ownership, factory reset and on-boarding into an IoT device management system.
A device may have both a UEID and SUEIDs, neither, one or the other.</t>
        <t>There may be multiple SUEIDs.
Each one has a text string label the purpose of which is to distinguish it from others in the token.
The label may name the purpose, application or type of the SUEID.
Typically, there will be few SUEDs so there is no need for a formal labeling mechanism like a registry.
The EAT profile may describe how SUEIDs should be labeled.
If there is only one SUEID, the claim remains a map and there still must be a label.
For example, the label for the SUEID used by FIDO Onboarding Protocol could simply be "FDO".</t>
        <t>There are privacy considerations for SUEID's. See <xref target="ueidprivacyconsiderations" format="default"/>.</t>
        <sourcecode type="CDDL"><![CDATA[
sueids-type = {
    + tstr => ueid-type
}

sueids-claim = (
     sueids => sueids-type
)
]]></sourcecode>
      </section>
      <section anchor="oemid" numbered="true" toc="default">
        <name>OEM Identification by IEEE (oemid)</name>
        <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE.RA" format="default"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide" format="default"/> and provides a lookup
services <xref target="OUI.Lookup" format="default"/></t>
        <t>Companies that have more than one of these IDs or MAC address blocks
should pick one and prefer that for all their devices.</t>
        <t>Commonly, these are expressed in Hexadecimal Representation
<xref target="IEEE.802-2001" format="default"/> also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48. For JSON encoded
tokens, this is further base64url encoded.</t>
        <section anchor="oemid-cddl" numbered="true" toc="default">
          <name>oemid CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
oemid-claim = (
    oemid => bstr
)
]]></sourcecode>
        </section>
      </section>
      <section anchor="hardware-version-claims-hardware-version-claims" numbered="true" toc="default">
        <name>Hardware Version Claims (hardware-version-claims)</name>
        <t>The hardware version can be claimed at three different levels, the chip, the circuit board and the final device assembly.
An EAT can include any combination these claims.</t>
        <t>The hardware version is a simple text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID" format="default"/>.</t>
        <t>The hardware version can also be given by a 13-digit <xref target="EAN-13" format="default"/>.
A new CoSWID version scheme is registered with IANA by this document in <xref target="registerversionscheme" format="default"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.</t>
        <sourcecode type="CDDL"><![CDATA[
hw-version-type = [
    version:  tstr,
    scheme:  $version-scheme
]

chip-version-claim = (
    chip-version => hw-version-type
)

board-version-claim = (
    board-version => hw-version-type
)

device-version-claim = (
    device-version => hw-version-type
)

hardware-version-claims = (
    ? chip-version-claim,
    ? board-version-claim,
    ? device-version-claim,
)

]]></sourcecode>
      </section>
      <section anchor="the-security-level-claim-security-level" numbered="true" toc="default">
        <name>The Security Level Claim (security-level)</name>
        <t>This claim characterizes the device/entity 
ability to defend against attacks aimed at capturing the signing
key, forging claims and at forging EATs. This is done by
defining four security levels as described below. This is similar
to the key protection types defined by the Fast Identity Online (FIDO) Alliance <xref target="FIDO.Registry" format="default"/>.</t>
        <t>These claims describe security environment and countermeasures
available on the end-entity / client device where the attestation key
reside and the claims originate.</t>
        <dl>
          <dt>
1 -- Unrestricted  </dt>
          <dd>
            <t>There is some expectation that implementor will
protect the attestation signing keys at this level. Otherwise
the EAT provides no meaningful security assurances.</t>
          </dd>
          <dt>
2-- Restricted  </dt>
          <dd>
            <t>Entities at this level should not be general-purpose
operating environments that host features such as app download
systems, web browsers and complex productivity applications.
It is akin to the Secure Restricted level (see below) without the
security orientation. Examples include a Wi-Fi subsystem,
an IoT camera, or sensor device.</t>
          </dd>
          <dt>
3 -- Secure Restricted  </dt>
          <dd>
            <t>Entities at this level must meet the criteria defined by FIDO Allowed
Restricted Operating Environments <xref target="FIDO.AROE" format="default"/>. Examples include TEE's and 
schemes using virtualization-based security. Like the FIDO security goal,
security at this level is aimed at defending well against large-scale
network / remote attacks against the device.</t>
          </dd>
          <dt>
4 -- Hardware  </dt>
          <dd>
            <t>Entities at this level must include substantial defense 
against physical or electrical attacks against the device itself.
It is assumed any potential attacker has captured the device and can 
disassemble it. Example include TPMs and Secure Elements.</t>
          </dd>
        </dl>
        <t>The entity should claim the highest security level it achieves and no higher.
This set is not extensible so as to provide a common interoperable description of security level to the relying party.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of security and its own proprietary claim as a refined indication.</t>
        <t>This claim is not intended as a replacement for a proper end-device
security certification schemes such as those based on FIPS 140 <xref target="FIPS-140" format="default"/> 
or those based on Common Criteria <xref target="Common.Criteria" format="default"/>. The 
claim made here is solely a self-claim made by the Entity Originator.</t>
        <section anchor="security-level-cddl" numbered="true" toc="default">
          <name>security-level CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
security-level-cbor-type = &(
    unrestricted: 1,
    restricted: 2,
    secure-restricted: 3,
    hardware: 4
)

security-level-json-type = 
    "unrestricted" /
    "restricted" /
    "secure-restricted" /
    "hardware"

security-level-claim = (
    security-level => security-level-cbor-type / security-level-json-type
)
]]></sourcecode>
        </section>
      </section>
      <section anchor="secure-boot-claim-secure-boot" numbered="true" toc="default">
        <name>Secure Boot Claim (secure-boot)</name>
        <t>The value of true indicates secure boot is enabled. Secure boot is
considered enabled when base software, the firmware and operating
system, are under control of the entity manufacturer identified in the
OEMID claim described in <xref target="oemid" format="default"/>. This may because the software is
in ROM or because it is cryptographically authenticated or some
combination of the two or other.</t>
        <section anchor="secure-boot-cddl" numbered="true" toc="default">
          <name>secure-boot CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
secure-boot-claim = (
    secure-boot => bool
)
]]></sourcecode>
        </section>
      </section>
      <section anchor="debug-status-claim-debug-status" numbered="true" toc="default">
        <name>Debug Status Claim (debug-status)</name>
        <t>This applies to system-wide or submodule-wide debug facilities of the
target device / submodule like JTAG and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
        <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-device
public keys.</t>
        <t>As with all claims, the absence of the debug level claim means
it is not reported. A conservative interpretation might assume
the Not Disabled state. It could however be that it is reported
in a proprietary claim.</t>
        <t>This claim is not extensible so as to provide a common interoperable description of debug status to the relying party.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
        <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
        <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The verifier or relying party receiving an EAT cannot
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
        <t>An individual target device / submodule may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
        <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the relying party can know the debug status
of the submodules since there is no inheritance.</t>
        <section anchor="enabled" numbered="true" toc="default">
          <name>Enabled</name>
          <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
        </section>
        <section anchor="disabled" numbered="true" toc="default">
          <name>Disabled</name>
          <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future, and it may also be
possible that they were enabled in the past after the
target device/sub-system booted/started, but they are currently disabled.</t>
        </section>
        <section anchor="disabled-since-boot" numbered="true" toc="default">
          <name>Disabled Since Boot</name>
          <t>This level indicates all debug facilities are currently disabled and
have been so since the target device/sub-system booted/started.</t>
        </section>
        <section anchor="disabled-permanently" numbered="true" toc="default">
          <name>Disabled Permanently</name>
          <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer cannot enable them. Only
the manufacturer indicated in the OEMID claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
        </section>
        <section anchor="disabled-fully-and-permanently" numbered="true" toc="default">
          <name>Disabled Fully and Permanently</name>
          <t>This level indicates that all debug capabilities for the target
device/sub-module are permanently disabled.</t>
        </section>
        <section anchor="debug-status-cddl" numbered="true" toc="default">
          <name>debug-status CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
debug-status-cbor-type = &(
    enabled: 0,
    disabled: 1,
    disabled-since-boot: 2,
    disabled-permanently: 3,
    disabled-fully-and-permanently: 4
)

debug-status-json-type = 
    "enabled" /
    "disabled" /
    "disabled-since-boot" /
    "disabled-permanently" /
    "disabled-fully-and-permanently"

debug-status-claim = (
    debug-status => debug-status-cbor-type / debug-status-json-type
)
]]></sourcecode>
        </section>
      </section>
      <section anchor="including-keys" numbered="true" toc="default">
        <name>Including Keys</name>
        <t>An EAT may include a cryptographic key such as a public key.
The signing of the EAT binds the key to all the other claims in the token.</t>
        <t>The purpose for inclusion of the key may vary by use case.
For example, the key may be included as part of an IoT device onboarding protocol.
When the FIDO protocol includes a pubic key in its attestation message, the key represents the binding of a user, device and relying party.
This document describes how claims containing keys should be defined for the various use cases.
It does not define specific claims for specific use cases.</t>
        <t>Keys in CBOR format tokens SHOULD be the COSE_Key format <xref target="RFC8152" format="default"/> and keys in JSON format tokens SHOULD be the JSON Web Key format <xref target="RFC7517" format="default"/>.
These two formats support many common key types.
Their use avoids the need to decode other serialization formats.
These two formats can be extended to support further key types through their IANA registries.</t>
        <t>The general confirmation claim format <xref target="RFC8747" format="default"/>, <xref target="RFC7800" format="default"/> may also be used.
It provides key encryption. 
It also allows for inclusion by reference through a key ID.
The confirmation claim format may employed in the definition of some new claim for a a particular use case.</t>
        <t>When the actual confirmation claim is included in an EAT, this document associates no use case semantics other than proof of posession.
Different EAT use cases may choose to associate further semantics.
The key in the confirmation claim MUST be protected the same as the key used to sign the EAT. 
That is, the same, equivalent or better hardware defenses, access controls, key generation and such must be used.</t>
      </section>
      <section anchor="location" numbered="true" toc="default">
        <name>The Location Claim (location)</name>
        <t>The location claim gives the location of the device entity from which the attestation originates.
It is derived from the W3C Geolocation API <xref target="W3C.GeoLoc" format="default"/>.
The latitude, longitude, altitude and accuracy must conform to <xref target="WGS84" format="default"/>.
The altitude is in meters above the <xref target="WGS84" format="default"/> ellipsoid.
The two accuracy values are positive numbers in meters.
The heading is in degrees relative to true north.
If the device is stationary, the heading is NaN (floating-point not-a-number).
The speed is the horizontal component of the device velocity in meters per second.</t>
        <t>When encoding floating-point numbers half-precision should not be used.
It usually does not provide enough precision for a geographic location.
It is not a requirement that the receiver of an EAT implement half-precision, so the receiver may not be able to decode the location.</t>
        <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.</t>
        <t>The age data item can be used when the entity doesn't know what time
it is either because it doesn't have a clock or it isn't set. The
entity must still have a "ticker" that can measure a time
interval. The age is the interval between acquisition of the location
data and token creation.</t>
        <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations" format="default"/> below.</t>
        <section anchor="location-cddl" numbered="true" toc="default">
          <name>location CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude = 1 / "latitude"
longitude = 2 / "longitude"
altitude = 3 / "altitude"
accuracy = 4 / "accuracy"
altitude-accuracy = 5 / "altitude-accuracy"
heading = 6 / "heading"
speed = 7 / "speed"
timestamp = 8 / "timestamp"
age = 9 / "age"

location-claim = (
    location-label => location-type
)
]]></sourcecode>
        </section>
      </section>
      <section anchor="the-uptime-claim-uptime" numbered="true" toc="default">
        <name>The Uptime Claim (uptime)</name>
        <t>The "uptime" claim contains a value that represents the number of
seconds that have elapsed since the entity or submod was last booted.</t>
        <section anchor="uptime-cddl" numbered="true" toc="default">
          <name>uptime CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
uptime-claim = (
    uptime => uint
)
]]></sourcecode>
        </section>
      </section>
      <section anchor="the-boot-seed-claim-boot-seed" numbered="true" toc="default">
        <name>The Boot Seed Claim (boot-seed)</name>
        <t>The Boot Seed claim is a random value created at system boot time that will allow differentiation of reports from different boot sessions.
This value is usually public and not protected.
It is not the same as a seed for a random number generator which must be kept secret.</t>
        <sourcecode type="CDDL"><![CDATA[
boot-seed-claim = (
    boot-seed => bytes
)
]]></sourcecode>
      </section>
      <section anchor="the-intended-use-claim-intended-use" numbered="true" toc="default">
        <name>The Intended Use Claim (intended-use)</name>
        <t>EAT's may be used in the context of several different applications.  The intended-use
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it uses EAT.</t>
        <dl>
          <dt>
1 -- Generic  </dt>
          <dd>
            <t>Generic attestation describes an application where the EAT consumer
requres the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
          </dd>
          <dt>
2-- Registration  </dt>
          <dd>
            <t>Entities that are registering for a new service may be expected to 
provide an attestation as part of the registration process.  This intended-use
setting indicates that the attestation is not intended for any use but registration.</t>
          </dd>
          <dt>
3 -- Provisioning  </dt>
          <dd>
            <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess device security state of the entity prior to provisioning.</t>
          </dd>
          <dt>
4 -- Certificate Issuance (Certificate Signing Request)  </dt>
          <dd>
            <t>Certifying authorities (CA's) may require attestations prior to
the issuance of certificates related to keypairs hosted at the entity.  An
EAT may be used as part of the certificate signing request (CSR).</t>
          </dd>
          <dt>
5 -- Proof-of-Possession  </dt>
          <dd>
            <t>An EAT consumer may require an attestation as part of an accompanying 
proof-of-possession (PoP) appication. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has posession
of a key.  This kind of attestation may be neceesary to verify the
security state of the entity storing the private key used in a PoP application.</t>
          </dd>
        </dl>
        <section anchor="intended-use-cddl" numbered="true" toc="default">
          <name>intended-use CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
intended-use-cbor-type = &(
    generic: 1,
    registration: 2,
    provisioning: 3,
    csr: 4,
    pop:  5
)

intended-use-json-type = 
    "generic" /
    "registration" /
    "provisioning" /
    "csr" /
    "pop" 

intended-use-claim = (
    intended-use => intended-use-cbor-type / intended-use-json-type
)
]]></sourcecode>
        </section>
      </section>
      <section anchor="profile-claim" numbered="true" toc="default">
        <name>The Profile Claim (profile)</name>
        <t>See <xref target="profiles" format="default"/> for the detailed description of a profile.</t>
        <t>A profile is identified by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the profile claim is to uniquely identify the profile even if it is a private profile.</t>
        <t>The OID is encoded in CBOR according to <xref target="CBOR-OID" format="default"/> and the URI according to <xref target="RFC8949" format="default"/>.
Both are unwrapped and thus not tags.
The OID is always absolute and never relative.
If the claims CBOR type is a text string it is a URI and if a byte string it is an OID.</t>
        <t>Note that this named "eat_profile" for JWT and is distinct from the already registered "profile" claim in the JWT claims registry.</t>
        <sourcecode type="CDDL"><![CDATA[
oid = #6.4000(bstr) ; TODO: fill this in with correct CDDL from OID RFC

profile-claim = (
    profile => ~uri / ~oid
)
]]></sourcecode>
      </section>
      <section anchor="the-software-manifests-claim-manifests" numbered="true" toc="default">
        <name>The Software Manifests Claim (manifests)</name>
        <t>This claim contains descriptions of software that is present on the device.
These manifests are installed on the device when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the device, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is that they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the Verifier and/or the Relying Party.</t>
        <t>In some cases these will be signed by the software manufacturer independent of any signing for the purpose of EAT attestation.
Manifest claims should include the manufacturer's signature (which will be signed over  by the attestation signature).
In other cases the attestation signature will be the only one.</t>
        <t>This claim allows multiple formats for the manifest.
For example the manifest may be a CBOR-format CoSWID, an XML-format SWID or other.
Identification of the type of manifest is always by a CBOR tag.
In many cases, for examples CoSWID, a tag will already be registered with IANA.
If not, a tag MUST be registered.
It can be in the first-come-first-served space which has minimal requirements for registration.</t>
        <t>The claim is an array of one or more manifests.
To facilitate hand off of the manifest to a decoding library, each manifest is contained in a byte string.
This occurs for CBOR-format manifests as well as non-CBOR format manifests.</t>
        <t>If a particular manifest type uses CBOR encoding, then the item in the array for it MUST be a byte string that contains a CBOR tag.
The EAT decoder must decode the byte string and then the CBOR within it to find the tag number to identify the type of manifest.
The contents of the byte string is then handed to the particular manifest processor for that type of manifest.
CoSWID and SUIT manifest are examples of this.</t>
        <t>If a particular manifest type does not use CBOR encoding, then the item in the array for it must be a CBOR tag that contains a byte string.
The EAT decoder uses the tag to identify the processor for that type of manifest.
The contents of the tag, the byte string, are handed to the manifest processor.
Note that a byte string is used to contain the manifest whether it is a text based format or not.
An example of this is an XML format ISO/IEC 19770 SWID.</t>
        <t>It is not possible to describe the above requirements in CDDL so the type for an individual manifest is any in the CDDL below.
The above text sets the encoding requirement.</t>
        <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests may be of multiple formats.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
        <t>When the <xref target="CoSWID" format="default"/> format is used, it MUST be a payload CoSWID, not an evidence CoSWID.</t>
        <sourcecode type="CDDL"><![CDATA[
manifests-claim = (
    manifests => manifests-type
)

manifests-type = [+ $manifest-formats]

; Must be a CoSWID payload type
$manifest-formats /= bytes .cbor concise-swid-tag

$manifest-formats /= bytes .cbor SUIT_Envelope_Tagged

]]></sourcecode>
      </section>
      <section anchor="swevidence" numbered="true" toc="default">
        <name>The Software Evidence Claim (swevidence)</name>
        <t>This claim contains descriptions, lists, evidence or measurements of the software that exists on the device.
The defining characteristic of this claim is that its contents are created by processes on the device that inventory, measure or otherwise characterize the software on the device.
The contents of this claim do not originate from the software manufacturer.</t>
        <t>In most cases the contents of this claim are signed as part of attestation signing, but independent signing in addition to the attestation signing is not ruled out when a particular evidence format supports it.</t>
        <t>This claim uses the same mechanism for identification of the type of the swevidence as is used for the type of the manifest in the manifests claim.
It also uses the same byte string based mechanism for containing the claim and easing the hand off to a processing library.
See the discussion above in the manifests claim.</t>
        <t>When the <xref target="CoSWID" format="default"/> format is used, it MUST be evidence CoSWIDs, not payload CoSWIDS.</t>
        <sourcecode type="CDDL"><![CDATA[
swevidence-claim = (
    swevidence => swevidence-type
)

swevidence-type = [+ $swevidence-formats]

; Must be a CoSWID evidence type
$swevidence-formats /= bytes .cbor concise-swid-tag

]]></sourcecode>
      </section>
      <section anchor="swresults" numbered="true" toc="default">
        <name>The SW Measurement Results Claim (swresults)</name>
        <t>This claims reports the outcome of the comparison of a measurement on some software to the expected reference values.
It may report a successful comparison, failed comparison or other.</t>
        <t>This claim may be generated by the verifier and sent to the relying party.
For example, it could be the results of the verifier comparing the contents of the swevidence claim to reference values.</t>
        <t>This claim can also be generated on the device if the device has the ability for one subsystem to measure another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the reference values for the rich OS.</t>
        <t>Within an attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for the kernel and each individual application separately.</t>
        <t>For each software objective, the following can be reported.</t>
        <section anchor="scheme" numbered="true" toc="default">
          <name>Scheme</name>
          <t>This is the free-form text name of the verification system or scheme that performed the verification.
There is no official registry of schemes or systems.
It may be the name of a commercial product or such.</t>
        </section>
        <section anchor="objective" numbered="true" toc="default">
          <name>Objective</name>
          <t>This roughly characterizes the coverage of the software measurement software.
This corresponds to the attestation target or the submodule.
If all of the indicated target is not covered, the measurement must indicate partial.</t>
          <dl>
            <dt>
1 -- all  </dt>
            <dd>
              <t>Indicates all the software has been verified, for example, all the software in the attestation target or the submodule</t>
            </dd>
            <dt>
2 -- firmware  </dt>
            <dd>
              <t>Indicates all of and only the firmware</t>
            </dd>
            <dt>
3 -- kernel  </dt>
            <dd>
              <t>Refers to all of the most-privileged software, for example the Linux kernel</t>
            </dd>
            <dt>
4 -- privileged  </dt>
            <dd>
              <t>Refers to all of the software used by the root, system or administrative account</t>
            </dd>
            <dt>
5 -- system-libs  </dt>
            <dd>
              <t>Refers to all of the system libraries that are broadly shared and used by applications and such</t>
            </dd>
            <dt>
6 -- partial  </dt>
            <dd>
              <t>Some other partial set of the software</t>
            </dd>
          </dl>
        </section>
        <section anchor="results" numbered="true" toc="default">
          <name>Results</name>
          <t>This describes the result of the measurement and also the comparison to reference values.</t>
          <dl>
            <dt>
1 -- verificaton-not-run  </dt>
            <dd>
              <t>Indicates no attempt was made to run the verification</t>
            </dd>
            <dt>
2 -- verification-indeterminite  </dt>
            <dd>
              <t>The verification was attempted, but it did not produce a result; perhaps it ran out of memory, the battery died or such</t>
            </dd>
            <dt>
3 -- verification-failed  </dt>
            <dd>
              <t>The verification ran to completion, the comparison was completed and did not compare correctly to the reference values</t>
            </dd>
            <dt>
4 -- fully-verified  </dt>
            <dd>
              <t>The verification ran to completion and all measurements compared correctly to reference values</t>
            </dd>
            <dt>
5 -- partially-verified  </dt>
            <dd>
              <t>The verification ran to completion and some, but not all measurements compared correctly to reference values</t>
            </dd>
          </dl>
        </section>
        <section anchor="objective-name" numbered="true" toc="default">
          <name>Objective Name</name>
          <t>This is a free-form text string that describes the objective.
For example, "Linux kernel" or "Facebook App"</t>
          <sourcecode type="CDDL"><![CDATA[
verification-result-cbor-type = &(
    verification-not-run: 1,
    verification-indeterminite: 2,
    verification-failed: 3,
    fully-verified: 4,
    partially-verified: 5,
)

verification-result-json-type = 
    "verification-not-run" /
    "verification-indeterminite" /
    "verification-failed" /
    "fully-verified" /
    "partially-verified" 


verification-objective-cbor-type = &(
    all: 1,
    firmware: 2,
    kernel: 3,
    privileged: 4,
    system-libs: 5,
    partial: 6,
)

verification-objective-json-type = 
    "all" /
    "firmware" /
    "kernel" /
    "privileged" /
    "system-libs" /
    "partial"


swresult = [
    verification-system: tstr,
    objective: verification-objective-cbor-type / verification-objective-json-type, 
    result: verification-result-cbor-type / verification-result-json-type, 
    ? objective-name: tstr
]


swresults-claim = ( 
   swresults => [ + swresult ]
)
]]></sourcecode>
        </section>
      </section>
      <section anchor="the-submodules-part-of-a-token-submods" numbered="true" toc="default">
        <name>The Submodules Part of a Token (submods)</name>
        <t>Some devices are complex, having many subsystems or submodules.  A
mobile phone is a good example. It may have several connectivity
submodules for communications (e.g., Wi-Fi and cellular). It may have
subsystems for low-power audio and video playback. It may have one or
more security-oriented subsystems like a TEE or a Secure Element.</t>
        <t>The claims for each these can be grouped together in a submodule.</t>
        <t>The submods part of a token are in a single map/object with many entries, one
per submodule.  There is only one submods map in a token. It is
identified by its specific label. It is a peer to other claims, but it
is not called a claim because it is a container for a claim set rather
than an individual claim. This submods part of a token allows what
might be called recursion. It allows claim sets inside of claim sets
inside of claims sets...</t>
        <section anchor="two-types-of-submodules" numbered="true" toc="default">
          <name>Two Types of Submodules</name>
          <t>Each entry in the submod map is one of two types:</t>
          <ul spacing="normal">
            <li>A non-token submodule that is a map or object directly containing claims for the submodule.</li>
            <li>A nested EAT that is a fully formed, independently signed EAT token</li>
          </ul>
          <section anchor="non-token-submodules" numbered="true" toc="default">
            <name>Non-token Submodules</name>
            <t>This is simply a map or object containing claims about the submodule.</t>
            <t>It may contain claims that are the same as its surrounding token or superior submodules. 
For example, the top-level of the token may have a UEID, a submod may have a different UEID and a further subordinate submodule may also have a UEID.</t>
            <t>It is signed/encrypted along with the rest of the token and thus the claims are secured by the same Attester with the same signing key as the rest of the token.</t>
            <t>If a token is in CBOR format (a CWT or a UCCS), all non-token submodules must be CBOR format.
If a token in in JSON format (a JWT), all non-token submodules must be in JSON format.</t>
            <t>When decoding, this type of submodule is recognized from the other type by being a data item of type map for CBOR or type object for JSON.</t>
          </section>
          <section anchor="nested-eats" numbered="true" toc="default">
            <name>Nested EATs</name>
            <t>This type of submodule is a fully formed secured EAT as defined in this document except that it MUST NOT be a UCCS or an unsecured JWT.
A nested token that is one that is always secured using COSE or JOSE, usually by an independent Attester.
When the surrounding EAT is a CWT or secured JWT, the nested token becomes securely bound with the other claims in the surrounding token.</t>
            <t>It is allowed to have a CWT as a submodule in a JWT and vice versa, but this SHOULD be avoided unless necessary.</t>
            <section anchor="surrounding-eat-is-cbor-format" numbered="true" toc="default">
              <name>Surrounding EAT is CBOR format</name>
              <t>They type of an EAT nested in a CWT is determined by whether the CBOR type is a text string or a byte string.
If a text string, then it is a JWT.
If a byte string, then it is a CWT.</t>
              <t>A CWT nested in a CBOR-format token is always wrapped by a byte string for easier handling with standard CBOR decoders and token processing APIs that will typically take a byte buffer as input.</t>
              <t>Nested CWTs may be either a CWT CBOR tag or a CWT Protocol Message.
COSE layers in nested CWT EATs MUST be a COSE_Tagged_Message, never a COSE_Untagged_Message.
If a nested EAT has more than one level of COSE, for example one that is both encrypted and signed, a COSE_Tagged_message must be used at every level.</t>
            </section>
            <section anchor="surrounding-eat-is-json-format" numbered="true" toc="default">
              <name>Surrounding EAT is JSON format</name>
              <t>When a CWT is nested in a JWT, it must be as a 55799 tag in order to distinguish it from a nested JWT.</t>
              <t>When a nested EAT in a JWT is decoded, first remove the base64url encoding.
Next, check to see if it starts with the bytes 0xd9d9f7.
If so, then it is a CWT as a JWT will never start with these four bytes. 
If not if it is a JWT.</t>
              <t>Other than the 55799 tag requirement, tag usage for CWT's nested in a JSON format token follow the same rules as for CWTs nested in CBOR-format tokens.
It may be a CWT CBOR tag or a CWT Protocol Message and COSE_Tagged_Message MUST be used at all COSE layers.</t>
            </section>
          </section>
          <section anchor="unsecured-jwts-and-uccs-tokens-as-submodules" numbered="true" toc="default">
            <name>Unsecured JWTs and UCCS Tokens as Submodules</name>
            <t>To incorporate a UCCS token as a submodule, it MUST be as a non-token submodule. 
This can be accomplished inserting the content of the UCCS Tag into the submodule map.
The content of a UCCS tag is exactly a map of claims as required for a non-token submodule.
If the UCCS is not a UCCS tag, then it can just be inserted into the submodule map directly.</t>
            <t>The definition of a nested EAT type of submodule is that it is one that is secured (signed) by an Attester.
Since UCCS tokens are unsecured, they do not fulfill this definition and must be non-token submodules.</t>
            <t>To incorporate an Unsecured JWT as a submodule, the null-security JOSE wrapping should be removed.
The resulting claims set should be inserted as a non-token submodule.</t>
            <t>To incorporate a UCCS token in a surrounding JSON token, the UCCS token claims should be translated from CBOR to JSON.
To incorporate an Unsecured JWT into a surrounding CBOR-format token, the null-security JOSE should be removed and the claims translated from JSON to CBOR.</t>
          </section>
        </section>
        <section anchor="no-inheritance" numbered="true" toc="default">
          <name>No Inheritance</name>
          <t>The subordinate modules do not inherit anything from the containing
token.  The subordinate modules must explicitly include all of their
claims. This is the case even for claims like the nonce and age.</t>
          <t>This rule is in place for simplicity. It avoids complex inheritance
rules that might vary from one type of claim to another.</t>
        </section>
        <section anchor="security-levels" numbered="true" toc="default">
          <name>Security Levels</name>
          <t>The security level of the non-token subordinate modules should always
be less than or equal to that of the containing modules in the case of non-token
submodules. It makes no sense for a module of lesser security to be
signing claims of a module of higher security. An example of this is a
TEE signing claims made by the non-TEE parts (e.g. the high-level OS)
of the device.</t>
          <t>The opposite may be true for the nested tokens. They usually have
their own more secure key material. An example of this is an embedded
secure element.</t>
        </section>
        <section anchor="submodule-names" numbered="true" toc="default">
          <name>Submodule Names</name>
          <t>The label or name for each submodule in the submods map is a text
string naming the submodule. No submodules may have the same name.</t>
        </section>
        <section anchor="submods-cddl" numbered="true" toc="default">
          <name>submods CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
; The part of a token that contains all the submodules.  It is a peer
; with the claims in the token, but not a claim, only a map/object to
; hold all the submodules.

submods-part = (
    submods => submods-type
)

submods-type = { + submod-type }


; The type of a submodule which can either be a nested claim set or a
; nested separately signed token. Nested tokens are wrapped in a bstr
; or a tstr.

submod-type = (
    submod-name => eat-claim-set / nested-token
)


; When this is a bstr, the contents are an eat-token in CWT or UCCS
; format.  When this is a tstr, the contents are an eat-token in JWT
; format.

nested-token = bstr / tstr; 


; Each submodule has a unique text string name.

submod-name = tstr 


]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="keyid" numbered="true" toc="default">
      <name>Endorsements and Verification Keys</name>
      <t>The Verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture" format="default"/> describes what is called an Endorsement.
This is an input to the Verifier that is usually the basis of the trust placed in an EAT and the Attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain Reference Values to which EAT claims are compared as part of the verification process.
It may contain implied claims, those that are passed on to the Relying Party in Attestation Results.</t>
      <t>There is not yet any standard format(s) for an Endorsement.
One format that may be used for an Endorsement is an X.509 certificate.
Endorsement data like Reference Values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the Endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an Endorsement.</t>
      <t>For the components (Attester, Verifier, Relying Party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <section anchor="identification-methods" numbered="true" toc="default">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes Endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for Endorsements in other formats. If such an Endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id" numbered="true" toc="default">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC8152" format="default"/> and <xref target="RFC7515" format="default"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters" numbered="true" toc="default">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft" format="default"/> and JSON Web Siganture <xref target="RFC7515" format="default"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an Endorsement and thus carrying additional input to the Verifier. It may be just an X.509 certificate, not an Endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the Verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters" numbered="true" toc="default">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft" format="default"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification" numbered="true" toc="default">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the device and therefore can work well as a key identifier or Endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
      <section anchor="other-considerations" numbered="true" toc="default">
        <name>Other Considerations</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the Verifier may be configured with a root certificate or a master key by the Verifier system administrator.</t>
        <t>Often an X.509 certificate or an Endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints and an Endorsement might have Reference Values.
When this is the case, the key identifier must be either a protected header or in the payload such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515" format="default"/>.</t>
      </section>
    </section>
    <section anchor="profiles" numbered="true" toc="default">
      <name>Profiles</name>
      <t>This EAT specification does not gaurantee that implementations of it will interoperate.
The variability in this specification is necessary to accommodate the widely varying use cases.
An EAT profile narrows the specification for a specific use case.
An ideal EAT profile will gauarantee interoperability.</t>
      <t>The profile can be named in the token using the profile claim described in <xref target="profile-claim" format="default"/>.</t>
      <section anchor="format-of-a-profile-document" numbered="true" toc="default">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>In some cases CDDL may be created that replaces CDDL in this or other document to express some profile requirements.
For example, to require the altitude data item in the location claim, CDDL can be written that replicates the location claim with the altitude no longer optional.</t>
      </section>
      <section anchor="list-of-profile-issues" numbered="true" toc="default">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, UCCS, JWS, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both" numbered="true" toc="default">
          <name>Use of JSON, CBOR or both</name>
          <t>The profile should indicate whether the token format should be CBOR, JSON, both or even some other encoding.
If some other encoding, a specification for how the CDDL described here is serialized in that encoding is necessary.</t>
          <t>This should be addressed for the top-level token and for any nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding" numbered="true" toc="default">
          <name>CBOR Map and Array Encoding</name>
          <t>The profile should indicate whether definite-length arrays/maps, indefinite-length arrays/maps or both are allowed.
A good default is to allow only definite-length arrays/maps.</t>
          <t>An alternate is to allow both definite and indefinite-length arrays/maps.
The decoder should accept either.
Encoders that need to fit on very small hardware or be actually implement in hardware can use indefinite-length encoding.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
        </section>
        <section anchor="cbor-string-encoding" numbered="true" toc="default">
          <name>CBOR String Encoding</name>
          <t>The profile should indicate whether definite-length strings, indefinite-length strings or both are allowed.
A good default is to allow only definite-length strings.
As with map and array encoding, allowing indefinite-length strings can be beneficial for some smaller implementations.</t>
        </section>
        <section anchor="cbor-preferred-serialization" numbered="true" toc="default">
          <name>CBOR Preferred Serialization</name>
          <t>The profile should indicate whether encoders must use preferred serialization.
The profile should indicate whether decoders must accept non-preferred serialization.</t>
        </section>
        <section anchor="cosejose-protection" numbered="true" toc="default">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
EAT/CWT has the option to have no protection using UCCS and JOSE has a NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, CWT and UCCS are allowed by EAT.</t>
          <t>The profile should list the protections that must be supported by all decoders implementing the profile.
The encoders them must implement a subset of what is listed for the decoders, perhaps only one.</t>
          <t>Implementations may choose to sign or MAC before encryption so that the implementation layer doing the signing or MACing can be the smallest.
It is often easier to make smaller implementations more secure, perhaps even implementing in solely in hardware.
The key material for a signature or MAC is a private key, while for encryption it is likely to be a public key.
The key for encryption requires less protection.</t>
        </section>
        <section anchor="cosejose-algorithms" numbered="true" toc="default">
          <name>COSE/JOSE Algorithms</name>
          <t>The profile document should list the COSE algorithms that a Verifier must implement.
The Attester will select one of them. 
Since there is no negotiation, the Verifier should implement all algorithms listed in the profile.</t>
        </section>
        <section anchor="verification-key-identification" numbered="true" toc="default">
          <name>Verification Key Identification</name>
          <t>Section <xref target="keyid" format="default"/> describes a number of methods for identifying a verification key.
The profile document should specify one of these or one that is not described.
The ones described in this document are only roughly described.
The profile document should go into the full detail.</t>
        </section>
        <section anchor="endorsement-identification" numbered="true" toc="default">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as Verification Key Identification, the profile may wish to specify how Endorsements are to be identified.
However note that Endorsement Identification is optional, where as key identification is not.</t>
        </section>
        <section anchor="freshness" numbered="true" toc="default">
          <name>Freshness</name>
          <t>Just about every use case will require some means of knowing the EAT is recent enough and not a replay of an old token.
The profile should describe how freshness is achieved.
The section on Freshness in <xref target="RATS-Architecture" format="default"/> describes some of the possible solutions to achieve this.</t>
        </section>
        <section anchor="required-claims" numbered="true" toc="default">
          <name>Required Claims</name>
          <t>The profile can list claims whose absence results in Verification failure.</t>
        </section>
        <section anchor="prohibited-claims" numbered="true" toc="default">
          <name>Prohibited Claims</name>
          <t>The profile can list claims whose presence results in Verification failure.</t>
        </section>
        <section anchor="additional-claims" numbered="true" toc="default">
          <name>Additional Claims</name>
          <t>The profile may describe entirely new claims.
These claims can be required or optional.</t>
        </section>
        <section anchor="refined-claim-definition" numbered="true" toc="default">
          <name>Refined Claim Definition</name>
          <t>The profile may lock down optional aspects of individual claims.
For example, it may require altitude in the location claim, or it may require that HW Versions always be described using EAN-13.</t>
        </section>
        <section anchor="cbor-tags" numbered="true" toc="default">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.
Similarly, the profile should specify whether the token should be a UCCS tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unncessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="manifests-and-software-evidence-claims" numbered="true" toc="default">
          <name>Manifests and Software Evidence Claims</name>
          <t>The profile should specify which formats are allowed for the manifests and software evidence claims.
The profile may also go on to say which parts and options of these formats are used, allowed and prohibited.</t>
        </section>
      </section>
    </section>
    <section anchor="encoding" numbered="true" toc="default">
      <name>Encoding</name>
      <t>This makes use of the types defined in CDDL Appendix D, Standard Prelude.</t>
      <t>Some of the CDDL included here is for claims that are defined in CWT <xref target="RFC8392" format="default"/> or JWT <xref target="RFC7519" format="default"/> or are in the IANA CWT or JWT registries.
CDDL was not in use when these claims where defined.</t>
      <section anchor="common-cddl-types" numbered="true" toc="default">
        <name>Common CDDL Types</name>
        <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
        <t>Note that unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949" format="default"/>.
They are just text strings that contain a URI.</t>
        <sourcecode type="CDDL"><![CDATA[
string-or-uri = tstr 

time-int = #6.1(int)
]]></sourcecode>
      </section>
      <section anchor="cddl-for-cwt-defined-claims" numbered="true" toc="default">
        <name>CDDL for CWT-defined Claims</name>
        <t>This section provides CDDL for the claims defined in CWT. It is
non-normative as <xref target="RFC8392" format="default"/> is the authoritative definition of these
claims.</t>
        <t>Note that the subject, issue and audience claims may be a text string containing a URI per <xref target="RFC8392" format="default"/> and <xref target="RFC7519" format="default"/>.
These are never the URI tag defined in <xref target="RFC8949" format="default"/>.</t>
        <sourcecode type="CDDL"><![CDATA[
$$eat-extension //= (
    ? issuer => text,
    ? subject => text,
    ? audience => text,
    ? expiration => time,
    ? not-before => time,
    ? issued-at => time,
    ? cwt-id => bytes,
)

issuer = 1
subject = 2
audience = 3
expiration = 4
not-before = 5
issued-at = 6
cwt-id = 7

]]></sourcecode>
      </section>
      <section anchor="json" numbered="true" toc="default">
        <name>JSON</name>
        <section anchor="json-labels" numbered="true" toc="default">
          <name>JSON Labels</name>
          <sourcecode type="JSON"><![CDATA[
; The following are Claim Keys (labels) assigned for JSON-encoded tokens.

ueid /= "ueid"
sueids /= "sueids"
nonce /= "nonce"
oemid /= "oemid"
security-level /= "seclevel"
secure-boot /= "secboot"
debug-status /= "dbgstat"
location /= "location"
uptime /= "uptime"
profile /= "eat-profile"
intended-use /= "intuse"
boot-seed /= "bootseed"
submods /= "submods"
timestamp /= "timestamp"
manifests /= "manifests"
swevidence /= "swevidence"
swevidence /= "swresults"

latitude /= "lat"
longitude /= "long"
altitude /= "alt"
accuracy /= "accry"
altitude-accuracy /= "alt-accry"
heading /= "heading"
speed /= "speed"
]]></sourcecode>
        </section>
        <section anchor="jsoninterop" numbered="true" toc="default">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per RFC 8610 Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- must be base64url encoded</li>
            <li>time -- must be encoded as NumericDate as described section 2 of <xref target="RFC7519" format="default"/>.</li>
            <li>string-or-uri -- must be encoded as StringOrURI as described section 2 of <xref target="RFC7519" format="default"/>.</li>
            <li>uri -- must be a URI <xref target="RFC3986" format="default"/>.</li>
            <li>oid -- encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1").</li>
          </ul>
        </section>
      </section>
      <section anchor="cbor" numbered="true" toc="default">
        <name>CBOR</name>
        <section anchor="cbor-interoperability" numbered="true" toc="default">
          <name>CBOR Interoperability</name>
          <t>CBOR allows data items to be serialized in more than one form.
If the sender uses a form that the receiver can't decode, there will not be interoperability.</t>
          <t>This specification gives no blanket requirements to narrow CBOR serialization for all uses of EAT.
This allows individual uses to tailor serialization to the environment.
It also may result in EAT implementations that don't interoperate.</t>
          <t>One way to guarantee interoperability is to clearly specify CBOR serialization in a profile document.
See <xref target="profiles" format="default"/> for a list of serialization issues that should be addressed.</t>
          <t>EAT will be commonly used where the device generating the attestation is constrained and the receiver/verifier of the attestation is a capacious server.
Following is a set of serialization requirements that work well for that use case and are guaranteed to interoperate.
Use of this serialization is recommended where possible, but not required.
An EAT profile may just reference the following section rather than spell out serialization details.</t>
          <section anchor="eat-constrained-device-serialization" numbered="true" toc="default">
            <name>EAT Constrained Device Serialization</name>
            <ul spacing="normal">
              <li>Preferred serialization described in section 4.1 of <xref target="RFC8949" format="default"/> is not required.
The EAT decoder must accept all forms of number serialization.
The EAT encoder may use any form it wishes.</li>
              <li>The EAT decoder must accept indefinite length arrays and maps as described in section 3.2.2 of <xref target="RFC8949" format="default"/>.
The EAT encoder may use indefinite length arrays and maps if it wishes.</li>
              <li>The EAT decoder must accept indefinite length strings as described in section 3.2.3 of <xref target="RFC8949" format="default"/>.
The EAT encoder may use indefinite length strings if it wishes.</li>
              <li>Sorting of maps by key is not required.
The EAT decoder must not rely on sorting.</li>
              <li>Deterministic encoding described in Section 4.2 of <xref target="RFC8949" format="default"/> is not required.</li>
              <li>Basic validity described in section 5.3.1 of <xref target="RFC8949" format="default"/> must be followed.
The EAT encoder must not send duplicate map keys/labels or invalid UTF-8 strings.</li>
            </ul>
          </section>
        </section>
      </section>
      <section anchor="collected-cddl" numbered="true" toc="default">
        <name>Collected CDDL</name>
        <sourcecode type="CDDL"><![CDATA[
; This is the top-level definition of the claims in EAT tokens.  To
; form an actual EAT Token, this claim set is enclosed in a COSE, JOSE
; or UCCS message.

eat-claim-set = {
    ? ueid-claim,
    ? sueids-claim,
    ? nonce-claim,
    ? oemid-claim,
    ? hardware-version-claims,
    ? security-level-claim,
    ? secure-boot-claim,
    ? debug-status-claim,
    ? location-claim,
    ? intended-use-claim,
    ? profile-claim,
    ? uptime-claim,
    ? manifests-claim,
    ? swevidence-claim,
    ? swresults-claim,
    ? submods-part,
    * $$eat-extension,
}


; This is the top-level definition of an EAT Token.  It is a CWT, JWT
; or UCSS where the payload is an eat-claim-set. A JWT_Message is what
; is defined by JWT in RFC 7519. (RFC 7519 doesn't use CDDL so a there
; is no actual CDDL definition of JWT_Message).

eat-token = EAT_Tagged_Message / EAT_Untagged_Message / JWT_Message


; This is CBOR-format EAT token in the CWT or UCCS format that is a
; tag.  COSE_Tagged_message is defined in RFC 8152.  Tag 601 is
; proposed by the UCCS draft, but not yet assigned.

EAT_Tagged_Message = #6.61(COSE_Tagged_Message) / #6.601(eat-claim-set)


; This is a CBOR-format EAT token that is a CWT or UCSS that is not a
; tag COSE_Tagged_message and COSE_Untagged_Message are defined in RFC
; 8152.

EAT_Untagged_Message = COSE_Tagged_Message / COSE_Untagged_Message / UCCS_Untagged_Message


; This is an "unwrapped" UCCS tag. Unwrapping a tag means to use the
; definition of its content without the preceding type 6 tag
; integer. Since a UCCS is nothing but a tag for an unsecured CWT
; claim set, unwrapping reduces to a bare eat-claim-set.

UCCS_Untagged_Message = eat-claim-set


string-or-uri = tstr 

time-int = #6.1(int)

$$eat-extension //= (
    ? issuer => text,
    ? subject => text,
    ? audience => text,
    ? expiration => time,
    ? not-before => time,
    ? issued-at => time,
    ? cwt-id => bytes,
)

issuer = 1
subject = 2
audience = 3
expiration = 4
not-before = 5
issued-at = 6
cwt-id = 7


debug-status-cbor-type = &(
    enabled: 0,
    disabled: 1,
    disabled-since-boot: 2,
    disabled-permanently: 3,
    disabled-fully-and-permanently: 4
)

debug-status-json-type = 
    "enabled" /
    "disabled" /
    "disabled-since-boot" /
    "disabled-permanently" /
    "disabled-fully-and-permanently"

debug-status-claim = (
    debug-status => debug-status-cbor-type / debug-status-json-type
)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude = 1 / "latitude"
longitude = 2 / "longitude"
altitude = 3 / "altitude"
accuracy = 4 / "accuracy"
altitude-accuracy = 5 / "altitude-accuracy"
heading = 6 / "heading"
speed = 7 / "speed"
timestamp = 8 / "timestamp"
age = 9 / "age"

location-claim = (
    location-label => location-type
)

nonce-type = bstr .size (8..64)

nonce-claim = (
    nonce => nonce-type / [ 2* nonce-type ]
)

oemid-claim = (
    oemid => bstr
)

hw-version-type = [
    version:  tstr,
    scheme:  $version-scheme
]

chip-version-claim = (
    chip-version => hw-version-type
)

board-version-claim = (
    board-version => hw-version-type
)

device-version-claim = (
    device-version => hw-version-type
)

hardware-version-claims = (
    ? chip-version-claim,
    ? board-version-claim,
    ? device-version-claim,
)


secure-boot-claim = (
    secure-boot => bool
)

security-level-cbor-type = &(
    unrestricted: 1,
    restricted: 2,
    secure-restricted: 3,
    hardware: 4
)

security-level-json-type = 
    "unrestricted" /
    "restricted" /
    "secure-restricted" /
    "hardware"

security-level-claim = (
    security-level => security-level-cbor-type / security-level-json-type
)

; The part of a token that contains all the submodules.  It is a peer
; with the claims in the token, but not a claim, only a map/object to
; hold all the submodules.

submods-part = (
    submods => submods-type
)

submods-type = { + submod-type }


; The type of a submodule which can either be a nested claim set or a
; nested separately signed token. Nested tokens are wrapped in a bstr
; or a tstr.

submod-type = (
    submod-name => eat-claim-set / nested-token
)


; When this is a bstr, the contents are an eat-token in CWT or UCCS
; format.  When this is a tstr, the contents are an eat-token in JWT
; format.

nested-token = bstr / tstr; 


; Each submodule has a unique text string name.

submod-name = tstr 



ueid-type = bstr .size (7..33)

ueid-claim = (
     ueid => ueid-type
)

sueids-type = {
    + tstr => ueid-type
}

sueids-claim = (
     sueids => sueids-type
)

intended-use-cbor-type = &(
    generic: 1,
    registration: 2,
    provisioning: 3,
    csr: 4,
    pop:  5
)

intended-use-json-type = 
    "generic" /
    "registration" /
    "provisioning" /
    "csr" /
    "pop" 

intended-use-claim = (
    intended-use => intended-use-cbor-type / intended-use-json-type
)

oid = #6.4000(bstr) ; TODO: fill this in with correct CDDL from OID RFC

profile-claim = (
    profile => ~uri / ~oid
)

uptime-claim = (
    uptime => uint
)

manifests-claim = (
    manifests => manifests-type
)

manifests-type = [+ $manifest-formats]

; Must be a CoSWID payload type
$manifest-formats /= bytes .cbor concise-swid-tag

$manifest-formats /= bytes .cbor SUIT_Envelope_Tagged


swevidence-claim = (
    swevidence => swevidence-type
)

swevidence-type = [+ $swevidence-formats]

; Must be a CoSWID evidence type
$swevidence-formats /= bytes .cbor concise-swid-tag


verification-result-cbor-type = &(
    verification-not-run: 1,
    verification-indeterminite: 2,
    verification-failed: 3,
    fully-verified: 4,
    partially-verified: 5,
)

verification-result-json-type = 
    "verification-not-run" /
    "verification-indeterminite" /
    "verification-failed" /
    "fully-verified" /
    "partially-verified" 


verification-objective-cbor-type = &(
    all: 1,
    firmware: 2,
    kernel: 3,
    privileged: 4,
    system-libs: 5,
    partial: 6,
)

verification-objective-json-type = 
    "all" /
    "firmware" /
    "kernel" /
    "privileged" /
    "system-libs" /
    "partial"


swresult = [
    verification-system: tstr,
    objective: verification-objective-cbor-type / verification-objective-json-type, 
    result: verification-result-cbor-type / verification-result-json-type, 
    ? objective-name: tstr
]


swresults-claim = ( 
   swresults => [ + swresult ]
)

; The following Claim Keys (labels) are pre-assigned by IANA.
; They are for CBOR-based tokens (CWT and UCCS).
; They are not expected to change in the final publication as an RFC.

nonce = 10
ueid = 11
oemid = 13
security-level = 14
secure-boot = 15
debug-status = 16
location-label = 17
profile = 18
submods = 20


boot-seed-claim = (
    boot-seed => bytes
)

; The following are Claim Keys (labels) assigned for JSON-encoded tokens.

ueid /= "ueid"
sueids /= "sueids"
nonce /= "nonce"
oemid /= "oemid"
security-level /= "seclevel"
secure-boot /= "secboot"
debug-status /= "dbgstat"
location /= "location"
uptime /= "uptime"
profile /= "eat-profile"
intended-use /= "intuse"
boot-seed /= "bootseed"
submods /= "submods"
timestamp /= "timestamp"
manifests /= "manifests"
swevidence /= "swevidence"
swevidence /= "swresults"

latitude /= "lat"
longitude /= "long"
altitude /= "alt"
accuracy /= "accry"
altitude-accuracy /= "alt-accry"
heading /= "heading"
speed /= "speed"

]]></sourcecode>
      </section>
    </section>
    <section anchor="iana-considerations" numbered="true" toc="default">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-web-token-cwt-claims-registry" numbered="true" toc="default">
        <name>Reuse of CBOR Web Token (CWT) Claims Registry</name>
        <t>Claims defined for EAT are compatible with those of CWT
so the CWT Claims Registry is re used. No new IANA registry
is created. All EAT claims should be registered in the
CWT and JWT Claims Registries.</t>
      </section>
      <section anchor="claim-characteristics" numbered="true" toc="default">
        <name>Claim Characteristics</name>
        <t>The following is design guidance for creating new EAT claims, particularly those to be registered with IANA.</t>
        <t>Much of this guidance is generic and could also be considered when designing new CWT or JWT claims.</t>
        <section anchor="interoperability-and-relying-party-orientation" numbered="true" toc="default">
          <name>Interoperability and Relying Party Orientation</name>
          <t>It is a broad goal that EATs can be processed by relying parties in a general way regardless of the type, manufacturer or technology of the device from which they originate. 
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
          <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
        </section>
        <section anchor="operating-system-and-technology-neutral" numbered="true" toc="default">
          <name>Operating System and Technology Neutral</name>
          <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
          <t>Claims should not be defined such that they are specific to a SW environment or programming language.</t>
          <t>Claims should not be defined such that they are specific to a chip or particular hardware. 
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
          <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
        </section>
        <section anchor="security-level-neutral" numbered="true" toc="default">
          <name>Security Level Neutral</name>
          <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists. 
Secure Elements and smart cards are examples of this. 
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
          <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
        </section>
        <section anchor="reuse-of-extant-data-formats" numbered="true" toc="default">
          <name>Reuse of Extant Data Formats</name>
          <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
          <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON format for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
          <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
        </section>
        <section anchor="proprietary-claims" numbered="true" toc="default">
          <name>Proprietary Claims</name>
          <t>EAT allows the definition and use of proprietary claims.</t>
          <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer. 
This is a supported use case.</t>
          <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
        </section>
      </section>
      <section anchor="claims-registered-by-this-document" numbered="true" toc="default">
        <name>Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519" format="default"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392" format="default"/>. Each entry below is an addition to both registries (except
for the nonce claim which is already registered for JWT, but not registered for CWT).</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <section anchor="claims-for-early-assignment" numbered="true" toc="default">
          <name>Claims for Early Assignment</name>
          <t>RFC Editor: in the final publication this section should be combined with the following
section as it will no longer be necessary to distinguish claims with early assignment.
Also, the following paragraph should be removed.</t>
          <t>The claims in this section have been (requested for / given) early assignment according to <xref target="RFC7120" format="default"/>.
They have been assigned values and registered before final publication of this document.
While their semantics is not expected to change in final publication, it is possible that they will.
The JWT Claim Names and CWT Claim Keys are not expected to change.</t>
          <ul spacing="normal">
            <li>Claim Name: Nonce</li>
            <li>Claim Description: Nonce</li>
            <li>JWT Claim Name: "nonce" (already registered for JWT)</li>
            <li>Claim Key: 10</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <xref target="OpenIDConnectCore" format="default"/>, <strong>this document</strong></li>
          </ul>
          <t>&nbsp;</t>
          <ul spacing="normal">
            <li>Claim Name: UEID</li>
            <li>Claim Description: The Universal Entity ID</li>
            <li>JWT Claim Name: "ueid"</li>
            <li>CWT Claim Key: 11</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t>&nbsp;</t>
          <ul spacing="normal">
            <li>Claim Name: OEMID</li>
            <li>Claim Description: IEEE-based OEM ID</li>
            <li>JWT Claim Name: "oemid"</li>
            <li>Claim Key: 13</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t>&nbsp;</t>
          <ul spacing="normal">
            <li>Claim Name: Security Level</li>
            <li>Claim Description: Characterization of the security of an Attester or submodule</li>
            <li>JWT Claim Name: "seclevel"</li>
            <li>Claim Key: 14</li>
            <li>Claim Value Type(s): integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t>&nbsp;</t>
          <ul spacing="normal">
            <li>Claim Name: Secure Boot</li>
            <li>Claim Description: Indicate whether the boot was secure</li>
            <li>JWT Claim Name: "secboot"</li>
            <li>Claim Key: 15</li>
            <li>Claim Value Type(s): Boolean</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t>&nbsp;</t>
          <ul spacing="normal">
            <li>Claim Name: Debug Status</li>
            <li>Claim Description: Indicate status of debug facilities</li>
            <li>JWT Claim Name: "dbgstat"</li>
            <li>Claim Key: 16</li>
            <li>Claim Value Type(s): integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t>&nbsp;</t>
          <ul spacing="normal">
            <li>Claim Name: Location</li>
            <li>Claim Description: The geographic location</li>
            <li>JWT Claim Name: "location"</li>
            <li>Claim Key: 17</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t>&nbsp;</t>
          <ul spacing="normal">
            <li>Claim Name: Profile</li>
            <li>Claim Description: Indicates the EAT profile followed</li>
            <li>JWT Claim Name: "eat_profile"</li>
            <li>Claim Key: 18</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t>&nbsp;</t>
          <ul spacing="normal">
            <li>Claim Name: Submodules Section</li>
            <li>Claim Description: The section containing submodules (not actually a claim)</li>
            <li>JWT Claim Name: "submods"</li>
            <li>Claim Key: 20</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="to-be-assigned-claims" numbered="true" toc="default">
          <name>To be Assigned Claims</name>
          <t>TODO: add the rest of the claims in here</t>
        </section>
        <section anchor="registerversionscheme" numbered="true" toc="default">
          <name>Version Schemes Registered by this Document</name>
          <t>IANA is requested to register a new value in the "Software Tag Version Scheme Values" established by <xref target="CoSWID" format="default"/>.</t>
          <t>The new value is a version scheme a 13-digit European Article Number <xref target="EAN-13" format="default"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.
This version scheme is the ASCII text representation of EAN-13 digits, the same ones often printed with a bar code.
This version scheme must comply with the EAN allocation and assignment rules.
For example, this requires the manufacturer to obtain a manufacture code from GS1.</t>
          <table align="center">
            <thead>
              <tr>
                <th align="left">Index</th>
                <th align="left">Version Scheme Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">5</td>
                <td align="left">ean-13</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations" numbered="true" toc="default">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations" numbered="true" toc="default">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Any set of relying parties
that receives tokens that happen to be from a single device will be
able to know the tokens are all from the same device and be able to
track the device. Thus, in many usage situations UEID violates
governmental privacy regulation. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The device obtains explicit permission from the user of the device
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one relying party.</li>
          <li>The device authenticates the relying party and generates a derived
UEID/SUEID just for that particular relying party.  For example, the relying
party could prove their identity cryptographically to the device, then
the device generates a UEID just for that relying party by hashing a
proofed relying party ID with the main device UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per device. Each UEID/SUEID is used in a
different context, use case or system on the device. However, from the
view of the relying party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations" numbered="true" toc="default">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the device generating the attestation.
For example, many mobile phones prompt the user for permission when before sending location data.</t>
      </section>
    </section>
    <section anchor="securitycons" numbered="true" toc="default">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392" format="default"/> and Section 11
of <xref target="RFC7519" format="default"/> apply to EAT in its CWT and JWT form, respectively.  In addition, 
implementors should consider the following.</t>
      <section anchor="key-provisioning" numbered="true" toc="default">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manfuacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949" format="default"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material" numbered="true" toc="default">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="transport-security" numbered="true" toc="default">
        <name>Transport Security</name>
        <t>As stated in Section 8 of <xref target="RFC8392" format="default"/>, "The security of the CWT relies
upon on the protections offered by COSE".  Similar considerations
apply to EAT when sent as a CWT.  However, EAT introduces the concept
of a nonce to protect against replay.  Since an EAT may be created by
an entity that may not support the same type of transport security as
the consumer of the EAT, intermediaries may be required to bridge
communications between the entity and consumer.  As a result, it is
RECOMMENDED that both the consumer create a nonce, and the entity
leverage the nonce along with COSE mechanisms for encryption and/or
signing to create the EAT.</t>
        <t>Similar considerations apply to the use of EAT as a JWT.  Although the
security of a JWT leverages the JSON Web Encryption (JWE) and JSON Web
Signature (JWS) specifications, it is still recommended to make use of
the EAT nonce.</t>
      </section>
      <section anchor="multiple-eat-consumers" numbered="true" toc="default">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer should leverage a secure protocol (e.g.one that
uses transport-layer security, i.e. TLS),</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then transport security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner">
              <organization/>
            </author>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC7515" target="https://www.rfc-editor.org/info/rfc7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC8949" target="https://www.rfc-editor.org/info/rfc8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman">
              <organization/>
            </author>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7517" target="https://www.rfc-editor.org/info/rfc7517">
          <front>
            <title>JSON Web Key (JWK)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key.  This specification also defines a JWK Set JSON data structure that represents a set of JWKs.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries established by that specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7517"/>
          <seriesInfo name="DOI" value="10.17487/RFC7517"/>
        </reference>
        <reference anchor="RFC7519" target="https://www.rfc-editor.org/info/rfc7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC7800" target="https://www.rfc-editor.org/info/rfc7800">
          <front>
            <title>Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="April" year="2016"/>
            <abstract>
              <t>This specification describes how to declare in a JSON Web Token (JWT) that the presenter of the JWT possesses a particular proof-of- possession key and how the recipient can cryptographically confirm proof of possession of the key by the presenter.  Being able to prove possession of a key is also sometimes described as the presenter being a holder-of-key.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7800"/>
          <seriesInfo name="DOI" value="10.17487/RFC7800"/>
        </reference>
        <reference anchor="RFC8126" target="https://www.rfc-editor.org/info/rfc8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <author fullname="T. Narten" initials="T." surname="Narten">
              <organization/>
            </author>
            <date month="June" year="2017"/>
            <abstract>
              <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="RFC8152" target="https://www.rfc-editor.org/info/rfc8152">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad">
              <organization/>
            </author>
            <date month="July" year="2017"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8152"/>
          <seriesInfo name="DOI" value="10.17487/RFC8152"/>
        </reference>
        <reference anchor="RFC8392" target="https://www.rfc-editor.org/info/rfc8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610" target="https://www.rfc-editor.org/info/rfc8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz">
              <organization/>
            </author>
            <author fullname="C. Vigano" initials="C." surname="Vigano">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8747" target="https://www.rfc-editor.org/info/rfc8747">
          <front>
            <title>Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="L. Seitz" initials="L." surname="Seitz">
              <organization/>
            </author>
            <author fullname="G. Selander" initials="G." surname="Selander">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="March" year="2020"/>
            <abstract>
              <t>This specification describes how to declare in a CBOR Web Token (CWT) (which is defined by RFC 8392) that the presenter of the CWT possesses a particular proof-of-possession key. Being able to prove possession of a key is also sometimes described as being the holder-of-key. This specification provides equivalent functionality to "Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)" (RFC 7800) but using Concise Binary Object Representation (CBOR) and CWTs rather than JavaScript Object Notation (JSON) and JSON Web Tokens (JWTs).</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8747"/>
          <seriesInfo name="DOI" value="10.17487/RFC8747"/>
        </reference>
        <reference anchor="RFC3986" target="https://www.rfc-editor.org/info/rfc3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee">
              <organization/>
            </author>
            <author fullname="R. Fielding" initials="R." surname="Fielding">
              <organization/>
            </author>
            <author fullname="L. Masinter" initials="L." surname="Masinter">
              <organization/>
            </author>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RATS.Architecture" target="https://tools.ietf.org/html/draft-ietf-rats-architecture-08">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz">
              <organization/>
            </author>
            <date year="2020"/>
          </front>
        </reference>
        <reference anchor="COSE.X509.Draft" target="https://tools.ietf.org/html/draft-ietf-cose-x509-08">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header parameters for carrying and referencing X.509 certificates</title>
            <author fullname="J. Schaad">
              <organization/>
            </author>
            <date year="2020"/>
          </front>
        </reference>
        <reference anchor="CBOR.Cert.Draft" target="https://tools.ietf.org/html/draft-mattsson-cose-cbor-cert-compress-05">
          <front>
            <title>CBOR Encoding of X.509 Certificates (CBOR Certificates)</title>
            <author fullname="S. Raza">
              <organization/>
            </author>
            <date year="2020"/>
          </front>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="UCCS.Draft" target="https://tools.ietf.org/html/draft-birkholz-rats-uccs-01">
          <front>
            <title>A CBOR Tag for Unprotected CWT Claims Sets</title>
            <author fullname="Henk Birkholz">
              <organization/>
            </author>
            <date year="2020"/>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="FIDO.AROE" target="https://fidoalliance.org/specs/fido-uaf-v1.0-fd-20191115/fido-allowed-AROE-v1.0-fd-20191115.html">
          <front>
            <title>FIDO Authenticator Allowed Restricted Operating Environments List</title>
            <author>
              <organization>The FIDO Alliance</organization>
            </author>
            <date year="2019" month="November"/>
          </front>
        </reference>
        <reference anchor="EAN-13" target="https://www.gs1.org/standards/barcodes/ean-upc">
          <front>
            <title>International Article Number - EAN/UPC barcodes</title>
            <author>
              <organization>GS1</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID" target="https://tools.ietf.org/html/draft-ietf-sacm-coswid-16">
          <front>
            <title>Concise Software Identification Tags</title>
            <author>
              <organization/>
            </author>
            <date year="2020" month="November"/>
          </front>
        </reference>
        <reference anchor="OpenIDConnectCore" target="https://openid.net/specs/openid-connect-core-1_0.html">
          <front>
            <title>OpenID Connect Core 1.0 incorporating errata set 1</title>
            <author fullname="N. Sakimura">
              <organization/>
            </author>
            <author fullname="J. Bradley">
              <organization/>
            </author>
            <author fullname="M. Jones">
              <organization/>
            </author>
            <author fullname="B. de Medeiros">
              <organization/>
            </author>
            <author fullname="C. Mortimore">
              <organization/>
            </author>
            <date year="2014" month="November"/>
          </front>
        </reference>
        <reference anchor="CBOR-OID" target="https://www.ietf.org/archive/id/draft-ietf-cbor-tags-oid-08.txt">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="Carsten Bormann">
              <organization>Universität Bremen TZI</organization>
            </author>
            <date day="21" month="May" year="2021"/>
            <abstract>
              <t>   The Concise Binary Object Representation (CBOR, RFC 8949) is a data
   format whose design goals include the possibility of extremely small
   code size, fairly small message size, and extensibility without the
   need for version negotiation.

   The present document defines CBOR tags for object identifiers (OIDs).
   It is intended as the reference document for the IANA registration of
   the CBOR tags so defined.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cbor-tags-oid-08"/>
        </reference>
        <reference anchor="RATS-Architecture" target="https://www.ietf.org/archive/id/draft-ietf-rats-architecture-12.txt">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="23" month="April" year="2021"/>
            <abstract>
              <t>   In network protocol exchanges it is often useful for one end of a
   communication to know whether the other end is in an intended
   operating state.  This document provides an architectural overview of
   the entities involved that make such tests possible through the
   process of generating, conveying, and evaluating evidentiary claims.
   An attempt is made to provide for a model that is neutral toward
   processor architectures, the content of claims, and protocols.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-12"/>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122" target="https://www.rfc-editor.org/info/rfc4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach">
              <organization/>
            </author>
            <author fullname="M. Mealling" initials="M." surname="Mealling">
              <organization/>
            </author>
            <author fullname="R. Salz" initials="R." surname="Salz">
              <organization/>
            </author>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4949" target="https://www.rfc-editor.org/info/rfc4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey">
              <organization/>
            </author>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120" target="https://www.rfc-editor.org/info/rfc7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC                        Required", "IETF Review", or "Standards Action" policies apply.  This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation.  The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">
          <front>
            <title>IEEE Standard, "IEEE 802.1AR Secure Device Identifier"</title>
            <author>
              <organization/>
            </author>
            <date year="2009" month="December"/>
          </front>
        </reference>
        <reference anchor="ECMAScript" target="http://www.ecma-international.org/ecma-262/5.1/ECMA-262.pdf">
          <front>
            <title>Ecma International, "ECMAScript Language Specification, 5.1 Edition", ECMA Standard 262</title>
            <author>
              <organization/>
            </author>
            <date year="2011" month="June"/>
          </front>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/geolocation-API/#coordinates_interface">
          <front>
            <title>Geolocation API Specification 2nd Edition</title>
            <author>
              <organization>Worldwide Web Consortium</organization>
            </author>
            <date year="2018" month="January"/>
          </front>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://webstore.ansi.org/standards/ieee/ieee8022001r2007">
          <front>
            <title>IEEE Standard For Local And Metropolitan Area Networks Overview And Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2007"/>
          </front>
        </reference>
        <reference anchor="FIDO.Registry" target="https://fidoalliance.org/specs/common-specs/fido-registry-v2.1-ps-20191217.html">
          <front>
            <title>FIDO Registry of Predefined Values</title>
            <author>
              <organization>The FIDO Alliance</organization>
            </author>
            <date year="2019" month="December"/>
          </front>
        </reference>
        <reference anchor="FIPS-140" target="https://csrc.nist.gov/publications/detail/fips/140/2/final">
          <front>
            <title>Security Requirements for Cryptographic Modules</title>
            <author>
              <organization>National Institue of Standards</organization>
            </author>
            <date year="2001" month="May"/>
          </front>
        </reference>
        <reference anchor="Common.Criteria" target="https://www.commoncriteriaportal.org/cc/">
          <front>
            <title>Common Criteria for Information Technology Security Evaluation</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="April"/>
          </front>
        </reference>
      </references>
    </references>
    <section anchor="examples" numbered="true" toc="default">
      <name>Examples</name>
      <section anchor="very-simple-eat" numbered="true" toc="default">
        <name>Very Simple EAT</name>
        <t>This is shown in CBOR diagnostic form. Only the payload signed by COSE
is shown.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
{
    / issuer /           1: "joe",
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /            11: h'0198f50a4ff6c05861c8860d13a638ea',
    / secure-boot /     15: true,
    / debug-disable /   16: 3, / permanent-disable /
    / timestamp (iat) /  6: 1(1526542894)
}
]]></artwork>
      </section>
      <section anchor="example-with-submodules-nesting-and-security-levels" numbered="true" toc="default">
        <name>Example with Submodules, Nesting and Security Levels</name>
        <artwork name="" type="" align="left" alt=""><![CDATA[
{
    / nonce /                 10: h'948f8860d13a463e8e',
    / UEID /                  11: h'0198f50a4ff6c05861c8860d13a638ea',
    / secure-boot /           15: true,
    / debug-disable /         16: 3, / permanent-disable  /
    / timestamp (iat) /        6: 1(1526542894),
    / security-level /        14: 3, / secure restricted OS /
    / submods / 20: {
        / first submod, an Android Application /
        "Android App Foo" :  {
            / security-level /  14: 1 / unrestricted /
        },

        / 2nd submod, A nested EAT from a secure element /
        "Secure Element Eat" :
            / an embedded EAT, bytes of which are not shown /
            h'420123',

        / 3rd submod, information about Linux Android /
        "Linux Android": {
            / security-level /  14: 1 / unrestricted /
        }
    }
}
]]></artwork>
      </section>
    </section>
    <section anchor="ueid-design-rationale" numbered="true" toc="default">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability" numbered="true" toc="default">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion datadbase is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table align="center">
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and SW so this
simple approximation is used. See <xref target="BirthdayAttack" format="default"/>.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
    p = k^2 / 2n 
]]></artwork>
        <t>For this calculation:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
    p  Collision Probability
    n  Total population based on number of bits in UEID
    k  Population in a database
]]></artwork>
        <table align="center">
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's 
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of 
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
  t = 1 / ((k / 10) * p)
  
  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table align="center">
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid" numbered="true" toc="default">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122" format="default"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this 
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality 
random numbers, but do so by mapping into the overall UUID 
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>UUIDs seem to have been designed for scenarios where the implementor
does not have full control over the environment and uniqueness has to
be constructed from identifiers at hand. UEID takes the view that
hardware, software and/or manufacturing process directly implement
UEID in a simple and direct way. It takes the view that cryptographic
quality random number generators are readily available as they are
implemented in commonly used CPU hardware.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid" numbered="true" toc="default">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR" format="default"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR" format="default"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs are used with an open set of network protocols for authentication and such.
In these protocols the DevID secret is used to sign a nonce or similar to proof the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT defines network protocol for proving trustworthiness to a relying party, the very thing that is not defined in <xref target="IEEE.802.1AR" format="default"/>.
Nor does not give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat" numbered="true" toc="default">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT defines a network protocol and <xref target="IEEE.802.1AR" format="default"/> doesn't.
Vice versa, EAT doesn't define a an device implementation and DevID does.</t>
        <t>Hence, EAT can be the network protocol that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the Endorsement sent to the Verifier.</t>
        <t>In this case the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity" numbered="true" toc="default">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat" numbered="true" toc="default">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence" numbered="true" toc="default">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR" format="default"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR" format="default"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts" numbered="true" toc="default">
      <name>Changes from Previous Drafts</name>
      <t>The following is a list of known changes from the previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences.</t>
      <section anchor="from-draft-rats-eat-01" numbered="true" toc="default">
        <name>From draft-rats-eat-01</name>
        <ul spacing="normal">
          <li>Added UEID design rationale appendix</li>
        </ul>
      </section>
      <section anchor="from-draft-mandyam-rats-eat-00" numbered="true" toc="default">
        <name>From draft-mandyam-rats-eat-00</name>
        <t>This is a fairly large change in the orientation of the document, but
no new claims have been added.</t>
        <ul spacing="normal">
          <li>Separate information and data model using CDDL.</li>
          <li>Say an EAT is a CWT or JWT</li>
          <li>Use a map to structure the boot_state and location claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-01" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-01</name>
        <ul spacing="normal">
          <li>Clarifications and corrections for OEMID claim</li>
          <li>Minor spelling and other fixes</li>
          <li>Add the nonce claim, clarify jti claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-02" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-02</name>
        <ul spacing="normal">
          <li>Roll all EUIs back into one UEID type</li>
          <li>UEIDs can be one of three lengths, 128, 192 and 256.</li>
          <li>Added appendix justifying UEID design and size.</li>
          <li>Submods part now includes nested eat tokens so they can be named and
there can be more tha one of them</li>
          <li>Lots of fixes to the CDDL</li>
          <li>Added security considerations</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-03" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-03</name>
        <ul spacing="normal">
          <li>Split boot_state into secure-boot and debug-disable claims</li>
          <li>Debug disable is an enumerated type rather than Booleans</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-04" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-04</name>
        <ul spacing="normal">
          <li>Change IMEI-based UEIDs to be encoded as a 14-byte string</li>
          <li>CDDL cleaned up some more</li>
          <li>CDDL allows for JWTs and UCCSs</li>
          <li>CWT format submodules are byte string wrapped</li>
          <li>Allows for JWT nested in CWT and vice versa</li>
          <li>Allows UCCS (unsigned CWTs) and JWT unsecured tokens</li>
          <li>Clarify tag usage when nesting tokens</li>
          <li>Add section on key inclusion</li>
          <li>Add hardware version claims</li>
          <li>Collected CDDL is now filled in. Other CDDL corrections.</li>
          <li>Rename debug-disable to debug-status; clarify that it is not extensible</li>
          <li>Security level claim is not extensible</li>
          <li>Improve specification of location claim and added a location privacy section</li>
          <li>Add intended use claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-05" numbered="true" toc="default">
        <name>From draft-ietf-rats-05</name>
        <ul spacing="normal">
          <li>CDDL format issues resolved</li>
          <li>Corrected reference to Location Privacy section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-06" numbered="true" toc="default">
        <name>From draft-ietf-rats-06</name>
        <ul spacing="normal">
          <li>Added boot-seed claim</li>
          <li>Rework CBOR interoperability section</li>
          <li>Added profiles claim and section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-07" numbered="true" toc="default">
        <name>From draft-ietf-rats-07</name>
        <ul spacing="normal">
          <li>Filled in IANA and other sections for possible preassignment of claim keys for well understood claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-08" numbered="true" toc="default">
        <name>From draft-ietf-rats-08</name>
        <ul spacing="normal">
          <li>Change profile claim to be either a URL or an OID rather than a test string</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-09" numbered="true" toc="default">
        <name>From draft-ietf-rats-09</name>
        <ul spacing="normal">
          <li>Add SUEIDs</li>
          <li>Add appendix comparing IDevID to EAT</li>
          <li>Added section on use for Evidence and Attestation Results</li>
          <li>Fill in the key ID and endorsements identificaiton section</li>
          <li>Remove origination claim as it is replaced by key IDs and endorsements</li>
          <li>Added manifests and software evidence claims</li>
          <li>Add string labels non-claim labels for use with JSON (e.g. labels for members of location claim)</li>
          <li>EAN-13 HW versions are no longer a separate claim. Now they are folded in as a CoSWID version scheme.</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-10" numbered="true" toc="default">
        <name>From draft-ietf-rats-10</name>
        <ul spacing="normal">
          <li>Hardware version is made into an array of two rather than two claims</li>
          <li>Add swresults claim</li>
        </ul>
      </section>
    </section>
  </back>
  <!-- ##markdown-source:
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
0FI+9AXz4fOIYl6/W3dz+F8aiAikAb0BAA==

-->

</rfc>
