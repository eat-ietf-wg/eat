<?xml version='1.0' encoding='utf-8'?>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.4.13 -->
<!DOCTYPE rfc SYSTEM "rfc2629-xhtml.ent">
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" obsoletes="" updates="" submissionType="IETF" xml:lang="en" tocInclude="true" tocDepth="4" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.8.0 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@island-resort.com</email>
      </address>
    </author>
    <author initials="M." surname="Ballesteros" fullname="Miguel Ballesteros">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 4299</phone>
        <email>mballest@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <date year="2021" month="June" day="07"/>
    <area>Internet</area>
    <workgroup>RATS Working Group</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides a signed (attested) set of
claims that describe state and characteristics of an entity, typically
a device like a phone or an IoT device.  These claims are used by a
relying party to determine how much it wishes to trust the entity.</t>
      <t>An EAT is either a CWT or JWT with some attestation-oriented 
claims. To a large degree, all this document does is extend
CWT and JWT.</t>
    </abstract>
    <note>
      <name>Contributing</name>
      <t>TBD</t>
    </note>
  </front>
  <middle>
    <section anchor="introduction" numbered="true" toc="default">
      <name>Introduction</name>
      <t>Remote device attestation is a fundamental service that allows a remote
device such as a mobile phone, an Internet-of-Things (IoT) device, or
other endpoint to prove itself to a relying party, a server or a
service.  This allows the relying party to know some characteristics
about the device and decide whether it trusts the device.</t>
      <t>Remote attestation is a fundamental service that can underlie other
protocols and services that need to know about the trustworthiness of
the device before proceeding. One good example is biometric
authentication where the biometric matching is done on the device. The
relying party needs to know that the device is one that is known to do
biometric matching correctly.  Another example is content protection
where the relying party wants to know the device will protect the
data.  This generalizes on to corporate enterprises that might want to
know that a device is trustworthy before allowing corporate data to be
accessed by it.</t>
      <t>The notion of attestation here is large and may include, but is not
limited to the following:</t>
      <ul spacing="normal">
        <li>Proof of the make and model of the device hardware (HW)</li>
        <li>Proof of the make and model of the device processor, particularly
for security-oriented chips</li>
        <li>Measurement of the software (SW) running on the device</li>
        <li>Configuration and state of the device</li>
        <li>Environmental characteristics of the device such as its GPS location</li>
      </ul>
      <section anchor="cwt-jwt-and-uccs" numbered="true" toc="default">
        <name>CWT, JWT and UCCS</name>
        <t>For flexibility and ease of imlpementation in a wide variety of environments, EATs can be either CBOR <xref target="RFC8949" format="default"/> or JSON <xref target="ECMAScript" format="default"/> format.
This specification simultaneously describes both formats.</t>
        <t>An EAT is either a CWT as defined in <xref target="RFC8392" format="default"/>, a UCCS as defined in <xref target="UCCS.Draft" format="default"/>, or a JWT as defined in <xref target="RFC7519" format="default"/>.
This specification extends those specifications with additional claims for attestation.</t>
        <t>The identification of a protocol element as an EAT, whether CBOR or JSON format, follows the general conventions used by CWT, JWT and UCCS.
Largely this depends on the protocol carrying the EAT.
In some cases it may be by content type (e.g., MIME type).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
      </section>
      <section anchor="cddl" numbered="true" toc="default">
        <name>CDDL</name>
        <t>This specification uses CDDL, <xref target="RFC8610" format="default"/>, as the primary formalism to
define each claim.  The implementor then interprets the CDDL to come
to either the CBOR <xref target="RFC8949" format="default"/> or JSON <xref target="ECMAScript" format="default"/>
representation. In the case of JSON, Appendix E of <xref target="RFC8610" format="default"/> is
followed. Additional rules are given in <xref target="jsoninterop" format="default"/> of this
document where Appendix E is insufficient.  (Note that this is not to
define a general means to translate between CBOR and JSON, but only to
define enough such that the claims defined in this document can be
rendered unambiguously in JSON).</t>
        <t>The CWT specification was authored before CDDL was available and did not use it.
This specification includes a CDDL definition of most of what is described in <xref target="RFC8392" format="default"/>.</t>
      </section>
      <section anchor="entity-overview" numbered="true" toc="default">
        <name>Entity Overview</name>
        <t>An "entity" can be any device or device subassembly ("submodule") that
can generate its own attestation in the form of an EAT.  The
attestation should be cryptographically verifiable by the EAT
consumer. An EAT at the device-level can be composed of several
submodule EAT's.</t>
        <t>Modern devices such as a mobile phone have many different execution
environments operating with different security levels. For example, it
is common for a mobile phone to have an "apps" environment that runs
an operating system (OS) that hosts a plethora of downloadable
apps. It may also have a TEE (Trusted Execution Environment) that is
distinct, isolated, and hosts security-oriented functionality like
biometric authentication. Additionally, it may have an eSE (embedded
Secure Element) - a high security chip with defenses against HW
attacks that is used to produce attestations.  This device attestation format
allows the attested data to be tagged at a security level from which
it originates.  In general, any discrete execution environment that
has an identifiable security level can be considered an entity.</t>
      </section>
      <section anchor="use-as-evidence-and-attestation-results" numbered="true" toc="default">
        <name>Use as Evidence and Attestation Results</name>
        <t>Here, normative reference is made to <xref target="RATS-Architecture" format="default"/>, particularly the definition of Evidence, the Verifier, Attestation Results and the Relying Party.
Per Figure 1 in <xref target="RATS-Architecture" format="default"/>, Evidence is a protocol message that goes from the Attester to the Verifier and Attestation Results a message that goes from the Verifier to the Relying Party.
EAT is defined such that it can be used to represent either Evidence, Attestation Results or both.
No claims defined here are considered exclusive to or are prohibited in either use.
It is useful to create EAT profiles as described in <xref target="profiles" format="default"/> for either use.</t>
        <t>It is useful to characterize the relationship of claims in Evidence to those in Attestation Results.</t>
        <t>Many claims in Evidence simply will pass through the Verifier to the Relying Party without modification.
They will be verified as authentic from the device by the Verifier just through normal verification of the Attester's signature.
They will be protected from modification when they are conveyed to the Relying Party by whatever means is used to protect Attestation Results. 
(The details of that protection are out of scope of this document.)</t>
        <t>Some claims in Evidence will be verified by the Verifier by comparison to Reference Values.
In this case the claims in Evidence will not likely be conveyed to the Relying Party.
Instead, some claim indicating they were checked may be added to the Attestation Results or it may be tacitly known that the Verifier always does this check.</t>
        <t>In some cases the Verifier may provide privacy-preserving functionality by stripping or modifying claims that do not posses sufficient privacy-preserving characteristics.</t>
      </section>
      <section anchor="eat-operating-models" numbered="true" toc="default">
        <name>EAT Operating Models</name>
        <t>TODO: Rewrite (or eliminate) this section in light of the RATS architecture draft.</t>
        <t>At least the following three participants exist in all EAT operating
models. Some operating models have additional participants.</t>
        <dl>
          <dt>
The Entity.  </dt>
          <dd>
            <t>This is the phone, the IoT device, the sensor, the sub-assembly or
such that the attestation provides information about.</t>
          </dd>
          <dt>
The Manufacturer.  </dt>
          <dd>
            <t>The company that made the entity.  This may be a chip vendor, a
circuit board module vendor or a vendor of finished consumer products.</t>
          </dd>
          <dt>
The Relying Party.  </dt>
          <dd>
            <t>The server, service or company that makes use of the information in
the EAT about the entity.</t>
          </dd>
        </dl>
        <t>In all operating models, the manufacturer provisions some secret
attestation key material (AKM) into the entity during manufacturing.
This might be during the manufacturer of a chip at a fabrication
facility (fab) or during final assembly of a consumer product or any
time in between. This attestation key material is used for signing
EATs.</t>
        <t>In all operating models, hardware and/or software on the entity create
an EAT of the format described in this document. The EAT is always
signed by the attestation key material provisioned by the
manufacturer.</t>
        <t>In all operating models, the relying party must end up knowing that
the signature on the EAT is valid and consistent with data from claims
in the EAT.  This can happen in many different ways. Here are some
examples.</t>
        <ul spacing="normal">
          <li>The EAT is transmitted to the relying party. The relying party gets
corresponding key material (e.g. a root certificate) from the
manufacturer. The relying party performs the verification.</li>
          <li>The EAT is transmitted to the relying party. The relying party
transmits the EAT to a verification service offered by the
manufacturer. The server returns the validated claims.</li>
          <li>The EAT is transmitted directly to a verification service, perhaps
operated by the manufacturer or perhaps by another party. It
verifies the EAT and makes the validated claims available to the
relying party. It may even modify the claims in some way and re-sign
the EAT (with a different signing key).</li>
        </ul>
        <t>All these operating models are supported and there is no preference
of one over the other. It is important to support this variety of
operating models to generally facilitate deployment and to allow for
some special scenarios. One special scenario has a validation service
that is monetized, most likely by the manufacturer.  In another, a
privacy proxy service processes the EAT before it is transmitted to
the relying party. In yet another, symmetric key material is used for
signing. In this case the manufacturer should perform the
verification, because any release of the key material would enable a
participant other than the entity to create valid signed EATs.</t>
      </section>
      <section anchor="what-is-not-standardized" numbered="true" toc="default">
        <name>What is Not Standardized</name>
        <t>The following is not standardized for EAT, just the same they are not
standardized for CWT or JWT.</t>
        <section anchor="transmission-protocol" numbered="true" toc="default">
          <name>Transmission Protocol</name>
          <t>EATs may be transmitted by any protocol the same as CWTs and JWTs. For
example, they might be added in extension fields of other protocols,
bundled into an HTTP header, or just transmitted as files. This
flexibility is intentional to allow broader adoption. This flexibility
is possible because EAT's are self-secured with signing (and possibly
additionally with encryption and anti-replay). The transmission
protocol is not required to fulfill any additional security
requirements.</t>
          <t>For certain devices, a direct connection may not exist between the
EAT-producing device and the Relying Party. In such cases, the EAT
should be protected against malicious access. The use of COSE and JOSE
allows for signing and encryption of the EAT. Therefore, even if the
EAT is conveyed through intermediaries between the device and Relying
Party, such intermediaries cannot easily modify the EAT payload or
alter the signature.</t>
        </section>
        <section anchor="signing-scheme" numbered="true" toc="default">
          <name>Signing Scheme</name>
          <t>The term "signing scheme" is used to refer to the system that includes
end-end process of establishing signing attestation key material in
the entity, signing the EAT, and verifying it. This might involve key
IDs and X.509 certificate chains or something similar but
different. The term "signing algorithm" refers just to the algorithm
ID in the COSE signing structure. No particular signing algorithm or
signing scheme is required by this standard.</t>
          <t>There are three main implementation issues driving this. First, secure
non-volatile storage space in the entity for the attestation key
material may be highly limited, perhaps to only a few hundred bits, on
some small IoT chips. Second, the factory cost of provisioning key
material in each chip or device may be high, with even millisecond
delays adding to the cost of a chip. Third, privacy-preserving signing
schemes like ECDAA (Elliptic Curve Direct Anonymous Attestation) are
complex and not suitable for all use cases.</t>
          <t>Over time to faciliate interoperability, some signing schemes may be
defined in EAT profiles or other documents either in the IETF or outside.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology" numbered="true" toc="default">
      <name>Terminology</name>
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in
BCP 14 <xref target="RFC2119" format="default"/> <xref target="RFC8174" format="default"/> when, and only when, they appear in all
capitals, as shown here.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519" format="default"/>, COSE
<xref target="RFC8152" format="default"/>, and CWT <xref target="RFC8392" format="default"/>.</t>
      <dl>
        <dt>
Claim Name.  </dt>
        <dd>
          <t>The human-readable name used to identify a claim.</t>
        </dd>
        <dt>
Claim Key.  </dt>
        <dd>
          <t>The CBOR map key or JSON name used to identify a claim.</t>
        </dd>
        <dt>
Claim Value.  </dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>
CWT Claims Set.  </dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
        <dt>
Attestation Key Material (AKM).  </dt>
        <dd>
          <t>The key material used to sign the EAT token. If it is done
symmetrically with HMAC, then this is a simple symmetric key.
If it is done with ECC, such as an IEEE DevID <xref target="IEEE.802.1AR" format="default"/>, then this
is the private part of the EC key pair. If ECDAA 
is used, (e.g., as used by Enhanced Privacy ID, i.e. EPID) then it is the key material 
needed for ECDAA.</t>
        </dd>
      </dl>
    </section>
    <section anchor="the-claims" numbered="true" toc="default">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation. It also
mentions several claims defined by CWT and JWT that are particularly
important for EAT.</t>
      <t>Note also:
* Any claim defined for CWT or JWT may be used in an EAT including 
  those in the CWT <xref target="IANA.CWT.Claims" format="default"/> and JWT IANA <xref target="IANA.JWT.Claims" format="default"/>
  claims registries.</t>
      <ul spacing="normal">
        <li>All claims are optional</li>
        <li>No claims are mandatory</li>
        <li>All claims that are not understood by implementations MUST be ignored</li>
      </ul>
      <t>There are no default values or meanings assigned to absent claims
other than they are not reported. The reason for a claim's absence may
be the implementation not supporting the claim, an inability to
determine its value, or a preference to report in a different way such
as a proprietary claim.</t>
      <t>CDDL along with text descriptions is used to define each claim
indepdent of encoding.  Each claim is defined as a CDDL group (the
group is a general aggregation and type definition feature of
CDDL). In the encoding section <xref target="encoding" format="default"/>, the CDDL groups turn into
CBOR map entries and JSON name/value pairs.</t>
      <t>Map labels are assigned both an integer and string value.
CBOR encoded tokens MUST use only integer labels.
JSON encoded tokens MUST use only string labels.</t>
      <t>TODO: add paragraph here about use for Attestation Evidence and for Results.</t>
      <section anchor="token-id-claim-cti-and-jti" numbered="true" toc="default">
        <name>Token ID Claim (cti and jti)</name>
        <t>CWT defines the "cti" claim. JWT defines the "jti" claim. These are
equivalent to each other in EAT and carry a unique token identifier as
they do in JWT and CWT.  They may be used to defend against re use of
the token but are distinct from the nonce that is used by the relying
party to guarantee freshness and defend against replay.</t>
      </section>
      <section anchor="timestamp-claim-iat" numbered="true" toc="default">
        <name>Timestamp claim (iat)</name>
        <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
        <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even 
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
        <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. No token may contain an iat claim in
float-point format. Any recipient of a token with a floating-point
format iat claim may consider it an error.  A 64-bit integer 
representation of epoch time can represent a range of +/- 500 billion
years, so the only point of a floating-point timestamp is to 
have precession greater than one second. This is not needed for EAT.</t>
      </section>
      <section anchor="nonce-claim-nonce" numbered="true" toc="default">
        <name>Nonce Claim (nonce)</name>
        <t>All EATs should have a nonce to prevent replay attacks. The nonce is
generated by the relying party, the end consumer of the token. It is
conveyed to the entity over whatever transport is in use before the
token is generated and then included in the token as the nonce claim.</t>
        <t>This documents the nonce claim for registration in the IANA CWT 
claims registry. This is equivalent to the JWT nonce claim that is
already registered.</t>
        <t>The nonce must be at least 8 bytes (64 bits) as fewer are unlikely
to be secure. A maximum of 64 bytes is set to limit the memory
a constrained implementation uses. This size range is not set
for the already-registered JWT nonce, but it should follow
this size recommendation when used in an EAT.</t>
        <t>Multiple nonces are allowed to accommodate multistage verification
and consumption.</t>
        <section anchor="nonce-cddl" numbered="true" toc="default">
          <name>nonce CDDL</name>
          <sourcecode type="CDDL">
nonce-type = bstr .size (8..64)

nonce-claim = (
    nonce =&gt; nonce-type / [ 2* nonce-type ]
)
</sourcecode>
        </section>
      </section>
      <section anchor="universal-entity-id-claim-ueid" numbered="true" toc="default">
        <name>Universal Entity ID Claim (ueid)</name>
        <t>UEID's identify individual manufactured entities / devices such as a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire device or a submodule or
subsystem. It does not identify types, models or classes of
devices. It is akin to a serial number, though it does not have to be
sequential.</t>
        <t>UEID's must be universally and globally unique across manufacturers
and countries. UEIDs must also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then relying parties receiving them will have
to track other characteristics of the device to keep devices distinct
between manufacturers).</t>
        <t>There are privacy considerations for UEID's. See <xref target="ueidprivacyconsiderations" format="default"/>.</t>
        <t>The UEID is permanent. It never change for a given
device / entity.</t>
        <t>UEIDs are variable length. All implementations MUST be able to receive
UEIDs that are 33 bytes long (1 type byte and 256 bits).  The
recommended maximum sent is also 33 bytes.</t>
        <t>When the entity constructs the UEID, the first byte is a type and the
following bytes the ID for that type. Several types are allowed to
accommodate different industries and different manufacturing processes
and to give options to avoid paying fees for certain types of
manufacturer registrations.</t>
        <t>Creation of new types requires a Standards Action <xref target="RFC8126" format="default"/>.</t>
        <table anchor="ueid-types-table" align="center">
          <name>UEID Composition Types</name>
          <thead>
            <tr>
              <th align="left">Type Byte</th>
              <th align="left">Type Name</th>
              <th align="left">Specification</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">0x01</td>
              <td align="left">RAND</td>
              <td align="left">This is a 128, 192 or 256 bit random number generated once and stored in the device. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the device and stored. It may not be smaller than 128 bits.</td>
            </tr>
            <tr>
              <td align="left">0x02</td>
              <td align="left">IEEE EUI</td>
              <td align="left">This makes use of the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-device identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while devices with multiple network interfaces may have multiple MAC addresses, there is only one UEID for a device) <xref target="IEEE.802-2001" format="default"/>, <xref target="OUI.Guide" format="default"/></td>
            </tr>
            <tr>
              <td align="left">0x03</td>
              <td align="left">IMEI</td>
              <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which SHALL be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded SHALL NOT include Luhn checksum or SVN information. <xref target="ThreeGPP.IMEI" format="default"/></td>
            </tr>
          </tbody>
        </table>
        <t>UEID's are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
        <t>The consumer (the relying party) of a UEID MUST treat a UEID as a
completely opaque string of bytes and not make any use of its internal
structure. For example, they should not use the OUI part of a type
0x02 UEID to identify the manufacturer of the device. Instead they
should use the oemid claim that is defined elsewhere. The reasons for
this are:</t>
        <ul spacing="normal">
          <li>UEIDs types may vary freely from one manufacturer to the next.</li>
          <li>New types of UEIDs may be created. For example, a type 0x07 UEID may
be created based on some other manufacturer registration scheme.</li>
          <li>Device manufacturers are allowed to change from one type of UEID to
another anytime they want. For example, they may find they can
optimize their manufacturing by switching from type 0x01 to type
0x02 or vice versa.  The main requirement on the manufacturer is
that UEIDs be universally unique.</li>
        </ul>
        <section anchor="ueid-cddl" numbered="true" toc="default">
          <name>ueid CDDL</name>
          <sourcecode type="CDDL">
ueid-type = bstr .size (7..33)

ueid-claim = (
     ueid =&gt; ueid-type
)
</sourcecode>
        </section>
      </section>
      <section anchor="semi-permanent-ueids-sueids" numbered="true" toc="default">
        <name>Semi-permanent UEIDs (SUEIDs)</name>
        <t>An SEUID is of the same format as a UEID, but it may change to a different value on device life-cycle events.
Examples of these events are change of ownership, factory reset and on-boarding into an IoT device management system.
A device may have both a UEID and SUEIDs, neither, one or the other.</t>
        <t>There may be multiple SUEIDs.
Each one has a text string label the purpose of which is to distinguish it from others in the token.
The label may name the purpose, application or type of the SUEID.
Typically, there will be few SUEDs so there is no need for a formal labeling mechanism like a registry.
The EAT profile may describe how SUEIDs should be labeled.
If there is only one SUEID, the claim remains a map and there still must be a label.
For example, the label for the SUEID used by FIDO Onboarding Protocol could simply be "FDO".</t>
        <t>There are privacy considerations for SUEID's. See <xref target="ueidprivacyconsiderations" format="default"/>.</t>
        <sourcecode type="CDDL">
sueids-type = {
    + tstr =&gt; ueid-type
}

sueids-claim = (
     sueids =&gt; sueids-type
)
</sourcecode>
      </section>
      <section anchor="oemid" numbered="true" toc="default">
        <name>OEM Identification by IEEE (oemid)</name>
        <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE.RA" format="default"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide" format="default"/> and provides a lookup
services <xref target="OUI.Lookup" format="default"/></t>
        <t>Companies that have more than one of these IDs or MAC address blocks
should pick one and prefer that for all their devices.</t>
        <t>Commonly, these are expressed in Hexadecimal Representation
<xref target="IEEE.802-2001" format="default"/> also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48. For JSON encoded
tokens, this is further base64url encoded.</t>
        <section anchor="oemid-cddl" numbered="true" toc="default">
          <name>oemid CDDL</name>
          <sourcecode type="CDDL">
oemid-claim = (
    oemid =&gt; bstr
)
</sourcecode>
        </section>
      </section>
      <section anchor="hardware-version-claims-hardware-version-claims" numbered="true" toc="default">
        <name>Hardware Version Claims (hardware-version-claims)</name>
        <t>The hardware version can be claimed at three different levels, the chip, the circuit board and the final device assembly.
An EAT can include any combination these claims.</t>
        <t>The hardware version is a simple text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID" format="default"/>.</t>
        <t>The hardware version can also be given by a 13-digit <xref target="EAN-13" format="default"/>.
A new CoSWID version scheme is registered with IANA by this document in <xref target="registerversionscheme" format="default"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.</t>
        <sourcecode type="CDDL">
chip-version-claim = (
    chip-version =&gt; tstr
)

chip-version-scheme-claim = (
    chip-version-scheme =&gt; $version-scheme
)

board-version-claim = (
    board-version =&gt; tstr
)

board-version-scheme-claim = (
    board-version-scheme =&gt; $version-scheme
)

device-version-claim = (
    device-version =&gt; tstr
)

device-version-scheme-claim = (
    device-version-scheme =&gt; $version-scheme
)


hardware-version-claims = (
    ? chip-version-claim,
    ? board-version-claim,
    ? device-version-claim,
    ? chip-version-scheme-claim,
    ? board-version-scheme-claim,
    ? device-version-scheme-claim,
)

</sourcecode>
      </section>
      <section anchor="software-description-and-version" numbered="true" toc="default">
        <name>Software Description and Version</name>
        <t>TODO: Add claims that reference CoSWID.</t>
      </section>
      <section anchor="the-security-level-claim-security-level" numbered="true" toc="default">
        <name>The Security Level Claim (security-level)</name>
        <t>This claim characterizes the device/entity 
ability to defend against attacks aimed at capturing the signing
key, forging claims and at forging EATs. This is done by
defining four security levels as described below. This is similar
to the key protection types defined by the Fast Identity Online (FIDO) Alliance <xref target="FIDO.Registry" format="default"/>.</t>
        <t>These claims describe security environment and countermeasures
available on the end-entity / client device where the attestation key
reside and the claims originate.</t>
        <dl>
          <dt>
1 -- Unrestricted  </dt>
          <dd>
            <t>There is some expectation that implementor will
protect the attestation signing keys at this level. Otherwise
the EAT provides no meaningful security assurances.</t>
          </dd>
          <dt>
2-- Restricted  </dt>
          <dd>
            <t>Entities at this level should not be general-purpose
operating environments that host features such as app download
systems, web browsers and complex productivity applications.
It is akin to the Secure Restricted level (see below) without the
security orientation. Examples include a Wi-Fi subsystem,
an IoT camera, or sensor device.</t>
          </dd>
          <dt>
3 -- Secure Restricted  </dt>
          <dd>
            <t>Entities at this level must meet the criteria defined by FIDO Allowed
Restricted Operating Environments <xref target="FIDO.AROE" format="default"/>. Examples include TEE's and 
schemes using virtualization-based security. Like the FIDO security goal,
security at this level is aimed at defending well against large-scale
network / remote attacks against the device.</t>
          </dd>
          <dt>
4 -- Hardware  </dt>
          <dd>
            <t>Entities at this level must include substantial defense 
against physical or electrical attacks against the device itself.
It is assumed any potential attacker has captured the device and can 
disassemble it. Example include TPMs and Secure Elements.</t>
          </dd>
        </dl>
        <t>The entity should claim the highest security level it achieves and no higher.
This set is not extensible so as to provide a common interoperable description of security level to the relying party.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of security and its own proprietary claim as a refined indication.</t>
        <t>This claim is not intended as a replacement for a proper end-device
security certification schemes such as those based on FIPS 140 <xref target="FIPS-140" format="default"/> 
or those based on Common Criteria <xref target="Common.Criteria" format="default"/>. The 
claim made here is solely a self-claim made by the Entity Originator.</t>
        <section anchor="security-level-cddl" numbered="true" toc="default">
          <name>security-level CDDL</name>
          <sourcecode type="CDDL">
security-level-cbor-type = &amp;(
    unrestricted: 1,
    restricted: 2,
    secure-restricted: 3,
    hardware: 4
)

security-level-json-type = 
    "unrestricted" /
    "restricted" /
    "secure-restricted" /
    "hardware"

security-level-claim = (
    security-level =&gt; security-level-cbor-type / security-level-json-type
)
</sourcecode>
        </section>
      </section>
      <section anchor="secure-boot-claim-secure-boot" numbered="true" toc="default">
        <name>Secure Boot Claim (secure-boot)</name>
        <t>The value of true indicates secure boot is enabled. Secure boot is
considered enabled when base software, the firmware and operating
system, are under control of the entity manufacturer identified in the
oemid claimd described in <xref target="oemid" format="default"/>. This may because the software is
in ROM or because it is cryptographically authenticated or some
combination of the two or other.</t>
        <section anchor="secure-boot-cddl" numbered="true" toc="default">
          <name>secure-boot CDDL</name>
          <sourcecode type="CDDL">
secure-boot-claim = (
    secure-boot =&gt; bool
)
</sourcecode>
        </section>
      </section>
      <section anchor="debug-status-claim-debug-status" numbered="true" toc="default">
        <name>Debug Status Claim (debug-status)</name>
        <t>This applies to system-wide or submodule-wide debug facilities of the
target device / submodule like JTAG and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
        <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-device
public keys.</t>
        <t>As with all claims, the absence of the debug level claim means
it is not reported. A conservative interpretation might assume
the Not Disabled state. It could however be that it is reported
in a proprietary claim.</t>
        <t>This claim is not extensible so as to provide a common interoperable description of debug status to the relying party.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
        <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
        <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The verifier or relying party receiving an EAT cannot
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
        <t>An individual target device / submodule may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
        <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the relying party can know the debug status
of the submodules since there is no inheritance.</t>
        <section anchor="enabled" numbered="true" toc="default">
          <name>Enabled</name>
          <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
        </section>
        <section anchor="disabled" numbered="true" toc="default">
          <name>Disabled</name>
          <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future, and it may also be
possible that they were enabled in the past after the
target device/sub-system booted/started, but they are currently disabled.</t>
        </section>
        <section anchor="disabled-since-boot" numbered="true" toc="default">
          <name>Disabled Since Boot</name>
          <t>This level indicates all debug facilities are currently disabled and
have been so since the target device/sub-system booted/started.</t>
        </section>
        <section anchor="disabled-permanently" numbered="true" toc="default">
          <name>Disabled Permanently</name>
          <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer cannot enable them. Only
the manufacturer indicated in the OEMID claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
        </section>
        <section anchor="disabled-fully-and-permanently" numbered="true" toc="default">
          <name>Disabled Fully and Permanently</name>
          <t>This level indicates that all debug capabilities for the target
device/sub-module are permanently disabled.</t>
        </section>
        <section anchor="debug-status-cddl" numbered="true" toc="default">
          <name>debug-status CDDL</name>
          <sourcecode type="CDDL">
debug-status-cbor-type = &amp;(
    enabled: 0,
    disabled: 1,
    disabled-since-boot: 2,
    disabled-permanently: 3,
    disabled-fully-and-permanently: 4
)

debug-status-json-type = 
    "enabled" /
    "disabled" /
    "disabled-since-boot" /
    "disabled-permanently" /
    "disabled-fully-and-permanently"

debug-status-claim = (
    debug-status =&gt; debug-status-cbor-type / debug-status-json-type
)
</sourcecode>
        </section>
      </section>
      <section anchor="including-keys" numbered="true" toc="default">
        <name>Including Keys</name>
        <t>An EAT may include a cryptographic key such as a public key.
The signing of the EAT binds the key to all the other claims in the token.</t>
        <t>The purpose for inclusion of the key may vary by use case.
For example, the key may be included as part of an IoT device onboarding protocol.
When the FIDO protocol includes a pubic key in its attestation message, the key represents the binding of a user, device and relying party.
This document describes how claims containing keys should be defined for the various use cases.
It does not define specific claims for specific use cases.</t>
        <t>Keys in CBOR format tokens SHOULD be the COSE_Key format <xref target="RFC8152" format="default"/> and keys in JSON format tokens SHOULD be the JSON Web Key format <xref target="RFC7517" format="default"/>.
These two formats support many common key types.
Their use avoids the need to decode other serialization formats.
These two formats can be extended to support further key types through their IANA registries.</t>
        <t>The general confirmation claim format <xref target="RFC8747" format="default"/>, <xref target="RFC7800" format="default"/> may also be used.
It provides key encryption. 
It also allows for inclusion by reference through a key ID.
The confirmation claim format may employed in the definition of some new claim for a a particular use case.</t>
        <t>When the actual confirmation claim is included in an EAT, this document associates no use case semantics other than proof of posession.
Different EAT use cases may choose to associate further semantics.
The key in the confirmation claim MUST be protected the same as the key used to sign the EAT. 
That is, the same, equivalent or better hardware defenses, access controls, key generation and such must be used.</t>
      </section>
      <section anchor="the-location-claim-location" numbered="true" toc="default">
        <name>The Location Claim (location)</name>
        <t>The location claim gives the location of the device entity from which the attestation originates.
It is derived from the W3C Geolocation API <xref target="W3C.GeoLoc" format="default"/>.
The latitude, longitude, altitude and accuracy must conform to <xref target="WGS84" format="default"/>.
The altitude is in meters above the <xref target="WGS84" format="default"/> ellipsoid.
The two accuracy values are positive numbers in meters.
The heading is in degrees relative to true north.
If the device is stationary, the heading is NaN (floating-point not-a-number).
The speed is the horizontal component of the device velocity in meters per second.</t>
        <t>When encoding floating-point numbers half-precision should not be used.
It usually does not provide enough precision for a geographic location.
It is not a requirement that the receiver of an EAT implement half-precision, so the receiver may not be able to decode the location.</t>
        <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.</t>
        <t>The age data item can be used when the entity doesn't know what time
it is either because it doesn't have a clock or it isn't set. The
entity must still have a "ticker" that can measure a time
interval. The age is the interval between acquisition of the location
data and token creation.</t>
        <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations" format="default"/> below.</t>
        <section anchor="location-cddl" numbered="true" toc="default">
          <name>location CDDL</name>
          <sourcecode type="CDDL">
location-type = {
    latitude =&gt; number,
    longitude =&gt; number,
    ? altitude =&gt; number,
    ? accuracy =&gt; number,
    ? altitude-accuracy =&gt; number,
    ? heading =&gt; number,
    ? speed =&gt; number,
    ? timestamp =&gt; ~time-int,
    ? age =&gt; uint
}

latitude = 1 / "latitude"
longitude = 2 / "longitude"
altitude = 3 / "altitude"
accuracy = 4 / "accuracy"
altitude-accuracy = 5 / "altitude-accuracy"
heading = 6 / "heading"
speed = 7 / "speed"
timestamp = 8 / "timestamp"
age = 9 / "age"

location-claim = (
    location-label =&gt; location-type
)
</sourcecode>
        </section>
      </section>
      <section anchor="the-uptime-claim-uptime" numbered="true" toc="default">
        <name>The Uptime Claim (uptime)</name>
        <t>The "uptime" claim contains a value that represents the number of
seconds that have elapsed since the entity or submod was last booted.</t>
        <section anchor="uptime-cddl" numbered="true" toc="default">
          <name>uptime CDDL</name>
          <sourcecode type="CDDL">
uptime-claim = (
    uptime =&gt; uint
)
</sourcecode>
        </section>
      </section>
      <section anchor="the-boot-seed-claim-boot-seed" numbered="true" toc="default">
        <name>The Boot Seed Claim (boot-seed)</name>
        <t>The Boot Seed claim is a random value created at system boot time that will allow differentiation of reports from different boot sessions.
This value is usually public and not protected.
It is not the same as a seed for a random number generator which must be kept secret.</t>
        <sourcecode type="CDDL">
boot-seed-claim = (
    boot-seed =&gt; bytes
)
</sourcecode>
      </section>
      <section anchor="the-intended-use-claim-intended-use" numbered="true" toc="default">
        <name>The Intended Use Claim (intended-use)</name>
        <t>EAT's may be used in the context of several different applications.  The intended-use
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it uses EAT.</t>
        <dl>
          <dt>
1 -- Generic  </dt>
          <dd>
            <t>Generic attestation describes an application where the EAT consumer
requres the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
          </dd>
          <dt>
2-- Registration  </dt>
          <dd>
            <t>Entities that are registering for a new service may be expected to 
provide an attestation as part of the registration process.  This intended-use
setting indicates that the attestation is not intended for any use but registration.</t>
          </dd>
          <dt>
3 -- Provisioning  </dt>
          <dd>
            <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess device security state of the entity prior to provisioning.</t>
          </dd>
          <dt>
4 -- Certificate Issuance (Certificate Signing Request)  </dt>
          <dd>
            <t>Certifying authorities (CA's) may require attestations prior to
the issuance of certificates related to keypairs hosted at the entity.  An
EAT may be used as part of the certificate signing request (CSR).</t>
          </dd>
          <dt>
5 -- Proof-of-Possession  </dt>
          <dd>
            <t>An EAT consumer may require an attestation as part of an accompanying 
proof-of-possession (PoP) appication. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has posession
of a key.  This kind of attestation may be neceesary to verify the
security state of the entity storing the private key used in a PoP application.</t>
          </dd>
        </dl>
        <section anchor="intended-use-cddl" numbered="true" toc="default">
          <name>intended-use CDDL</name>
          <sourcecode type="CDDL">
intended-use-cbor-type = &amp;(
    generic: 1,
    registration: 2,
    provisioning: 3,
    csr: 4,
    pop:  5
)

intended-use-json-type = 
    "generic" /
    "registration" /
    "provisioning" /
    "csr" /
    "pop" 

intended-use-claim = (
    intended-use =&gt; intended-use-cbor-type / intended-use-json-type
)
</sourcecode>
        </section>
      </section>
      <section anchor="profile-claim" numbered="true" toc="default">
        <name>The Profile Claim (profile)</name>
        <t>See <xref target="profiles" format="default"/> for the detailed description of a profile.</t>
        <t>A profile is identified by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the profile claim is to uniquely identify the profile even if it is a private profile.</t>
        <t>The OID is encoded in CBOR according to <xref target="CBOR-OID" format="default"/> and the URI according to <xref target="RFC8949" format="default"/>.
Both are unwrapped and thus not tags.
The OID is always absolute and never relative.
If the claims CBOR type is a text string it is a URI and if a byte string it is an OID.</t>
        <t>Note that this named "eat_profile" for JWT and is distinct from the already registered "profile" claim in the JWT claims registry.</t>
        <sourcecode type="CDDL">
oid = #6.4000(bstr) ; TODO: fill this in with correct CDDL from OID RFC

profile-claim = (
    profile =&gt; ~uri / ~oid
)
</sourcecode>
      </section>
      <section anchor="the-software-manifests-claim-manifests" numbered="true" toc="default">
        <name>The Software Manifests Claim (manifests)</name>
        <t>This claim contains descriptions of software that is present on the device.
These manifests are installed on the device when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the device, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is that they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the Verifier and/or the Relying Party.</t>
        <t>In some cases these will be signed by the software manufacturer independent of any signing for the purpose of EAT attestation.
Manifest claims should include the manufacturer's signature (which will be signed over  by the attestation signature).
In other cases the attestation signature will be the only one.</t>
        <t>This claim allows multiple formats for the manifest.
For example the manifest may be a CBOR-format CoSWID, an XML-format SWID or other.
Identification of the type of manifest is always by a CBOR tag.
In many cases, for examples CoSWID, a tag will already be registered with IANA.
If not, a tag MUST be registered.
It can be in the first-come-first-served space which has minimal requirements for registration.</t>
        <t>The claim is an array of one or more manifests.
To facilitate hand off of the manifest to a decoding library, each manifest is contained in a byte string.
This occurs for CBOR-format manifests as well as non-CBOR format manifests.</t>
        <t>If a particular manifest type uses CBOR encoding, then the item in the array for it MUST be a byte string that contains a CBOR tag.
The EAT decoder must decode the byte string and then the CBOR within it to find the tag number to identify the type of manifest.
The contents of the byte string is then handed to the particular manifest processor for that type of manifest.
CoSWID and SUIT manifest are examples of this.</t>
        <t>If a particular manifest type does not use CBOR encoding, then the item in the array for it must be a CBOR tag that contains a byte string.
The EAT decoder uses the tag to identify the processor for that type of manifest.
The contents of the tag, the byte string, are handed to the manifest processor.
Note that a byte string is used to contain the manifest whether it is a text based format or not.
An example of this is an XML format ISO/IEC 19770 SWID.</t>
        <t>It is not possible to describe the above requirements in CDDL so the type for an individual manifest is any in the CDDL below.
The above text sets the encoding requirement.</t>
        <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests may be of multiple formats.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
        <t>When the <xref target="CoSWID" format="default"/> format is used, it MUST be a payload CoSWID, not an evidence CoSWID.</t>
        <sourcecode type="CDDL">
manifests-claim = (
    manifests =&gt; manifests-type
)

manifests-type = [+ $manifest-formats]

; Must be a CoSWID payload type
$manifest-formats /= bytes .cbor concise-swid-tag

$manifest-formats /= bytes .cbor SUIT_Envelope_Tagged

</sourcecode>
      </section>
      <section anchor="the-software-evidence-claim-swevidence" numbered="true" toc="default">
        <name>The Software Evidence Claim {swevidence}</name>
        <t>This claim contains descriptions, lists, evidence or measurements of the software that exists on the device.
The defining characteristic of this claim is that its contents are created by processes on the device that inventory, measure or otherwise characterize the software on the device.
The contents of this claim do not originate from the software manufacturer.</t>
        <t>In most cases the contents of this claim are signed as part of attestation signing, but independent signing in addition to the attestation signing is not ruled out when a particular evidence format supports it.</t>
        <t>This claim uses the same mechanism for identification of the type of the swevidence as is used for the type of the manifest in the manifests claim.
It also uses the same byte string based mechanism for containing the claim and easing the hand off to a processing library.
See the discussion above in the manifests claim.</t>
        <t>When the <xref target="CoSWID" format="default"/> format is used, it MUST be evidence CoSWIDs, not payload CoSWIDS.</t>
        <sourcecode type="CDDL">
swevidence-claim = (
    swevidence =&gt; swevidence-type
)

swevidence-type = [+ $swevidence-formats]

; Must be a CoSWID evidence type
$swevidence-formats /= bytes .cbor concise-swid-tag

</sourcecode>
      </section>
      <section anchor="the-submodules-part-of-a-token-submods" numbered="true" toc="default">
        <name>The Submodules Part of a Token (submods)</name>
        <t>Some devices are complex, having many subsystems or submodules.  A
mobile phone is a good example. It may have several connectivity
submodules for communications (e.g., Wi-Fi and cellular). It may have
subsystems for low-power audio and video playback. It may have one or
more security-oriented subsystems like a TEE or a Secure Element.</t>
        <t>The claims for each these can be grouped together in a submodule.</t>
        <t>The submods part of a token are in a single map/object with many entries, one
per submodule.  There is only one submods map in a token. It is
identified by its specific label. It is a peer to other claims, but it
is not called a claim because it is a container for a claim set rather
than an individual claim. This submods part of a token allows what
might be called recursion. It allows claim sets inside of claim sets
inside of claims sets...</t>
        <section anchor="two-types-of-submodules" numbered="true" toc="default">
          <name>Two Types of Submodules</name>
          <t>Each entry in the submod map is one of two types:</t>
          <ul spacing="normal">
            <li>A non-token submodule that is a map or object directly containing claims for the submodule.</li>
            <li>A nested EAT that is a fully formed, independently signed EAT token</li>
          </ul>
          <section anchor="non-token-submodules" numbered="true" toc="default">
            <name>Non-token Submodules</name>
            <t>This is simply a map or object containing claims about the submodule.</t>
            <t>It may contain claims that are the same as its surrounding token or superior submodules. 
For example, the top-level of the token may have a UEID, a submod may have a different UEID and a further subordinate submodule may also have a UEID.</t>
            <t>It is signed/encrypted along with the rest of the token and thus the claims are secured by the same Attester with the same signing key as the rest of the token.</t>
            <t>If a token is in CBOR format (a CWT or a UCCS), all non-token submodules must be CBOR format.
If a token in in JSON format (a JWT), all non-token submodules must be in JSON format.</t>
            <t>When decoding, this type of submodule is recognized from the other type by being a data item of type map for CBOR or type object for JSON.</t>
          </section>
          <section anchor="nested-eats" numbered="true" toc="default">
            <name>Nested EATs</name>
            <t>This type of submodule is a fully formed secured EAT as defined in this document except that it MUST NOT be a UCCS or an unsecured JWT.
A nested token that is one that is always secured using COSE or JOSE, usually by an independent Attester.
When the surrounding EAT is a CWT or secured JWT, the nested token becomes securely bound with the other claims in the surrounding token.</t>
            <t>It is allowed to have a CWT as a submodule in a JWT and vice versa, but this SHOULD be avoided unless necessary.</t>
            <section anchor="surrounding-eat-is-cbor-format" numbered="true" toc="default">
              <name>Surrounding EAT is CBOR format</name>
              <t>They type of an EAT nested in a CWT is determined by whether the CBOR type is a text string or a byte string.
If a text string, then it is a JWT.
If a byte string, then it is a CWT.</t>
              <t>A CWT nested in a CBOR-format token is always wrapped by a byte string for easier handling with standard CBOR decoders and token processing APIs that will typically take a byte buffer as input.</t>
              <t>Nested CWTs may be either a CWT CBOR tag or a CWT Protocol Message.
COSE layers in nested CWT EATs MUST be a COSE_Tagged_Message, never a COSE_Untagged_Message.
If a nested EAT has more than one level of COSE, for example one that is both encrypted and signed, a COSE_Tagged_message must be used at every level.</t>
            </section>
            <section anchor="surrounding-eat-is-json-format" numbered="true" toc="default">
              <name>Surrounding EAT is JSON format</name>
              <t>When a CWT is nested in a JWT, it must be as a 55799 tag in order to distinguish it from a nested JWT.</t>
              <t>When a nested EAT in a JWT is decoded, first remove the base64url encoding.
Next, check to see if it starts with the bytes 0xd9d9f7.
If so, then it is a CWT as a JWT will never start with these four bytes. 
If not if it is a JWT.</t>
              <t>Other than the 55799 tag requirement, tag usage for CWT's nested in a JSON format token follow the same rules as for CWTs nested in CBOR-format tokens.
It may be a CWT CBOR tag or a CWT Protocol Message and COSE_Tagged_Message MUST be used at all COSE layers.</t>
            </section>
          </section>
          <section anchor="unsecured-jwts-and-uccs-tokens-as-submodules" numbered="true" toc="default">
            <name>Unsecured JWTs and UCCS Tokens as Submodules</name>
            <t>To incorporate a UCCS token as a submodule, it MUST be as a non-token submodule. 
This can be accomplished inserting the content of the UCCS Tag into the submodule map.
The content of a UCCS tag is exactly a map of claims as required for a non-token submodule.
If the UCCS is not a UCCS tag, then it can just be inserted into the submodule map directly.</t>
            <t>The definition of a nested EAT type of submodule is that it is one that is secured (signed) by an Attester.
Since UCCS tokens are unsecured, they do not fulfill this definition and must be non-token submodules.</t>
            <t>To incorporate an Unsecured JWT as a submodule, the null-security JOSE wrapping should be removed.
The resulting claims set should be inserted as a non-token submodule.</t>
            <t>To incorporate a UCCS token in a surrounding JSON token, the UCCS token claims should be translated from CBOR to JSON.
To incorporate an Unsecured JWT into a surrounding CBOR-format token, the null-security JOSE should be removed and the claims translated from JSON to CBOR.</t>
          </section>
        </section>
        <section anchor="no-inheritance" numbered="true" toc="default">
          <name>No Inheritance</name>
          <t>The subordinate modules do not inherit anything from the containing
token.  The subordinate modules must explicitly include all of their
claims. This is the case even for claims like the nonce and age.</t>
          <t>This rule is in place for simplicity. It avoids complex inheritance
rules that might vary from one type of claim to another.</t>
        </section>
        <section anchor="security-levels" numbered="true" toc="default">
          <name>Security Levels</name>
          <t>The security level of the non-token subordinate modules should always
be less than or equal to that of the containing modules in the case of non-token
submodules. It makes no sense for a module of lesser security to be
signing claims of a module of higher security. An example of this is a
TEE signing claims made by the non-TEE parts (e.g. the high-level OS)
of the device.</t>
          <t>The opposite may be true for the nested tokens. They usually have
their own more secure key material. An example of this is an embedded
secure element.</t>
        </section>
        <section anchor="submodule-names" numbered="true" toc="default">
          <name>Submodule Names</name>
          <t>The label or name for each submodule in the submods map is a text
string naming the submodule. No submodules may have the same name.</t>
        </section>
        <section anchor="submods-cddl" numbered="true" toc="default">
          <name>submods CDDL</name>
          <sourcecode type="CDDL">
; The part of a token that contains all the submodules.  It is a peer
; with the claims in the token, but not a claim, only a map/object to
; hold all the submodules.

submods-part = (
    submods =&gt; submods-type
)

submods-type = { + submod-type }


; The type of a submodule which can either be a nested claim set or a
; nested separately signed token. Nested tokens are wrapped in a bstr
; or a tstr.

submod-type = (
    submod-name =&gt; eat-claim-set / nested-token
)


; When this is a bstr, the contents are an eat-token in CWT or UCCS
; format.  When this is a tstr, the contents are an eat-token in JWT
; format.

nested-token = bstr / tstr; 


; Each submodule has a unique text string name.

submod-name = tstr 


</sourcecode>
        </section>
      </section>
    </section>
    <section anchor="keyid" numbered="true" toc="default">
      <name>Endorsements and Verification Keys</name>
      <t>The Verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture" format="default"/> describes what is called an Endorsement.
This is an input to the Verifier that is usually the basis of the trust placed in an EAT and the Attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain Reference Values to which EAT claims are compared as part of the verification process.
It may contain implied claims, those that are passed on to the Relying Party in Attestation Results.</t>
      <t>There is not yet any standard format(s) for an Endorsement.
One format that may be used for an Endorsement is an X.509 certificate.
Endorsement data like Reference Values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the Endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an Endorsement.</t>
      <t>For the components (Attester, Verifier, Relying Party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <section anchor="identification-methods" numbered="true" toc="default">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes Endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for Endorsements in other formats. If such an Endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id" numbered="true" toc="default">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC8152" format="default"/> and <xref target="RFC7515" format="default"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters" numbered="true" toc="default">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft" format="default"/> and JSON Web Siganture <xref target="RFC7515" format="default"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an Endorsement and thus carrying additional input to the Verifier. It may be just an X.509 certificate, not an Endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the Verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters" numbered="true" toc="default">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft" format="default"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification" numbered="true" toc="default">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the device and therefore can work well as a key identifier or Endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
      <section anchor="other-considerations" numbered="true" toc="default">
        <name>Other Considerations</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the Verifier may be configured with a root certificate or a master key by the Verifier system administrator.</t>
        <t>Often an X.509 certificate or an Endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints and an Endorsement might have Reference Values.
When this is the case, the key identifier must be either a protected header or in the payload such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515" format="default"/>.</t>
      </section>
    </section>
    <section anchor="profiles" numbered="true" toc="default">
      <name>Profiles</name>
      <t>This EAT specification does not gaurantee that implementations of it will interoperate.
The variability in this specification is necessary to accommodate the widely varying use cases.
An EAT profile narrows the specification for a specific use case.
An ideal EAT profile will gauarantee interoperability.</t>
      <t>The profile can be named in the token using the profile claim described in <xref target="profile-claim" format="default"/>.</t>
      <section anchor="format-of-a-profile-document" numbered="true" toc="default">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>In some cases CDDL may be created that replaces CDDL in this or other document to express some profile requirements.
For example, to require the altitude data item in the location claim, CDDL can be written that replicates the location claim with the altitude no longer optional.</t>
      </section>
      <section anchor="list-of-profile-issues" numbered="true" toc="default">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, UCCS, JWS, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both" numbered="true" toc="default">
          <name>Use of JSON, CBOR or both</name>
          <t>The profile should indicate whether the token format should be CBOR, JSON, both or even some other encoding.
If some other encoding, a specification for how the CDDL described here is serialized in that encoding is necessary.</t>
          <t>This should be addressed for the top-level token and for any nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding" numbered="true" toc="default">
          <name>CBOR Map and Array Encoding</name>
          <t>The profile should indicate whether definite-length arrays/maps, indefinite-length arrays/maps or both are allowed.
A good default is to allow only definite-length arrays/maps.</t>
          <t>An alternate is to allow both definite and indefinite-length arrays/maps.
The decoder should accept either.
Encoders that need to fit on very small hardware or be actually implement in hardware can use indefinite-length encoding.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
        </section>
        <section anchor="cbor-string-encoding" numbered="true" toc="default">
          <name>CBOR String Encoding</name>
          <t>The profile should indicate whether definite-length strings, indefinite-length strings or both are allowed.
A good default is to allow only definite-length strings.
As with map and array encoding, allowing indefinite-length strings can be beneficial for some smaller implementations.</t>
        </section>
        <section anchor="cbor-preferred-serialization" numbered="true" toc="default">
          <name>CBOR Preferred Serialization</name>
          <t>The profile should indicate whether encoders must use preferred serialization.
The profile should indicate whether decoders must accept non-preferred serialization.</t>
        </section>
        <section anchor="cosejose-protection" numbered="true" toc="default">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
EAT/CWT has the option to have no protection using UCCS and JOSE has a NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, CWT and UCCS are allowed by EAT.</t>
          <t>The profile should list the protections that must be supported by all decoders implementing the profile.
The encoders them must implement a subset of what is listed for the decoders, perhaps only one.</t>
          <t>Implementations may choose to sign or MAC before encryption so that the implementation layer doing the signing or MACing can be the smallest.
It is often easier to make smaller implementations more secure, perhaps even implementing in solely in hardware.
The key material for a signature or MAC is a private key, while for encryption it is likely to be a public key.
The key for encryption requires less protection.</t>
        </section>
        <section anchor="cosejose-algorithms" numbered="true" toc="default">
          <name>COSE/JOSE Algorithms</name>
          <t>The profile document should list the COSE algorithms that a Verifier must implement.
The Attester will select one of them. 
Since there is no negotiation, the Verifier should implement all algorithms listed in the profile.</t>
        </section>
        <section anchor="verification-key-identification" numbered="true" toc="default">
          <name>Verification Key Identification</name>
          <t>Section <xref target="keyid" format="default"/> describes a number of methods for identifying a verification key.
The profile document should specify one of these or one that is not described.
The ones described in this document are only roughly described.
The profile document should go into the full detail.</t>
        </section>
        <section anchor="endorsement-identification" numbered="true" toc="default">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as Verification Key Identification, the profile may wish to specify how Endorsements are to be identified.
However note that Endorsement Identification is optional, where as key identification is not.</t>
        </section>
        <section anchor="freshness" numbered="true" toc="default">
          <name>Freshness</name>
          <t>Just about every use case will require some means of knowing the EAT is recent enough and not a replay of an old token.
The profile should describe how freshness is achieved.
The section on Freshness in <xref target="RATS-Architecture" format="default"/> describes some of the possible solutions to achieve this.</t>
        </section>
        <section anchor="required-claims" numbered="true" toc="default">
          <name>Required Claims</name>
          <t>The profile can list claims whose absence results in Verification failure.</t>
        </section>
        <section anchor="prohibited-claims" numbered="true" toc="default">
          <name>Prohibited Claims</name>
          <t>The profile can list claims whose presence results in Verification failure.</t>
        </section>
        <section anchor="additional-claims" numbered="true" toc="default">
          <name>Additional Claims</name>
          <t>The profile may describe entirely new claims.
These claims can be required or optional.</t>
        </section>
        <section anchor="refined-claim-definition" numbered="true" toc="default">
          <name>Refined Claim Definition</name>
          <t>The profile may lock down optional aspects of individual claims.
For example, it may require altitude in the location claim, or it may require that HW Versions always be described using EAN-13.</t>
        </section>
        <section anchor="cbor-tags" numbered="true" toc="default">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.
Similarly, the profile should specify whether the token should be a UCCS tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unncessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="manifests-and-software-evidence-claims" numbered="true" toc="default">
          <name>Manifests and Software Evidence Claims</name>
          <t>The profile should specify which formats are allowed for the manifests and software evidence claims.
The profile may also go on to say which parts and options of these formats are used, allowed and prohibited.</t>
        </section>
      </section>
    </section>
    <section anchor="encoding" numbered="true" toc="default">
      <name>Encoding</name>
      <t>This makes use of the types defined in CDDL Appendix D, Standard Prelude.</t>
      <t>Some of the CDDL included here is for claims that are defined in CWT <xref target="RFC8392" format="default"/> or JWT <xref target="RFC7519" format="default"/> or are in the IANA CWT or JWT registries.
CDDL was not in use when these claims where defined.</t>
      <section anchor="common-cddl-types" numbered="true" toc="default">
        <name>Common CDDL Types</name>
        <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
        <t>Note that unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949" format="default"/>.
They are just text strings that contain a URI.</t>
        <sourcecode type="CDDL">
string-or-uri = tstr 

time-int = #6.1(int)
</sourcecode>
      </section>
      <section anchor="cddl-for-cwt-defined-claims" numbered="true" toc="default">
        <name>CDDL for CWT-defined Claims</name>
        <t>This section provides CDDL for the claims defined in CWT. It is
non-normative as <xref target="RFC8392" format="default"/> is the authoritative definition of these
claims.</t>
        <t>Note that the subject, issue and audience claims may be a text string containing a URI per <xref target="RFC8392" format="default"/> and <xref target="RFC7519" format="default"/>.
These are never the URI tag defined in <xref target="RFC8949" format="default"/>.</t>
        <sourcecode type="CDDL">
$$eat-extension //= (
    ? issuer =&gt; text,
    ? subject =&gt; text,
    ? audience =&gt; text,
    ? expiration =&gt; time,
    ? not-before =&gt; time,
    ? issued-at =&gt; time,
    ? cwt-id =&gt; bytes,
)

issuer = 1
subject = 2
audience = 3
expiration = 4
not-before = 5
issued-at = 6
cwt-id = 7

</sourcecode>
      </section>
      <section anchor="json" numbered="true" toc="default">
        <name>JSON</name>
        <section anchor="json-labels" numbered="true" toc="default">
          <name>JSON Labels</name>
          <sourcecode type="JSON">
; The following are Claim Keys (labels) assigned for JSON-encoded tokens.

ueid /= "ueid"
sueids /= "sueids"
nonce /= "nonce"
oemid /= "oemid"
security-level /= "seclevel"
secure-boot /= "secboot"
debug-status /= "dbgstat"
location /= "location"
uptime /= "uptime"
profile /= "eat-profile"
intended-use /= "intuse"
boot-seed /= "bootseed"
submods /= "submods"
timestamp /= "timestamp"
manifests /= "manifests"
swevidence /= "swevidence"

latitude /= "lat"
longitude /= "long"
altitude /= "alt"
accuracy /= "accry"
altitude-accuracy /= "alt-accry"
heading /= "heading"
speed /= "speed"
</sourcecode>
        </section>
        <section anchor="jsoninterop" numbered="true" toc="default">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per RFC 8610 Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- must be base64url encoded</li>
            <li>time -- must be encoded as NumericDate as described section 2 of <xref target="RFC7519" format="default"/>.</li>
            <li>string-or-uri -- must be encoded as StringOrURI as described section 2 of <xref target="RFC7519" format="default"/>.</li>
            <li>uri -- must be a URI <xref target="RFC3986" format="default"/>.</li>
            <li>oid -- encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1").</li>
          </ul>
        </section>
      </section>
      <section anchor="cbor" numbered="true" toc="default">
        <name>CBOR</name>
        <section anchor="cbor-interoperability" numbered="true" toc="default">
          <name>CBOR Interoperability</name>
          <t>CBOR allows data items to be serialized in more than one form.
If the sender uses a form that the receiver can't decode, there will not be interoperability.</t>
          <t>This specification gives no blanket requirements to narrow CBOR serialization for all uses of EAT.
This allows individual uses to tailor serialization to the environment.
It also may result in EAT implementations that don't interoperate.</t>
          <t>One way to guarantee interoperability is to clearly specify CBOR serialization in a profile document.
See <xref target="profiles" format="default"/> for a list of serialization issues that should be addressed.</t>
          <t>EAT will be commonly used where the device generating the attestation is constrained and the receiver/verifier of the attestation is a capacious server.
Following is a set of serialization requirements that work well for that use case and are guaranteed to interoperate.
Use of this serialization is recommended where possible, but not required.
An EAT profile may just reference the following section rather than spell out serialization details.</t>
          <section anchor="eat-constrained-device-serialization" numbered="true" toc="default">
            <name>EAT Constrained Device Serialization</name>
            <ul spacing="normal">
              <li>Preferred serialization described in section 4.1 of <xref target="RFC8949" format="default"/> is not required.
The EAT decoder must accept all forms of number serialization.
The EAT encoder may use any form it wishes.</li>
              <li>The EAT decoder must accept indefinite length arrays and maps as described in section 3.2.2 of <xref target="RFC8949" format="default"/>.
The EAT encoder may use indefinite length arrays and maps if it wishes.</li>
              <li>The EAT decoder must accept indefinite length strings as described in section 3.2.3 of <xref target="RFC8949" format="default"/>.
The EAT encoder may use indefinite length strings if it wishes.</li>
              <li>Sorting of maps by key is not required.
The EAT decoder must not rely on sorting.</li>
              <li>Deterministic encoding described in Section 4.2 of <xref target="RFC8949" format="default"/> is not required.</li>
              <li>Basic validity described in section 5.3.1 of <xref target="RFC8949" format="default"/> must be followed.
The EAT encoder must not send duplicate map keys/labels or invalid UTF-8 strings.</li>
            </ul>
          </section>
        </section>
      </section>
      <section anchor="collected-cddl" numbered="true" toc="default">
        <name>Collected CDDL</name>
        <sourcecode type="CDDL">
; This is the top-level definition of the claims in EAT tokens.  To
; form an actual EAT Token, this claim set is enclosed in a COSE, JOSE
; or UCCS message.

eat-claim-set = {
    ? ueid-claim,
    ? sueids-claim,
    ? nonce-claim,
    ? oemid-claim,
    ? hardware-version-claims,
    ? security-level-claim,
    ? secure-boot-claim,
    ? debug-status-claim,
    ? location-claim,
    ? intended-use-claim,
    ? profile-claim,
    ? uptime-claim,
    ? manifests-claim,
    ? swevidence-claim,
    ? submods-part,
    * $$eat-extension,
}


; This is the top-level definition of an EAT Token.  It is a CWT, JWT
; or UCSS where the payload is an eat-claim-set. A JWT_Message is what
; is defined by JWT in RFC 7519. (RFC 7519 doesn't use CDDL so a there
; is no actual CDDL definition of JWT_Message).

eat-token = EAT_Tagged_Message / EAT_Untagged_Message / JWT_Message


; This is CBOR-format EAT token in the CWT or UCCS format that is a
; tag.  COSE_Tagged_message is defined in RFC 8152.  Tag 601 is
; proposed by the UCCS draft, but not yet assigned.

EAT_Tagged_Message = #6.61(COSE_Tagged_Message) / #6.601(eat-claim-set)


; This is a CBOR-format EAT token that is a CWT or UCSS that is not a
; tag COSE_Tagged_message and COSE_Untagged_Message are defined in RFC
; 8152.

EAT_Untagged_Message = COSE_Tagged_Message / COSE_Untagged_Message / UCCS_Untagged_Message


; This is an "unwrapped" UCCS tag. Unwrapping a tag means to use the
; definition of its content without the preceding type 6 tag
; integer. Since a UCCS is nothing but a tag for an unsecured CWT
; claim set, unwrapping reduces to a bare eat-claim-set.

UCCS_Untagged_Message = eat-claim-set


string-or-uri = tstr 

time-int = #6.1(int)

$$eat-extension //= (
    ? issuer =&gt; text,
    ? subject =&gt; text,
    ? audience =&gt; text,
    ? expiration =&gt; time,
    ? not-before =&gt; time,
    ? issued-at =&gt; time,
    ? cwt-id =&gt; bytes,
)

issuer = 1
subject = 2
audience = 3
expiration = 4
not-before = 5
issued-at = 6
cwt-id = 7


debug-status-cbor-type = &amp;(
    enabled: 0,
    disabled: 1,
    disabled-since-boot: 2,
    disabled-permanently: 3,
    disabled-fully-and-permanently: 4
)

debug-status-json-type = 
    "enabled" /
    "disabled" /
    "disabled-since-boot" /
    "disabled-permanently" /
    "disabled-fully-and-permanently"

debug-status-claim = (
    debug-status =&gt; debug-status-cbor-type / debug-status-json-type
)

location-type = {
    latitude =&gt; number,
    longitude =&gt; number,
    ? altitude =&gt; number,
    ? accuracy =&gt; number,
    ? altitude-accuracy =&gt; number,
    ? heading =&gt; number,
    ? speed =&gt; number,
    ? timestamp =&gt; ~time-int,
    ? age =&gt; uint
}

latitude = 1 / "latitude"
longitude = 2 / "longitude"
altitude = 3 / "altitude"
accuracy = 4 / "accuracy"
altitude-accuracy = 5 / "altitude-accuracy"
heading = 6 / "heading"
speed = 7 / "speed"
timestamp = 8 / "timestamp"
age = 9 / "age"

location-claim = (
    location-label =&gt; location-type
)

nonce-type = bstr .size (8..64)

nonce-claim = (
    nonce =&gt; nonce-type / [ 2* nonce-type ]
)

oemid-claim = (
    oemid =&gt; bstr
)

chip-version-claim = (
    chip-version =&gt; tstr
)

chip-version-scheme-claim = (
    chip-version-scheme =&gt; $version-scheme
)

board-version-claim = (
    board-version =&gt; tstr
)

board-version-scheme-claim = (
    board-version-scheme =&gt; $version-scheme
)

device-version-claim = (
    device-version =&gt; tstr
)

device-version-scheme-claim = (
    device-version-scheme =&gt; $version-scheme
)


hardware-version-claims = (
    ? chip-version-claim,
    ? board-version-claim,
    ? device-version-claim,
    ? chip-version-scheme-claim,
    ? board-version-scheme-claim,
    ? device-version-scheme-claim,
)


secure-boot-claim = (
    secure-boot =&gt; bool
)

security-level-cbor-type = &amp;(
    unrestricted: 1,
    restricted: 2,
    secure-restricted: 3,
    hardware: 4
)

security-level-json-type = 
    "unrestricted" /
    "restricted" /
    "secure-restricted" /
    "hardware"

security-level-claim = (
    security-level =&gt; security-level-cbor-type / security-level-json-type
)

; The part of a token that contains all the submodules.  It is a peer
; with the claims in the token, but not a claim, only a map/object to
; hold all the submodules.

submods-part = (
    submods =&gt; submods-type
)

submods-type = { + submod-type }


; The type of a submodule which can either be a nested claim set or a
; nested separately signed token. Nested tokens are wrapped in a bstr
; or a tstr.

submod-type = (
    submod-name =&gt; eat-claim-set / nested-token
)


; When this is a bstr, the contents are an eat-token in CWT or UCCS
; format.  When this is a tstr, the contents are an eat-token in JWT
; format.

nested-token = bstr / tstr; 


; Each submodule has a unique text string name.

submod-name = tstr 



ueid-type = bstr .size (7..33)

ueid-claim = (
     ueid =&gt; ueid-type
)

sueids-type = {
    + tstr =&gt; ueid-type
}

sueids-claim = (
     sueids =&gt; sueids-type
)

intended-use-cbor-type = &amp;(
    generic: 1,
    registration: 2,
    provisioning: 3,
    csr: 4,
    pop:  5
)

intended-use-json-type = 
    "generic" /
    "registration" /
    "provisioning" /
    "csr" /
    "pop" 

intended-use-claim = (
    intended-use =&gt; intended-use-cbor-type / intended-use-json-type
)

oid = #6.4000(bstr) ; TODO: fill this in with correct CDDL from OID RFC

profile-claim = (
    profile =&gt; ~uri / ~oid
)

uptime-claim = (
    uptime =&gt; uint
)

manifests-claim = (
    manifests =&gt; manifests-type
)

manifests-type = [+ $manifest-formats]

; Must be a CoSWID payload type
$manifest-formats /= bytes .cbor concise-swid-tag

$manifest-formats /= bytes .cbor SUIT_Envelope_Tagged


swevidence-claim = (
    swevidence =&gt; swevidence-type
)

swevidence-type = [+ $swevidence-formats]

; Must be a CoSWID evidence type
$swevidence-formats /= bytes .cbor concise-swid-tag


; The following Claim Keys (labels) are pre-assigned by IANA.
; They are for CBOR-based tokens (CWT and UCCS).
; They are not expected to change in the final publication as an RFC.

nonce = 10
ueid = 11
oemid = 13
security-level = 14
secure-boot = 15
debug-status = 16
location-label = 17
profile = 18
submods = 20


boot-seed-claim = (
    boot-seed =&gt; bytes
)

; The following are Claim Keys (labels) assigned for JSON-encoded tokens.

ueid /= "ueid"
sueids /= "sueids"
nonce /= "nonce"
oemid /= "oemid"
security-level /= "seclevel"
secure-boot /= "secboot"
debug-status /= "dbgstat"
location /= "location"
uptime /= "uptime"
profile /= "eat-profile"
intended-use /= "intuse"
boot-seed /= "bootseed"
submods /= "submods"
timestamp /= "timestamp"
manifests /= "manifests"
swevidence /= "swevidence"

latitude /= "lat"
longitude /= "long"
altitude /= "alt"
accuracy /= "accry"
altitude-accuracy /= "alt-accry"
heading /= "heading"
speed /= "speed"

</sourcecode>
      </section>
    </section>
    <section anchor="iana-considerations" numbered="true" toc="default">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-web-token-cwt-claims-registry" numbered="true" toc="default">
        <name>Reuse of CBOR Web Token (CWT) Claims Registry</name>
        <t>Claims defined for EAT are compatible with those of CWT
so the CWT Claims Registry is re used. No new IANA registry
is created. All EAT claims should be registered in the
CWT and JWT Claims Registries.</t>
      </section>
      <section anchor="claim-characteristics" numbered="true" toc="default">
        <name>Claim Characteristics</name>
        <t>The following is design guidance for creating new EAT claims, particularly those to be registered with IANA.</t>
        <t>Much of this guidance is generic and could also be considered when designing new CWT or JWT claims.</t>
        <section anchor="interoperability-and-relying-party-orientation" numbered="true" toc="default">
          <name>Interoperability and Relying Party Orientation</name>
          <t>It is a broad goal that EATs can be processed by relying parties in a general way regardless of the type, manufacturer or technology of the device from which they originate. 
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
          <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
        </section>
        <section anchor="operating-system-and-technology-neutral" numbered="true" toc="default">
          <name>Operating System and Technology Neutral</name>
          <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
          <t>Claims should not be defined such that they are specific to a SW environment or programming language.</t>
          <t>Claims should not be defined such that they are specific to a chip or particular hardware. 
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
          <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
        </section>
        <section anchor="security-level-neutral" numbered="true" toc="default">
          <name>Security Level Neutral</name>
          <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists. 
Secure Elements and smart cards are examples of this. 
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
          <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
        </section>
        <section anchor="reuse-of-extant-data-formats" numbered="true" toc="default">
          <name>Reuse of Extant Data Formats</name>
          <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
          <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON format for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
          <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
        </section>
        <section anchor="proprietary-claims" numbered="true" toc="default">
          <name>Proprietary Claims</name>
          <t>EAT allows the definition and use of proprietary claims.</t>
          <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer. 
This is a supported use case.</t>
          <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
        </section>
      </section>
      <section anchor="claims-registered-by-this-document" numbered="true" toc="default">
        <name>Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519" format="default"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392" format="default"/>. Each entry below is an addition to both registries (except
for the nonce claim which is already registered for JWT, but not registered for CWT).</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <section anchor="claims-for-early-assignment" numbered="true" toc="default">
          <name>Claims for Early Assignment</name>
          <t>RFC Editor: in the final publication this section should be combined with the following
section as it will no longer be necessary to distinguish claims with early assignment.
Also, the following paragraph should be removed.</t>
          <t>The claims in this section have been (requested for / given) early assignment according to <xref target="RFC7120" format="default"/>.
They have been assigned values and registered before final publication of this document.
While their semantics is not expected to change in final publication, it is possible that they will.
The JWT Claim Names and CWT Claim Keys are not expected to change.</t>
          <ul spacing="normal">
            <li>Claim Name: Nonce</li>
            <li>Claim Description: Nonce</li>
            <li>JWT Claim Name: "nonce" (already registered for JWT)</li>
            <li>Claim Key: 10</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <xref target="OpenIDConnectCore" format="default"/>, <strong>this document</strong></li>
          </ul>
          <t>&nbsp;</t>
          <ul spacing="normal">
            <li>Claim Name: UEID</li>
            <li>Claim Description: The Universal Entity ID</li>
            <li>JWT Claim Name: "ueid"</li>
            <li>CWT Claim Key: 11</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t>&nbsp;</t>
          <ul spacing="normal">
            <li>Claim Name: OEMID</li>
            <li>Claim Description: IEEE-based OEM ID</li>
            <li>JWT Claim Name: "oemid"</li>
            <li>Claim Key: 13</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t>&nbsp;</t>
          <ul spacing="normal">
            <li>Claim Name: Security Level</li>
            <li>Claim Description: Characterization of the security of an Attester or submodule</li>
            <li>JWT Claim Name: "seclevel"</li>
            <li>Claim Key: 14</li>
            <li>Claim Value Type(s): integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t>&nbsp;</t>
          <ul spacing="normal">
            <li>Claim Name: Secure Boot</li>
            <li>Claim Description: Indicate whether the boot was secure</li>
            <li>JWT Claim Name: "secboot"</li>
            <li>Claim Key: 15</li>
            <li>Claim Value Type(s): Boolean</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t>&nbsp;</t>
          <ul spacing="normal">
            <li>Claim Name: Debug Status</li>
            <li>Claim Description: Indicate status of debug facilities</li>
            <li>JWT Claim Name: "dbgstat"</li>
            <li>Claim Key: 16</li>
            <li>Claim Value Type(s): integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t>&nbsp;</t>
          <ul spacing="normal">
            <li>Claim Name: Location</li>
            <li>Claim Description: The geographic location</li>
            <li>JWT Claim Name: "location"</li>
            <li>Claim Key: 17</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t>&nbsp;</t>
          <ul spacing="normal">
            <li>Claim Name: Profile</li>
            <li>Claim Description: Indicates the EAT profile followed</li>
            <li>JWT Claim Name: "eat_profile"</li>
            <li>Claim Key: 18</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t>&nbsp;</t>
          <ul spacing="normal">
            <li>Claim Name: Submodules Section</li>
            <li>Claim Description: The section containing submodules (not actually a claim)</li>
            <li>JWT Claim Name: "submods"</li>
            <li>Claim Key: 20</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="to-be-assigned-claims" numbered="true" toc="default">
          <name>To be Assigned Claims</name>
          <t>TODO: add the rest of the claims in here</t>
        </section>
        <section anchor="registerversionscheme" numbered="true" toc="default">
          <name>Version Schemes Registered by this Document</name>
          <t>IANA is requested to register a new value in the "Software Tag Version Scheme Values" established by <xref target="CoSWID" format="default"/>.</t>
          <t>The new value is a version scheme a 13-digit European Article Number <xref target="EAN-13" format="default"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.
This version scheme is the ASCII text representation of EAN-13 digits, the same ones often printed with a bar code.
This version scheme must comply with the EAN allocation and assignment rules.
For example, this requires the manufacturer to obtain a manufacture code from GS1.</t>
          <table align="center">
            <thead>
              <tr>
                <th align="left">Index</th>
                <th align="left">Version Scheme Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">5</td>
                <td align="left">ean-13</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations" numbered="true" toc="default">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations" numbered="true" toc="default">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Any set of relying parties
that receives tokens that happen to be from a single device will be
able to know the tokens are all from the same device and be able to
track the device. Thus, in many usage situations UEID violates
governmental privacy regulation. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The device obtains explicit permission from the user of the device
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one relying party.</li>
          <li>The device authenticates the relying party and generates a derived
UEID/SUEID just for that particular relying party.  For example, the relying
party could prove their identity cryptographically to the device, then
the device generates a UEID just for that relying party by hashing a
proofed relying party ID with the main device UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per device. Each UEID/SUEID is used in a
different context, use case or system on the device. However, from the
view of the relying party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations" numbered="true" toc="default">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the device generating the attestation.
For example, many mobile phones prompt the user for permission when before sending location data.</t>
      </section>
    </section>
    <section anchor="securitycons" numbered="true" toc="default">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392" format="default"/> and Section 11
of <xref target="RFC7519" format="default"/> apply to EAT in its CWT and JWT form, respectively.  In addition, 
implementors should consider the following.</t>
      <section anchor="key-provisioning" numbered="true" toc="default">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manfuacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949" format="default"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material" numbered="true" toc="default">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="transport-security" numbered="true" toc="default">
        <name>Transport Security</name>
        <t>As stated in Section 8 of <xref target="RFC8392" format="default"/>, "The security of the CWT relies
upon on the protections offered by COSE".  Similar considerations
apply to EAT when sent as a CWT.  However, EAT introduces the concept
of a nonce to protect against replay.  Since an EAT may be created by
an entity that may not support the same type of transport security as
the consumer of the EAT, intermediaries may be required to bridge
communications between the entity and consumer.  As a result, it is
RECOMMENDED that both the consumer create a nonce, and the entity
leverage the nonce along with COSE mechanisms for encryption and/or
signing to create the EAT.</t>
        <t>Similar considerations apply to the use of EAT as a JWT.  Although the
security of a JWT leverages the JSON Web Encryption (JWE) and JSON Web
Signature (JWS) specifications, it is still recommended to make use of
the EAT nonce.</t>
      </section>
      <section anchor="multiple-eat-consumers" numbered="true" toc="default">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer should leverage a secure protocol (e.g.one that
uses transport-layer security, i.e. TLS),</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then transport security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner">
              <organization/>
            </author>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC7515" target="https://www.rfc-editor.org/info/rfc7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC8949" target="https://www.rfc-editor.org/info/rfc8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman">
              <organization/>
            </author>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7517" target="https://www.rfc-editor.org/info/rfc7517">
          <front>
            <title>JSON Web Key (JWK)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key.  This specification also defines a JWK Set JSON data structure that represents a set of JWKs.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries established by that specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7517"/>
          <seriesInfo name="DOI" value="10.17487/RFC7517"/>
        </reference>
        <reference anchor="RFC7519" target="https://www.rfc-editor.org/info/rfc7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC7800" target="https://www.rfc-editor.org/info/rfc7800">
          <front>
            <title>Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="April" year="2016"/>
            <abstract>
              <t>This specification describes how to declare in a JSON Web Token (JWT) that the presenter of the JWT possesses a particular proof-of- possession key and how the recipient can cryptographically confirm proof of possession of the key by the presenter.  Being able to prove possession of a key is also sometimes described as the presenter being a holder-of-key.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7800"/>
          <seriesInfo name="DOI" value="10.17487/RFC7800"/>
        </reference>
        <reference anchor="RFC8126" target="https://www.rfc-editor.org/info/rfc8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <author fullname="T. Narten" initials="T." surname="Narten">
              <organization/>
            </author>
            <date month="June" year="2017"/>
            <abstract>
              <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="RFC8152" target="https://www.rfc-editor.org/info/rfc8152">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad">
              <organization/>
            </author>
            <date month="July" year="2017"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8152"/>
          <seriesInfo name="DOI" value="10.17487/RFC8152"/>
        </reference>
        <reference anchor="RFC8392" target="https://www.rfc-editor.org/info/rfc8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610" target="https://www.rfc-editor.org/info/rfc8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz">
              <organization/>
            </author>
            <author fullname="C. Vigano" initials="C." surname="Vigano">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8747" target="https://www.rfc-editor.org/info/rfc8747">
          <front>
            <title>Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="L. Seitz" initials="L." surname="Seitz">
              <organization/>
            </author>
            <author fullname="G. Selander" initials="G." surname="Selander">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="March" year="2020"/>
            <abstract>
              <t>This specification describes how to declare in a CBOR Web Token (CWT) (which is defined by RFC 8392) that the presenter of the CWT possesses a particular proof-of-possession key. Being able to prove possession of a key is also sometimes described as being the holder-of-key. This specification provides equivalent functionality to "Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)" (RFC 7800) but using Concise Binary Object Representation (CBOR) and CWTs rather than JavaScript Object Notation (JSON) and JSON Web Tokens (JWTs).</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8747"/>
          <seriesInfo name="DOI" value="10.17487/RFC8747"/>
        </reference>
        <reference anchor="RFC3986" target="https://www.rfc-editor.org/info/rfc3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee">
              <organization/>
            </author>
            <author fullname="R. Fielding" initials="R." surname="Fielding">
              <organization/>
            </author>
            <author fullname="L. Masinter" initials="L." surname="Masinter">
              <organization/>
            </author>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RATS.Architecture" target="https://tools.ietf.org/html/draft-ietf-rats-architecture-08">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz">
              <organization/>
            </author>
            <date year="2020"/>
          </front>
        </reference>
        <reference anchor="COSE.X509.Draft" target="https://tools.ietf.org/html/draft-ietf-cose-x509-08">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header parameters for carrying and referencing X.509 certificates</title>
            <author fullname="J. Schaad">
              <organization/>
            </author>
            <date year="2020"/>
          </front>
        </reference>
        <reference anchor="CBOR.Cert.Draft" target="https://tools.ietf.org/html/draft-mattsson-cose-cbor-cert-compress-05">
          <front>
            <title>CBOR Encoding of X.509 Certificates (CBOR Certificates)</title>
            <author fullname="S. Raza">
              <organization/>
            </author>
            <date year="2020"/>
          </front>
        </reference>
        <reference anchor="WGS84" target="http://earth-info.nga.mil/GandG/publications/tr8350.2/wgs84fin.pdf">
          <front>
            <title>National Imagery and Mapping Agency Technical Report 8350.2, Third Edition</title>
            <author>
              <organization>National Imagery and Mapping Agency</organization>
            </author>
            <date year="2000"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="UCCS.Draft" target="https://tools.ietf.org/html/draft-birkholz-rats-uccs-01">
          <front>
            <title>A CBOR Tag for Unprotected CWT Claims Sets</title>
            <author fullname="Henk Birkholz">
              <organization/>
            </author>
            <date year="2020"/>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="FIDO.AROE" target="https://fidoalliance.org/specs/fido-uaf-v1.0-fd-20191115/fido-allowed-AROE-v1.0-fd-20191115.html">
          <front>
            <title>FIDO Authenticator Allowed Restricted Operating Environments List</title>
            <author>
              <organization>The FIDO Alliance</organization>
            </author>
            <date year="2019" month="November"/>
          </front>
        </reference>
        <reference anchor="EAN-13" target="https://www.gs1.org/standards/barcodes/ean-upc">
          <front>
            <title>International Article Number - EAN/UPC barcodes</title>
            <author>
              <organization>GS1</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID" target="https://tools.ietf.org/html/draft-ietf-sacm-coswid-16">
          <front>
            <title>Concise Software Identification Tags</title>
            <author>
              <organization/>
            </author>
            <date year="2020" month="November"/>
          </front>
        </reference>
        <reference anchor="OpenIDConnectCore" target="https://openid.net/specs/openid-connect-core-1_0.html">
          <front>
            <title>OpenID Connect Core 1.0 incorporating errata set 1</title>
            <author fullname="N. Sakimura">
              <organization/>
            </author>
            <author fullname="J. Bradley">
              <organization/>
            </author>
            <author fullname="M. Jones">
              <organization/>
            </author>
            <author fullname="B. de Medeiros">
              <organization/>
            </author>
            <author fullname="C. Mortimore">
              <organization/>
            </author>
            <date year="2014" month="November"/>
          </front>
        </reference>
        <reference anchor="CBOR-OID" target="https://www.ietf.org/archive/id/draft-ietf-cbor-tags-oid-08.txt">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="Carsten Bormann">
              <organization>Universität Bremen TZI</organization>
            </author>
            <date day="21" month="May" year="2021"/>
            <abstract>
              <t>   The Concise Binary Object Representation (CBOR, RFC 8949) is a data
   format whose design goals include the possibility of extremely small
   code size, fairly small message size, and extensibility without the
   need for version negotiation.

   The present document defines CBOR tags for object identifiers (OIDs).
   It is intended as the reference document for the IANA registration of
   the CBOR tags so defined.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cbor-tags-oid-08"/>
        </reference>
        <reference anchor="RATS-Architecture" target="https://www.ietf.org/archive/id/draft-ietf-rats-architecture-12.txt">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="23" month="April" year="2021"/>
            <abstract>
              <t>   In network protocol exchanges it is often useful for one end of a
   communication to know whether the other end is in an intended
   operating state.  This document provides an architectural overview of
   the entities involved that make such tests possible through the
   process of generating, conveying, and evaluating evidentiary claims.
   An attempt is made to provide for a model that is neutral toward
   processor architectures, the content of claims, and protocols.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-12"/>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122" target="https://www.rfc-editor.org/info/rfc4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach">
              <organization/>
            </author>
            <author fullname="M. Mealling" initials="M." surname="Mealling">
              <organization/>
            </author>
            <author fullname="R. Salz" initials="R." surname="Salz">
              <organization/>
            </author>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4949" target="https://www.rfc-editor.org/info/rfc4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey">
              <organization/>
            </author>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120" target="https://www.rfc-editor.org/info/rfc7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC                        Required", "IETF Review", or "Standards Action" policies apply.  This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation.  The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">
          <front>
            <title>IEEE Standard, "IEEE 802.1AR Secure Device Identifier"</title>
            <author>
              <organization/>
            </author>
            <date year="2009" month="December"/>
          </front>
        </reference>
        <reference anchor="ECMAScript" target="http://www.ecma-international.org/ecma-262/5.1/ECMA-262.pdf">
          <front>
            <title>Ecma International, "ECMAScript Language Specification, 5.1 Edition", ECMA Standard 262</title>
            <author>
              <organization/>
            </author>
            <date year="2011" month="June"/>
          </front>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/geolocation-API/#coordinates_interface">
          <front>
            <title>Geolocation API Specification 2nd Edition</title>
            <author>
              <organization>Worldwide Web Consortium</organization>
            </author>
            <date year="2018" month="January"/>
          </front>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://webstore.ansi.org/standards/ieee/ieee8022001r2007">
          <front>
            <title>IEEE Standard For Local And Metropolitan Area Networks Overview And Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2007"/>
          </front>
        </reference>
        <reference anchor="FIDO.Registry" target="https://fidoalliance.org/specs/common-specs/fido-registry-v2.1-ps-20191217.html">
          <front>
            <title>FIDO Registry of Predefined Values</title>
            <author>
              <organization>The FIDO Alliance</organization>
            </author>
            <date year="2019" month="December"/>
          </front>
        </reference>
        <reference anchor="FIPS-140" target="https://csrc.nist.gov/publications/detail/fips/140/2/final">
          <front>
            <title>Security Requirements for Cryptographic Modules</title>
            <author>
              <organization>National Institue of Standards</organization>
            </author>
            <date year="2001" month="May"/>
          </front>
        </reference>
        <reference anchor="Common.Criteria" target="https://www.commoncriteriaportal.org/cc/">
          <front>
            <title>Common Criteria for Information Technology Security Evaluation</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="April"/>
          </front>
        </reference>
      </references>
    </references>
    <section anchor="examples" numbered="true" toc="default">
      <name>Examples</name>
      <section anchor="very-simple-eat" numbered="true" toc="default">
        <name>Very Simple EAT</name>
        <t>This is shown in CBOR diagnostic form. Only the payload signed by COSE
is shown.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
{
    / issuer /           1: "joe",
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /            11: h'0198f50a4ff6c05861c8860d13a638ea',
    / secure-boot /     15: true,
    / debug-disable /   16: 3, / permanent-disable /
    / timestamp (iat) /  6: 1(1526542894)
}
]]></artwork>
      </section>
      <section anchor="example-with-submodules-nesting-and-security-levels" numbered="true" toc="default">
        <name>Example with Submodules, Nesting and Security Levels</name>
        <artwork name="" type="" align="left" alt=""><![CDATA[
{
    / nonce /                 10: h'948f8860d13a463e8e',
    / UEID /                  11: h'0198f50a4ff6c05861c8860d13a638ea',
    / secure-boot /           15: true,
    / debug-disable /         16: 3, / permanent-disable  /
    / timestamp (iat) /        6: 1(1526542894),
    / security-level /        14: 3, / secure restricted OS /
    / submods / 20: {
        / first submod, an Android Application /
        "Android App Foo" :  {
            / security-level /  14: 1 / unrestricted /
        },

        / 2nd submod, A nested EAT from a secure element /
        "Secure Element Eat" :
            / an embedded EAT, bytes of which are not shown /
            h'420123',

        / 3rd submod, information about Linux Android /
        "Linux Android": {
            / security-level /  14: 1 / unrestricted /
        }
    }
}
]]></artwork>
      </section>
    </section>
    <section anchor="ueid-design-rationale" numbered="true" toc="default">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability" numbered="true" toc="default">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion datadbase is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table align="center">
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and SW so this
simple approximation is used. See <xref target="BirthdayAttack" format="default"/>.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
    p = k^2 / 2n 
]]></artwork>
        <t>For this calculation:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
    p  Collision Probability
    n  Total population based on number of bits in UEID
    k  Population in a database
]]></artwork>
        <table align="center">
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's 
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of 
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
  t = 1 / ((k / 10) * p)
  
  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table align="center">
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid" numbered="true" toc="default">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122" format="default"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this 
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality 
random numbers, but do so by mapping into the overall UUID 
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>UUIDs seem to have been designed for scenarios where the implementor
does not have full control over the environment and uniqueness has to
be constructed from identifiers at hand. UEID takes the view that
hardware, software and/or manufacturing process directly implement
UEID in a simple and direct way. It takes the view that cryptographic
quality random number generators are readily available as they are
implemented in commonly used CPU hardware.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid" numbered="true" toc="default">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR" format="default"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR" format="default"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs are used with an open set of network protocols for authentication and such.
In these protocols the DevID secret is used to sign a nonce or similar to proof the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT defines network protocol for proving trustworthiness to a relying party, the very thing that is not defined in <xref target="IEEE.802.1AR" format="default"/>.
Nor does not give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat" numbered="true" toc="default">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT defines a network protocol and <xref target="IEEE.802.1AR" format="default"/> doesn't.
Vice versa, EAT doesn't define a an device implementation and DevID does.</t>
        <t>Hence, EAT can be the network protocol that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the Endorsement sent to the Verifier.</t>
        <t>In this case the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity" numbered="true" toc="default">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat" numbered="true" toc="default">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence" numbered="true" toc="default">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR" format="default"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR" format="default"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts" numbered="true" toc="default">
      <name>Changes from Previous Drafts</name>
      <t>The following is a list of known changes from the previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences.</t>
      <section anchor="from-draft-rats-eat-01" numbered="true" toc="default">
        <name>From draft-rats-eat-01</name>
        <ul spacing="normal">
          <li>Added UEID design rationale appendix</li>
        </ul>
      </section>
      <section anchor="from-draft-mandyam-rats-eat-00" numbered="true" toc="default">
        <name>From draft-mandyam-rats-eat-00</name>
        <t>This is a fairly large change in the orientation of the document, but
no new claims have been added.</t>
        <ul spacing="normal">
          <li>Separate information and data model using CDDL.</li>
          <li>Say an EAT is a CWT or JWT</li>
          <li>Use a map to structure the boot_state and location claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-01" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-01</name>
        <ul spacing="normal">
          <li>Clarifications and corrections for OEMID claim</li>
          <li>Minor spelling and other fixes</li>
          <li>Add the nonce claim, clarify jti claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-02" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-02</name>
        <ul spacing="normal">
          <li>Roll all EUIs back into one UEID type</li>
          <li>UEIDs can be one of three lengths, 128, 192 and 256.</li>
          <li>Added appendix justifying UEID design and size.</li>
          <li>Submods part now includes nested eat tokens so they can be named and
there can be more tha one of them</li>
          <li>Lots of fixes to the CDDL</li>
          <li>Added security considerations</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-03" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-03</name>
        <ul spacing="normal">
          <li>Split boot_state into secure-boot and debug-disable claims</li>
          <li>Debug disable is an enumerated type rather than Booleans</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-04" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-04</name>
        <ul spacing="normal">
          <li>Change IMEI-based UEIDs to be encoded as a 14-byte string</li>
          <li>CDDL cleaned up some more</li>
          <li>CDDL allows for JWTs and UCCSs</li>
          <li>CWT format submodules are byte string wrapped</li>
          <li>Allows for JWT nested in CWT and vice versa</li>
          <li>Allows UCCS (unsigned CWTs) and JWT unsecured tokens</li>
          <li>Clarify tag usage when nesting tokens</li>
          <li>Add section on key inclusion</li>
          <li>Add hardware version claims</li>
          <li>Collected CDDL is now filled in. Other CDDL corrections.</li>
          <li>Rename debug-disable to debug-status; clarify that it is not extensible</li>
          <li>Security level claim is not extensible</li>
          <li>Improve specification of location claim and added a location privacy section</li>
          <li>Add intended use claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-05" numbered="true" toc="default">
        <name>From draft-ietf-rats-05</name>
        <ul spacing="normal">
          <li>CDDL format issues resolved</li>
          <li>Corrected reference to Location Privacy section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-06" numbered="true" toc="default">
        <name>From draft-ietf-rats-06</name>
        <ul spacing="normal">
          <li>Added boot-seed claim</li>
          <li>Rework CBOR interoperability section</li>
          <li>Added profiles claim and section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-07" numbered="true" toc="default">
        <name>From draft-ietf-rats-07</name>
        <ul spacing="normal">
          <li>Filled in IANA and other sections for possible preassignment of claim keys for well understood claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-08" numbered="true" toc="default">
        <name>From draft-ietf-rats-08</name>
        <ul spacing="normal">
          <li>Change profile claim to be either a URL or an OID rather than a test string</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-09" numbered="true" toc="default">
        <name>From draft-ietf-rats-09</name>
        <ul spacing="normal">
          <li>Add SUEIDs</li>
          <li>Add appendix comparing IDevID to EAT</li>
          <li>Added section on use for Evidence and Attestation Results</li>
          <li>Fill in the key ID and endorsements identificaiton section</li>
          <li>Remove origination claim as it is replaced by key IDs and endorsements</li>
          <li>Added manifests and software evidence claims</li>
          <li>Add string labels non-claim labels for use with JSON (e.g. labels for members of location claim)</li>
          <li>EAN-13 HW versions are no longer a separate claim. Now they are folded in as a CoSWID version scheme.</li>
        </ul>
      </section>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAG+GvmAAA+y963Lj2JEu+h9PgVBP7JZskirVvarDM1stqbvVrtsuqVxz
YmKiAyRBCi4SoAFQKrpcE36NiTjn73kwP8nJ/DJzXQCwum3P7ImzYxwOWwUC
677ynl+Ox+OkabNy/lO2qsr8edrW2zwpNjX+atr79+49u3c/mWXt87Rp50ky
r2ZltqYX53W2aMdF3i7GddY24zxrx6uszZs2Se6Wz9O3p9dX6fuq/lCUy/T7
utpukq/SWVU2edlsm+fp17u8+ZoeNdvpumiaoirb3Ybavby4/i7ZFM+TNG2r
mb2Hf8zzTXtDTx7yv5uqbut80fg3mt06fjCr1pts1gZvbKf+WVnxo3oxy+dN
u1vl9lpbtPyP65s8vSjpH7v0tOVpZS2NMb2uPuRlenhxen2UZNNpnd8+T+kf
SVbnGQ2+bPO6zNvkwx2tV7EsefJZ8PlsWtU06Tkt1PP0/r2TB+OTe0m2bW+q
+nkyTouShv/9JH1JO7LL1jQ+Wezvi7qY32R18ENV0yL/r222ohmt0+t8dlNW
q2pZ5A2NYjbh2dL65DTTR0+ePEpfVnV+U22bPD2vi9ucV4em9jy9ysr0vMiX
Fa9FvqQxPk/PslWxqOqyyLCI27Kt6c13V6f0z80NjsnBr0/Sp4+epo8fnaRP
6JAc0E/5OitWz9O1DPF//qEtJn/Q8U3of2x6Lybpi205n66yee4m+CLb1nk5
y6OfMMWrfLateRdoQ6p6l754ceb7Wi1X/7NoVtTjuM75RIQdvZyk32arFa19
XleN6+plsdzmq85P/7WrGSzmw/vPngVrOZVR7l3MHyfp66/Pq7Ja3mz9av6Y
1/l6F//yy2d4/8mz9LusLumoVtvlTfq2yuZuhsEPmM6cT+e7k4fpkxdX0fzK
os3n6W/pAsyrdTDVhw/Tk/uP7qcPHj84eRpM9ffVHIPtTzUpq3pN1+c2Z6Lw
9ruz+ycnz/TPJ49OHumfT589DJ4+8X+6p0/v3bN3T+4/dn8+eej+fHTf/nzw
zP35+MR99uShtfvg2VO0wP/hJ0TtJqf17IZmPWvpLMtvbVYveUlv2nbTPD8+
bqtq1UyYaE5oP45v2vXquEtIs6CV8b2n0o7QpLf5umrziB69qSsiYPRqk4bd
4yujK/z3OF1sVys5Hj/k5Yf026L+cFOt/ohfjR7dv5fQv89eX11M/vnRvWeT
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
6ItdscMqFu8784twOu2UqtfrtP8Fb+BWBiCqAQA=

-->

</rfc>
