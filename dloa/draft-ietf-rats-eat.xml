<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.4.19 -->
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" obsoletes="" updates="" submissionType="IETF" xml:lang="en" tocInclude="true" tocDepth="4" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.9.1 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@island-resort.com</email>
      </address>
    </author>
    <author initials="M." surname="Ballesteros" fullname="Miguel Ballesteros">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 4299</phone>
        <email>mballest@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <date year="2021" month="July" day="09"/>
    <area>Internet</area>
    <workgroup>RATS Working Group</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides a signed (attested) set of
claims that describe state and characteristics of an entity, typically
a device like a phone or an IoT device.  These claims are used by a
relying party to determine how much it wishes to trust the entity.</t>
      <t>An EAT is either a CWT or JWT with some attestation-oriented 
claims. To a large degree, all this document does is extend
CWT and JWT.</t>
    </abstract>
    <note>
      <name>Contributing</name>
      <t>TBD</t>
    </note>
  </front>
  <middle>
    <section anchor="introduction" numbered="true" toc="default">
      <name>Introduction</name>
      <t>Remote device attestation is a fundamental service that allows a remote
device such as a mobile phone, an Internet-of-Things (IoT) device, or
other endpoint to prove itself to a relying party, a server or a
service.  This allows the relying party to know some characteristics
about the device and decide whether it trusts the device.</t>
      <t>Remote attestation is a fundamental service that can underlie other
protocols and services that need to know about the trustworthiness of
the device before proceeding. One good example is biometric
authentication where the biometric matching is done on the device. The
relying party needs to know that the device is one that is known to do
biometric matching correctly.  Another example is content protection
where the relying party wants to know the device will protect the
data.  This generalizes on to corporate enterprises that might want to
know that a device is trustworthy before allowing corporate data to be
accessed by it.</t>
      <t>The notion of attestation here is large and may include, but is not
limited to the following:</t>
      <ul spacing="normal">
        <li>Proof of the make and model of the device hardware (HW)</li>
        <li>Proof of the make and model of the device processor, particularly
for security-oriented chips</li>
        <li>Measurement of the software (SW) running on the device</li>
        <li>Configuration and state of the device</li>
        <li>Environmental characteristics of the device such as its GPS location</li>
      </ul>
      <section anchor="cwt-jwt-and-uccs" numbered="true" toc="default">
        <name>CWT, JWT and UCCS</name>
        <t>For flexibility and ease of imlpementation in a wide variety of environments, EATs can be either CBOR <xref target="RFC8949" format="default"/> or JSON <xref target="ECMAScript" format="default"/> format.
This specification simultaneously describes both formats.</t>
        <t>An EAT is either a CWT as defined in <xref target="RFC8392" format="default"/>, a UCCS as defined in <xref target="UCCS.Draft" format="default"/>, or a JWT as defined in <xref target="RFC7519" format="default"/>.
This specification extends those specifications with additional claims for attestation.</t>
        <t>The identification of a protocol element as an EAT, whether CBOR or JSON format, follows the general conventions used by CWT, JWT and UCCS.
Largely this depends on the protocol carrying the EAT.
In some cases it may be by content type (e.g., MIME type).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
      </section>
      <section anchor="cddl" numbered="true" toc="default">
        <name>CDDL</name>
        <t>This specification uses CDDL, <xref target="RFC8610" format="default"/>, as the primary formalism to
define each claim.  The implementor then interprets the CDDL to come
to either the CBOR <xref target="RFC8949" format="default"/> or JSON <xref target="ECMAScript" format="default"/>
representation. In the case of JSON, Appendix E of <xref target="RFC8610" format="default"/> is
followed. Additional rules are given in <xref target="jsoninterop" format="default"/> of this
document where Appendix E is insufficient.  (Note that this is not to
define a general means to translate between CBOR and JSON, but only to
define enough such that the claims defined in this document can be
rendered unambiguously in JSON).</t>
        <t>The CWT specification was authored before CDDL was available and did not use it.
This specification includes a CDDL definition of most of what is described in <xref target="RFC8392" format="default"/>.</t>
      </section>
      <section anchor="entity-overview" numbered="true" toc="default">
        <name>Entity Overview</name>
        <t>An "entity" can be any device or device subassembly ("submodule") that
can generate its own attestation in the form of an EAT.  The
attestation should be cryptographically verifiable by the EAT
consumer. An EAT at the device-level can be composed of several
submodule EAT's.</t>
        <t>Modern devices such as a mobile phone have many different execution
environments operating with different security levels. For example, it
is common for a mobile phone to have an "apps" environment that runs
an operating system (OS) that hosts a plethora of downloadable
apps. It may also have a TEE (Trusted Execution Environment) that is
distinct, isolated, and hosts security-oriented functionality like
biometric authentication. Additionally, it may have an eSE (embedded
Secure Element) - a high security chip with defenses against HW
attacks that is used to produce attestations.  This device attestation format
allows the attested data to be tagged at a security level from which
it originates.  In general, any discrete execution environment that
has an identifiable security level can be considered an entity.</t>
      </section>
      <section anchor="use-as-evidence-and-attestation-results" numbered="true" toc="default">
        <name>Use as Evidence and Attestation Results</name>
        <t>Here, normative reference is made to <xref target="RATS-Architecture" format="default"/>, particularly the definition of Evidence, the Verifier, Attestation Results and the Relying Party.
Per Figure 1 in <xref target="RATS-Architecture" format="default"/>, Evidence is a protocol message that goes from the Attester to the Verifier and Attestation Results a message that goes from the Verifier to the Relying Party.
EAT is defined such that it can be used to represent either Evidence, Attestation Results or both.
No claims defined here are considered exclusive to or are prohibited in either use.
It is useful to create EAT profiles as described in <xref target="profiles" format="default"/> for either use.</t>
        <t>It is useful to characterize the relationship of claims in Evidence to those in Attestation Results.</t>
        <t>Many claims in Evidence simply will pass through the Verifier to the Relying Party without modification.
They will be verified as authentic from the device by the Verifier just through normal verification of the Attester's signature.
They will be protected from modification when they are conveyed to the Relying Party by whatever means is used to protect Attestation Results. 
(The details of that protection are out of scope of this document.)</t>
        <t>Some claims in Evidence will be verified by the Verifier by comparison to Reference Values.
In this case the claims in Evidence will not likely be conveyed to the Relying Party.
Instead, some claim indicating they were checked may be added to the Attestation Results or it may be tacitly known that the Verifier always does this check.</t>
        <t>In some cases the Verifier may provide privacy-preserving functionality by stripping or modifying claims that do not posses sufficient privacy-preserving characteristics.</t>
      </section>
      <section anchor="eat-operating-models" numbered="true" toc="default">
        <name>EAT Operating Models</name>
        <t>TODO: Rewrite (or eliminate) this section in light of the RATS architecture draft.</t>
        <t>At least the following three participants exist in all EAT operating
models. Some operating models have additional participants.</t>
        <dl>
          <dt>
The Entity.  </dt>
          <dd>
            <t>This is the phone, the IoT device, the sensor, the sub-assembly or
such that the attestation provides information about.</t>
          </dd>
          <dt>
The Manufacturer.  </dt>
          <dd>
            <t>The company that made the entity.  This may be a chip vendor, a
circuit board module vendor or a vendor of finished consumer products.</t>
          </dd>
          <dt>
The Relying Party.  </dt>
          <dd>
            <t>The server, service or company that makes use of the information in
the EAT about the entity.</t>
          </dd>
        </dl>
        <t>In all operating models, the manufacturer provisions some secret
attestation key material (AKM) into the entity during manufacturing.
This might be during the manufacturer of a chip at a fabrication
facility (fab) or during final assembly of a consumer product or any
time in between. This attestation key material is used for signing
EATs.</t>
        <t>In all operating models, hardware and/or software on the entity create
an EAT of the format described in this document. The EAT is always
signed by the attestation key material provisioned by the
manufacturer.</t>
        <t>In all operating models, the relying party must end up knowing that
the signature on the EAT is valid and consistent with data from claims
in the EAT.  This can happen in many different ways. Here are some
examples.</t>
        <ul spacing="normal">
          <li>The EAT is transmitted to the relying party. The relying party gets
corresponding key material (e.g. a root certificate) from the
manufacturer. The relying party performs the verification.</li>
          <li>The EAT is transmitted to the relying party. The relying party
transmits the EAT to a verification service offered by the
manufacturer. The server returns the validated claims.</li>
          <li>The EAT is transmitted directly to a verification service, perhaps
operated by the manufacturer or perhaps by another party. It
verifies the EAT and makes the validated claims available to the
relying party. It may even modify the claims in some way and re-sign
the EAT (with a different signing key).</li>
        </ul>
        <t>All these operating models are supported and there is no preference
of one over the other. It is important to support this variety of
operating models to generally facilitate deployment and to allow for
some special scenarios. One special scenario has a validation service
that is monetized, most likely by the manufacturer.  In another, a
privacy proxy service processes the EAT before it is transmitted to
the relying party. In yet another, symmetric key material is used for
signing. In this case the manufacturer should perform the
verification, because any release of the key material would enable a
participant other than the entity to create valid signed EATs.</t>
      </section>
      <section anchor="what-is-not-standardized" numbered="true" toc="default">
        <name>What is Not Standardized</name>
        <t>The following is not standardized for EAT, just the same they are not
standardized for CWT or JWT.</t>
        <section anchor="transmission-protocol" numbered="true" toc="default">
          <name>Transmission Protocol</name>
          <t>EATs may be transmitted by any protocol the same as CWTs and JWTs. For
example, they might be added in extension fields of other protocols,
bundled into an HTTP header, or just transmitted as files. This
flexibility is intentional to allow broader adoption. This flexibility
is possible because EAT's are self-secured with signing (and possibly
additionally with encryption and anti-replay). The transmission
protocol is not required to fulfill any additional security
requirements.</t>
          <t>For certain devices, a direct connection may not exist between the
EAT-producing device and the Relying Party. In such cases, the EAT
should be protected against malicious access. The use of COSE and JOSE
allows for signing and encryption of the EAT. Therefore, even if the
EAT is conveyed through intermediaries between the device and Relying
Party, such intermediaries cannot easily modify the EAT payload or
alter the signature.</t>
        </section>
        <section anchor="signing-scheme" numbered="true" toc="default">
          <name>Signing Scheme</name>
          <t>The term "signing scheme" is used to refer to the system that includes
end-end process of establishing signing attestation key material in
the entity, signing the EAT, and verifying it. This might involve key
IDs and X.509 certificate chains or something similar but
different. The term "signing algorithm" refers just to the algorithm
ID in the COSE signing structure. No particular signing algorithm or
signing scheme is required by this standard.</t>
          <t>There are three main implementation issues driving this. First, secure
non-volatile storage space in the entity for the attestation key
material may be highly limited, perhaps to only a few hundred bits, on
some small IoT chips. Second, the factory cost of provisioning key
material in each chip or device may be high, with even millisecond
delays adding to the cost of a chip. Third, privacy-preserving signing
schemes like ECDAA (Elliptic Curve Direct Anonymous Attestation) are
complex and not suitable for all use cases.</t>
          <t>Over time to faciliate interoperability, some signing schemes may be
defined in EAT profiles or other documents either in the IETF or outside.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology" numbered="true" toc="default">
      <name>Terminology</name>
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in
BCP 14 <xref target="RFC2119" format="default"/> <xref target="RFC8174" format="default"/> when, and only when, they appear in all
capitals, as shown here.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519" format="default"/>, COSE
<xref target="RFC8152" format="default"/>, and CWT <xref target="RFC8392" format="default"/>.</t>
      <dl>
        <dt>
Claim Name.  </dt>
        <dd>
          <t>The human-readable name used to identify a claim.</t>
        </dd>
        <dt>
Claim Key.  </dt>
        <dd>
          <t>The CBOR map key or JSON name used to identify a claim.</t>
        </dd>
        <dt>
Claim Value.  </dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>
CWT Claims Set.  </dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
        <dt>
Attestation Key Material (AKM).  </dt>
        <dd>
          <t>The key material used to sign the EAT token. If it is done
symmetrically with HMAC, then this is a simple symmetric key.
If it is done with ECC, such as an IEEE DevID <xref target="IEEE.802.1AR" format="default"/>, then this
is the private part of the EC key pair. If ECDAA 
is used, (e.g., as used by Enhanced Privacy ID, i.e. EPID) then it is the key material 
needed for ECDAA.</t>
        </dd>
      </dl>
    </section>
    <section anchor="the-claims" numbered="true" toc="default">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation. It also
mentions several claims defined by CWT and JWT that are particularly
important for EAT.</t>
      <t>Note also:
* Any claim defined for CWT or JWT may be used in an EAT including 
  those in the CWT <xref target="IANA.CWT.Claims" format="default"/> and JWT IANA <xref target="IANA.JWT.Claims" format="default"/>
  claims registries.</t>
      <ul spacing="normal">
        <li>All claims are optional</li>
        <li>No claims are mandatory</li>
        <li>All claims that are not understood by implementations MUST be ignored</li>
      </ul>
      <t>There are no default values or meanings assigned to absent claims
other than they are not reported. The reason for a claim's absence may
be the implementation not supporting the claim, an inability to
determine its value, or a preference to report in a different way such
as a proprietary claim.</t>
      <t>CDDL along with text descriptions is used to define each claim
indepdent of encoding.  Each claim is defined as a CDDL group (the
group is a general aggregation and type definition feature of
CDDL). In the encoding section <xref target="encoding" format="default"/>, the CDDL groups turn into
CBOR map entries and JSON name/value pairs.</t>
      <t>Map labels are assigned both an integer and string value.
CBOR encoded tokens MUST use only integer labels.
JSON encoded tokens MUST use only string labels.</t>
      <t>TODO: add paragraph here about use for Attestation Evidence and for Results.</t>
      <section anchor="token-id-claim-cti-and-jti" numbered="true" toc="default">
        <name>Token ID Claim (cti and jti)</name>
        <t>CWT defines the "cti" claim. JWT defines the "jti" claim. These are
equivalent to each other in EAT and carry a unique token identifier as
they do in JWT and CWT.  They may be used to defend against re use of
the token but are distinct from the nonce that is used by the relying
party to guarantee freshness and defend against replay.</t>
      </section>
      <section anchor="timestamp-claim-iat" numbered="true" toc="default">
        <name>Timestamp claim (iat)</name>
        <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
        <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even 
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
        <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. No token may contain an iat claim in
float-point format. Any recipient of a token with a floating-point
format iat claim may consider it an error.  A 64-bit integer 
representation of epoch time can represent a range of +/- 500 billion
years, so the only point of a floating-point timestamp is to 
have precession greater than one second. This is not needed for EAT.</t>
      </section>
      <section anchor="nonce-claim-nonce" numbered="true" toc="default">
        <name>Nonce Claim (nonce)</name>
        <t>All EATs should have a nonce to prevent replay attacks. The nonce is
generated by the relying party, the end consumer of the token. It is
conveyed to the entity over whatever transport is in use before the
token is generated and then included in the token as the nonce claim.</t>
        <t>This documents the nonce claim for registration in the IANA CWT 
claims registry. This is equivalent to the JWT nonce claim that is
already registered.</t>
        <t>The nonce must be at least 8 bytes (64 bits) as fewer are unlikely
to be secure. A maximum of 64 bytes is set to limit the memory
a constrained implementation uses. This size range is not set
for the already-registered JWT nonce, but it should follow
this size recommendation when used in an EAT.</t>
        <t>Multiple nonces are allowed to accommodate multistage verification
and consumption.</t>
        <section anchor="nonce-cddl" numbered="true" toc="default">
          <name>nonce CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
nonce-type = bstr .size (8..64)

nonce-claim = (
    nonce => nonce-type / [ 2* nonce-type ]
)
]]></sourcecode>
        </section>
      </section>
      <section anchor="universal-entity-id-claim-ueid" numbered="true" toc="default">
        <name>Universal Entity ID Claim (ueid)</name>
        <t>UEID's identify individual manufactured entities / devices such as a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire device or a submodule or
subsystem. It does not identify types, models or classes of
devices. It is akin to a serial number, though it does not have to be
sequential.</t>
        <t>UEID's must be universally and globally unique across manufacturers
and countries. UEIDs must also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then relying parties receiving them will have
to track other characteristics of the device to keep devices distinct
between manufacturers).</t>
        <t>There are privacy considerations for UEID's. See <xref target="ueidprivacyconsiderations" format="default"/>.</t>
        <t>The UEID is permanent. It never change for a given
device / entity.</t>
        <t>UEIDs are variable length. All implementations MUST be able to receive
UEIDs that are 33 bytes long (1 type byte and 256 bits).  The
recommended maximum sent is also 33 bytes.</t>
        <t>When the entity constructs the UEID, the first byte is a type and the
following bytes the ID for that type. Several types are allowed to
accommodate different industries and different manufacturing processes
and to give options to avoid paying fees for certain types of
manufacturer registrations.</t>
        <t>Creation of new types requires a Standards Action <xref target="RFC8126" format="default"/>.</t>
        <table anchor="ueid-types-table" align="center">
          <name>UEID Composition Types</name>
          <thead>
            <tr>
              <th align="left">Type Byte</th>
              <th align="left">Type Name</th>
              <th align="left">Specification</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">0x01</td>
              <td align="left">RAND</td>
              <td align="left">This is a 128, 192 or 256 bit random number generated once and stored in the device. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the device and stored. It may not be smaller than 128 bits.</td>
            </tr>
            <tr>
              <td align="left">0x02</td>
              <td align="left">IEEE EUI</td>
              <td align="left">This makes use of the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-device identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while devices with multiple network interfaces may have multiple MAC addresses, there is only one UEID for a device) <xref target="IEEE.802-2001" format="default"/>, <xref target="OUI.Guide" format="default"/></td>
            </tr>
            <tr>
              <td align="left">0x03</td>
              <td align="left">IMEI</td>
              <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which SHALL be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded SHALL NOT include Luhn checksum or SVN information. <xref target="ThreeGPP.IMEI" format="default"/></td>
            </tr>
          </tbody>
        </table>
        <t>UEID's are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
        <t>The consumer (the relying party) of a UEID MUST treat a UEID as a
completely opaque string of bytes and not make any use of its internal
structure. For example, they should not use the OUI part of a type
0x02 UEID to identify the manufacturer of the device. Instead they
should use the oemid claim that is defined elsewhere. The reasons for
this are:</t>
        <ul spacing="normal">
          <li>UEIDs types may vary freely from one manufacturer to the next.</li>
          <li>New types of UEIDs may be created. For example, a type 0x07 UEID may
be created based on some other manufacturer registration scheme.</li>
          <li>Device manufacturers are allowed to change from one type of UEID to
another anytime they want. For example, they may find they can
optimize their manufacturing by switching from type 0x01 to type
0x02 or vice versa.  The main requirement on the manufacturer is
that UEIDs be universally unique.</li>
        </ul>
        <section anchor="ueid-cddl" numbered="true" toc="default">
          <name>ueid CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
ueid-type = bstr .size (7..33)

ueid-claim = (
     ueid => ueid-type
)
]]></sourcecode>
        </section>
      </section>
      <section anchor="semi-permanent-ueids-sueids" numbered="true" toc="default">
        <name>Semi-permanent UEIDs (SUEIDs)</name>
        <t>An SEUID is of the same format as a UEID, but it may change to a different value on device life-cycle events.
Examples of these events are change of ownership, factory reset and on-boarding into an IoT device management system.
A device may have both a UEID and SUEIDs, neither, one or the other.</t>
        <t>There may be multiple SUEIDs.
Each one has a text string label the purpose of which is to distinguish it from others in the token.
The label may name the purpose, application or type of the SUEID.
Typically, there will be few SUEDs so there is no need for a formal labeling mechanism like a registry.
The EAT profile may describe how SUEIDs should be labeled.
If there is only one SUEID, the claim remains a map and there still must be a label.
For example, the label for the SUEID used by FIDO Onboarding Protocol could simply be "FDO".</t>
        <t>There are privacy considerations for SUEID's. See <xref target="ueidprivacyconsiderations" format="default"/>.</t>
        <sourcecode type="CDDL"><![CDATA[
sueids-type = {
    + tstr => ueid-type
}

sueids-claim = (
     sueids => sueids-type
)
]]></sourcecode>
      </section>
      <section anchor="oemid" numbered="true" toc="default">
        <name>OEM Identification by IEEE (oemid)</name>
        <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE.RA" format="default"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide" format="default"/> and provides a lookup
services <xref target="OUI.Lookup" format="default"/></t>
        <t>Companies that have more than one of these IDs or MAC address blocks
should pick one and prefer that for all their devices.</t>
        <t>Commonly, these are expressed in Hexadecimal Representation
<xref target="IEEE.802-2001" format="default"/> also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48. For JSON encoded
tokens, this is further base64url encoded.</t>
        <section anchor="oemid-cddl" numbered="true" toc="default">
          <name>oemid CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
oemid-claim = (
    oemid => bstr
)
]]></sourcecode>
        </section>
      </section>
      <section anchor="hardware-version-claims-hardware-version-claims" numbered="true" toc="default">
        <name>Hardware Version Claims (hardware-version-claims)</name>
        <t>The hardware version can be claimed at three different levels, the chip, the circuit board and the final device assembly.
An EAT can include any combination these claims.</t>
        <t>The hardware version is a simple text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID" format="default"/>.</t>
        <t>The hardware version can also be given by a 13-digit <xref target="EAN-13" format="default"/>.
A new CoSWID version scheme is registered with IANA by this document in <xref target="registerversionscheme" format="default"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.</t>
        <sourcecode type="CDDL"><![CDATA[
hw-version-type = [
    version:  tstr,
    scheme:  $version-scheme
]

chip-version-claim = (
    chip-version => hw-version-type
)

board-version-claim = (
    board-version => hw-version-type
)

device-version-claim = (
    device-version => hw-version-type
)

hardware-version-claims = (
    ? chip-version-claim,
    ? board-version-claim,
    ? device-version-claim,
)

]]></sourcecode>
      </section>
      <section anchor="the-security-level-claim-security-level" numbered="true" toc="default">
        <name>The Security Level Claim (security-level)</name>
        <t>This claim characterizes the device/entity 
ability to defend against attacks aimed at capturing the signing
key, forging claims and at forging EATs. This is done by
defining four security levels as described below. This is similar
to the key protection types defined by the Fast Identity Online (FIDO) Alliance <xref target="FIDO.Registry" format="default"/>.</t>
        <t>These claims describe security environment and countermeasures
available on the end-entity / client device where the attestation key
reside and the claims originate.</t>
        <dl>
          <dt>
1 -- Unrestricted  </dt>
          <dd>
            <t>There is some expectation that implementor will
protect the attestation signing keys at this level. Otherwise
the EAT provides no meaningful security assurances.</t>
          </dd>
          <dt>
2-- Restricted  </dt>
          <dd>
            <t>Entities at this level should not be general-purpose
operating environments that host features such as app download
systems, web browsers and complex productivity applications.
It is akin to the Secure Restricted level (see below) without the
security orientation. Examples include a Wi-Fi subsystem,
an IoT camera, or sensor device.</t>
          </dd>
          <dt>
3 -- Secure Restricted  </dt>
          <dd>
            <t>Entities at this level must meet the criteria defined by FIDO Allowed
Restricted Operating Environments <xref target="FIDO.AROE" format="default"/>. Examples include TEE's and 
schemes using virtualization-based security. Like the FIDO security goal,
security at this level is aimed at defending well against large-scale
network / remote attacks against the device.</t>
          </dd>
          <dt>
4 -- Hardware  </dt>
          <dd>
            <t>Entities at this level must include substantial defense 
against physical or electrical attacks against the device itself.
It is assumed any potential attacker has captured the device and can 
disassemble it. Example include TPMs and Secure Elements.</t>
          </dd>
        </dl>
        <t>The entity should claim the highest security level it achieves and no higher.
This set is not extensible so as to provide a common interoperable description of security level to the relying party.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of security and its own proprietary claim as a refined indication.</t>
        <t>This claim is not intended as a replacement for a proper end-device
security certification schemes such as those based on FIPS 140 <xref target="FIPS-140" format="default"/> 
or those based on Common Criteria <xref target="Common.Criteria" format="default"/>. The 
claim made here is solely a self-claim made by the Entity Originator.</t>
        <section anchor="security-level-cddl" numbered="true" toc="default">
          <name>security-level CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
security-level-cbor-type = &(
    unrestricted: 1,
    restricted: 2,
    secure-restricted: 3,
    hardware: 4
)

security-level-json-type = 
    "unrestricted" /
    "restricted" /
    "secure-restricted" /
    "hardware"

security-level-claim = (
    security-level => security-level-cbor-type / security-level-json-type
)
]]></sourcecode>
        </section>
      </section>
      <section anchor="secure-boot-claim-secure-boot" numbered="true" toc="default">
        <name>Secure Boot Claim (secure-boot)</name>
        <t>The value of true indicates secure boot is enabled. Secure boot is
considered enabled when base software, the firmware and operating
system, are under control of the entity manufacturer identified in the
OEMID claim described in <xref target="oemid" format="default"/>. This may because the software is
in ROM or because it is cryptographically authenticated or some
combination of the two or other.</t>
        <section anchor="secure-boot-cddl" numbered="true" toc="default">
          <name>secure-boot CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
secure-boot-claim = (
    secure-boot => bool
)
]]></sourcecode>
        </section>
      </section>
      <section anchor="debug-status-claim-debug-status" numbered="true" toc="default">
        <name>Debug Status Claim (debug-status)</name>
        <t>This applies to system-wide or submodule-wide debug facilities of the
target device / submodule like JTAG and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
        <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-device
public keys.</t>
        <t>As with all claims, the absence of the debug level claim means
it is not reported. A conservative interpretation might assume
the Not Disabled state. It could however be that it is reported
in a proprietary claim.</t>
        <t>This claim is not extensible so as to provide a common interoperable description of debug status to the relying party.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
        <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
        <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The verifier or relying party receiving an EAT cannot
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
        <t>An individual target device / submodule may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
        <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the relying party can know the debug status
of the submodules since there is no inheritance.</t>
        <section anchor="enabled" numbered="true" toc="default">
          <name>Enabled</name>
          <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
        </section>
        <section anchor="disabled" numbered="true" toc="default">
          <name>Disabled</name>
          <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future, and it may also be
possible that they were enabled in the past after the
target device/sub-system booted/started, but they are currently disabled.</t>
        </section>
        <section anchor="disabled-since-boot" numbered="true" toc="default">
          <name>Disabled Since Boot</name>
          <t>This level indicates all debug facilities are currently disabled and
have been so since the target device/sub-system booted/started.</t>
        </section>
        <section anchor="disabled-permanently" numbered="true" toc="default">
          <name>Disabled Permanently</name>
          <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer cannot enable them. Only
the manufacturer indicated in the OEMID claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
        </section>
        <section anchor="disabled-fully-and-permanently" numbered="true" toc="default">
          <name>Disabled Fully and Permanently</name>
          <t>This level indicates that all debug capabilities for the target
device/sub-module are permanently disabled.</t>
        </section>
        <section anchor="debug-status-cddl" numbered="true" toc="default">
          <name>debug-status CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
debug-status-cbor-type = &(
    enabled: 0,
    disabled: 1,
    disabled-since-boot: 2,
    disabled-permanently: 3,
    disabled-fully-and-permanently: 4
)

debug-status-json-type = 
    "enabled" /
    "disabled" /
    "disabled-since-boot" /
    "disabled-permanently" /
    "disabled-fully-and-permanently"

debug-status-claim = (
    debug-status => debug-status-cbor-type / debug-status-json-type
)
]]></sourcecode>
        </section>
      </section>
      <section anchor="including-keys" numbered="true" toc="default">
        <name>Including Keys</name>
        <t>An EAT may include a cryptographic key such as a public key.
The signing of the EAT binds the key to all the other claims in the token.</t>
        <t>The purpose for inclusion of the key may vary by use case.
For example, the key may be included as part of an IoT device onboarding protocol.
When the FIDO protocol includes a pubic key in its attestation message, the key represents the binding of a user, device and relying party.
This document describes how claims containing keys should be defined for the various use cases.
It does not define specific claims for specific use cases.</t>
        <t>Keys in CBOR format tokens SHOULD be the COSE_Key format <xref target="RFC8152" format="default"/> and keys in JSON format tokens SHOULD be the JSON Web Key format <xref target="RFC7517" format="default"/>.
These two formats support many common key types.
Their use avoids the need to decode other serialization formats.
These two formats can be extended to support further key types through their IANA registries.</t>
        <t>The general confirmation claim format <xref target="RFC8747" format="default"/>, <xref target="RFC7800" format="default"/> may also be used.
It provides key encryption. 
It also allows for inclusion by reference through a key ID.
The confirmation claim format may employed in the definition of some new claim for a a particular use case.</t>
        <t>When the actual confirmation claim is included in an EAT, this document associates no use case semantics other than proof of posession.
Different EAT use cases may choose to associate further semantics.
The key in the confirmation claim MUST be protected the same as the key used to sign the EAT. 
That is, the same, equivalent or better hardware defenses, access controls, key generation and such must be used.</t>
      </section>
      <section anchor="the-location-claim-location" numbered="true" toc="default">
        <name>The Location Claim (location)</name>
        <t>The location claim gives the location of the device entity from which the attestation originates.
It is derived from the W3C Geolocation API <xref target="W3C.GeoLoc" format="default"/>.
The latitude, longitude, altitude and accuracy must conform to <xref target="WGS84" format="default"/>.
The altitude is in meters above the <xref target="WGS84" format="default"/> ellipsoid.
The two accuracy values are positive numbers in meters.
The heading is in degrees relative to true north.
If the device is stationary, the heading is NaN (floating-point not-a-number).
The speed is the horizontal component of the device velocity in meters per second.</t>
        <t>When encoding floating-point numbers half-precision should not be used.
It usually does not provide enough precision for a geographic location.
It is not a requirement that the receiver of an EAT implement half-precision, so the receiver may not be able to decode the location.</t>
        <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.</t>
        <t>The age data item can be used when the entity doesn't know what time
it is either because it doesn't have a clock or it isn't set. The
entity must still have a "ticker" that can measure a time
interval. The age is the interval between acquisition of the location
data and token creation.</t>
        <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations" format="default"/> below.</t>
        <section anchor="location-cddl" numbered="true" toc="default">
          <name>location CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude = 1 / "latitude"
longitude = 2 / "longitude"
altitude = 3 / "altitude"
accuracy = 4 / "accuracy"
altitude-accuracy = 5 / "altitude-accuracy"
heading = 6 / "heading"
speed = 7 / "speed"
timestamp = 8 / "timestamp"
age = 9 / "age"

location-claim = (
    location-label => location-type
)
]]></sourcecode>
        </section>
      </section>
      <section anchor="the-uptime-claim-uptime" numbered="true" toc="default">
        <name>The Uptime Claim (uptime)</name>
        <t>The "uptime" claim contains a value that represents the number of
seconds that have elapsed since the entity or submod was last booted.</t>
        <section anchor="uptime-cddl" numbered="true" toc="default">
          <name>uptime CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
uptime-claim = (
    uptime => uint
)
]]></sourcecode>
        </section>
      </section>
      <section anchor="the-boot-seed-claim-boot-seed" numbered="true" toc="default">
        <name>The Boot Seed Claim (boot-seed)</name>
        <t>The Boot Seed claim is a random value created at system boot time that will allow differentiation of reports from different boot sessions.
This value is usually public and not protected.
It is not the same as a seed for a random number generator which must be kept secret.</t>
        <sourcecode type="CDDL"><![CDATA[
boot-seed-claim = (
    boot-seed => bytes
)
]]></sourcecode>
      </section>
      <section anchor="the-intended-use-claim-intended-use" numbered="true" toc="default">
        <name>The Intended Use Claim (intended-use)</name>
        <t>EAT's may be used in the context of several different applications.  The intended-use
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it uses EAT.</t>
        <dl>
          <dt>
1 -- Generic  </dt>
          <dd>
            <t>Generic attestation describes an application where the EAT consumer
requres the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
          </dd>
          <dt>
2-- Registration  </dt>
          <dd>
            <t>Entities that are registering for a new service may be expected to 
provide an attestation as part of the registration process.  This intended-use
setting indicates that the attestation is not intended for any use but registration.</t>
          </dd>
          <dt>
3 -- Provisioning  </dt>
          <dd>
            <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess device security state of the entity prior to provisioning.</t>
          </dd>
          <dt>
4 -- Certificate Issuance (Certificate Signing Request)  </dt>
          <dd>
            <t>Certifying authorities (CA's) may require attestations prior to
the issuance of certificates related to keypairs hosted at the entity.  An
EAT may be used as part of the certificate signing request (CSR).</t>
          </dd>
          <dt>
5 -- Proof-of-Possession  </dt>
          <dd>
            <t>An EAT consumer may require an attestation as part of an accompanying 
proof-of-possession (PoP) appication. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has posession
of a key.  This kind of attestation may be neceesary to verify the
security state of the entity storing the private key used in a PoP application.</t>
          </dd>
        </dl>
        <section anchor="intended-use-cddl" numbered="true" toc="default">
          <name>intended-use CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
intended-use-cbor-type = &(
    generic: 1,
    registration: 2,
    provisioning: 3,
    csr: 4,
    pop:  5
)

intended-use-json-type = 
    "generic" /
    "registration" /
    "provisioning" /
    "csr" /
    "pop" 

intended-use-claim = (
    intended-use => intended-use-cbor-type / intended-use-json-type
)
]]></sourcecode>
        </section>
      </section>
      <section anchor="the-dloa-digital-letter-or-approval-claim-dloas" numbered="true" toc="default">
        <name>The DLOA (Digital Letter or Approval) Claim (dloas)</name>
        <t>A DLOA (Digital Letter of Approval) <xref target="DLOA" format="default"/> is a document that describes a certification that a device or entity has recevied.
Examples of certifications represented by a DLOA include those issues by Global Platform and those based on Common Criteria.
The DLOA is not specific to any particular certification type or those issues by any particular organization.</t>
        <t>This claim is typically issued by a Verifier, not an Attester.
When this claim is issued by a Verifier, it MUST be because the entity, device or submodule has received the certification in the DLOA.</t>
        <t>This claim can contain more than one DLOA.
If multiple DLOAs are present, it MUST be cause the entity, device or submodule received all of the certifications.</t>
        <t>DLOAs are retrived from a registrar for either a platform or an application.
The registrar is a URI from which to retrieve a DLOA.
Platform DLOAs have a platform label and Application DLOAs have a platform and application label.
To retreive a DLOA a URI is constructed from the registrar URI, platform label and possible an application label according to <xref target="DLOA" format="default"/></t>
        <sourcecode type="CDDL"><![CDATA[
dloas-claim = (
    dloas => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: ~uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]


]]></sourcecode>
      </section>
      <section anchor="profile-claim" numbered="true" toc="default">
        <name>The Profile Claim (profile)</name>
        <t>See <xref target="profiles" format="default"/> for the detailed description of a profile.</t>
        <t>A profile is identified by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the profile claim is to uniquely identify the profile even if it is a private profile.</t>
        <t>The OID is encoded in CBOR according to <xref target="CBOR-OID" format="default"/> and the URI according to <xref target="RFC8949" format="default"/>.
Both are unwrapped and thus not tags.
The OID is always absolute and never relative.
If the claims CBOR type is a text string it is a URI and if a byte string it is an OID.</t>
        <t>Note that this named "eat_profile" for JWT and is distinct from the already registered "profile" claim in the JWT claims registry.</t>
        <sourcecode type="CDDL"><![CDATA[
oid = #6.4000(bstr) ; TODO: fill this in with correct CDDL from OID RFC

profile-claim = (
    profile => ~uri / ~oid
)
]]></sourcecode>
      </section>
      <section anchor="the-software-manifests-claim-manifests" numbered="true" toc="default">
        <name>The Software Manifests Claim (manifests)</name>
        <t>This claim contains descriptions of software that is present on the device.
These manifests are installed on the device when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the device, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is that they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the Verifier and/or the Relying Party.</t>
        <t>In some cases these will be signed by the software manufacturer independent of any signing for the purpose of EAT attestation.
Manifest claims should include the manufacturer's signature (which will be signed over  by the attestation signature).
In other cases the attestation signature will be the only one.</t>
        <t>This claim allows multiple formats for the manifest.
For example the manifest may be a CBOR-format CoSWID, an XML-format SWID or other.
Identification of the type of manifest is always by a CBOR tag.
In many cases, for examples CoSWID, a tag will already be registered with IANA.
If not, a tag MUST be registered.
It can be in the first-come-first-served space which has minimal requirements for registration.</t>
        <t>The claim is an array of one or more manifests.
To facilitate hand off of the manifest to a decoding library, each manifest is contained in a byte string.
This occurs for CBOR-format manifests as well as non-CBOR format manifests.</t>
        <t>If a particular manifest type uses CBOR encoding, then the item in the array for it MUST be a byte string that contains a CBOR tag.
The EAT decoder must decode the byte string and then the CBOR within it to find the tag number to identify the type of manifest.
The contents of the byte string is then handed to the particular manifest processor for that type of manifest.
CoSWID and SUIT manifest are examples of this.</t>
        <t>If a particular manifest type does not use CBOR encoding, then the item in the array for it must be a CBOR tag that contains a byte string.
The EAT decoder uses the tag to identify the processor for that type of manifest.
The contents of the tag, the byte string, are handed to the manifest processor.
Note that a byte string is used to contain the manifest whether it is a text based format or not.
An example of this is an XML format ISO/IEC 19770 SWID.</t>
        <t>It is not possible to describe the above requirements in CDDL so the type for an individual manifest is any in the CDDL below.
The above text sets the encoding requirement.</t>
        <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests may be of multiple formats.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
        <t>When the <xref target="CoSWID" format="default"/> format is used, it MUST be a payload CoSWID, not an evidence CoSWID.</t>
        <sourcecode type="CDDL"><![CDATA[
manifests-claim = (
    manifests => manifests-type
)

manifests-type = [+ $manifest-formats]

; Must be a CoSWID payload type
$manifest-formats /= bytes .cbor concise-swid-tag

$manifest-formats /= bytes .cbor SUIT_Envelope_Tagged

]]></sourcecode>
      </section>
      <section anchor="the-software-evidence-claim-swevidence" numbered="true" toc="default">
        <name>The Software Evidence Claim {swevidence}</name>
        <t>This claim contains descriptions, lists, evidence or measurements of the software that exists on the device.
The defining characteristic of this claim is that its contents are created by processes on the device that inventory, measure or otherwise characterize the software on the device.
The contents of this claim do not originate from the software manufacturer.</t>
        <t>In most cases the contents of this claim are signed as part of attestation signing, but independent signing in addition to the attestation signing is not ruled out when a particular evidence format supports it.</t>
        <t>This claim uses the same mechanism for identification of the type of the swevidence as is used for the type of the manifest in the manifests claim.
It also uses the same byte string based mechanism for containing the claim and easing the hand off to a processing library.
See the discussion above in the manifests claim.</t>
        <t>When the <xref target="CoSWID" format="default"/> format is used, it MUST be evidence CoSWIDs, not payload CoSWIDS.</t>
        <sourcecode type="CDDL"><![CDATA[
swevidence-claim = (
    swevidence => swevidence-type
)

swevidence-type = [+ $swevidence-formats]

; Must be a CoSWID evidence type
$swevidence-formats /= bytes .cbor concise-swid-tag

]]></sourcecode>
      </section>
      <section anchor="the-submodules-part-of-a-token-submods" numbered="true" toc="default">
        <name>The Submodules Part of a Token (submods)</name>
        <t>Some devices are complex, having many subsystems or submodules.  A
mobile phone is a good example. It may have several connectivity
submodules for communications (e.g., Wi-Fi and cellular). It may have
subsystems for low-power audio and video playback. It may have one or
more security-oriented subsystems like a TEE or a Secure Element.</t>
        <t>The claims for each these can be grouped together in a submodule.</t>
        <t>The submods part of a token are in a single map/object with many entries, one
per submodule.  There is only one submods map in a token. It is
identified by its specific label. It is a peer to other claims, but it
is not called a claim because it is a container for a claim set rather
than an individual claim. This submods part of a token allows what
might be called recursion. It allows claim sets inside of claim sets
inside of claims sets...</t>
        <section anchor="two-types-of-submodules" numbered="true" toc="default">
          <name>Two Types of Submodules</name>
          <t>Each entry in the submod map is one of two types:</t>
          <ul spacing="normal">
            <li>A non-token submodule that is a map or object directly containing claims for the submodule.</li>
            <li>A nested EAT that is a fully formed, independently signed EAT token</li>
          </ul>
          <section anchor="non-token-submodules" numbered="true" toc="default">
            <name>Non-token Submodules</name>
            <t>This is simply a map or object containing claims about the submodule.</t>
            <t>It may contain claims that are the same as its surrounding token or superior submodules. 
For example, the top-level of the token may have a UEID, a submod may have a different UEID and a further subordinate submodule may also have a UEID.</t>
            <t>It is signed/encrypted along with the rest of the token and thus the claims are secured by the same Attester with the same signing key as the rest of the token.</t>
            <t>If a token is in CBOR format (a CWT or a UCCS), all non-token submodules must be CBOR format.
If a token in in JSON format (a JWT), all non-token submodules must be in JSON format.</t>
            <t>When decoding, this type of submodule is recognized from the other type by being a data item of type map for CBOR or type object for JSON.</t>
          </section>
          <section anchor="nested-eats" numbered="true" toc="default">
            <name>Nested EATs</name>
            <t>This type of submodule is a fully formed secured EAT as defined in this document except that it MUST NOT be a UCCS or an unsecured JWT.
A nested token that is one that is always secured using COSE or JOSE, usually by an independent Attester.
When the surrounding EAT is a CWT or secured JWT, the nested token becomes securely bound with the other claims in the surrounding token.</t>
            <t>It is allowed to have a CWT as a submodule in a JWT and vice versa, but this SHOULD be avoided unless necessary.</t>
            <section anchor="surrounding-eat-is-cbor-format" numbered="true" toc="default">
              <name>Surrounding EAT is CBOR format</name>
              <t>They type of an EAT nested in a CWT is determined by whether the CBOR type is a text string or a byte string.
If a text string, then it is a JWT.
If a byte string, then it is a CWT.</t>
              <t>A CWT nested in a CBOR-format token is always wrapped by a byte string for easier handling with standard CBOR decoders and token processing APIs that will typically take a byte buffer as input.</t>
              <t>Nested CWTs may be either a CWT CBOR tag or a CWT Protocol Message.
COSE layers in nested CWT EATs MUST be a COSE_Tagged_Message, never a COSE_Untagged_Message.
If a nested EAT has more than one level of COSE, for example one that is both encrypted and signed, a COSE_Tagged_message must be used at every level.</t>
            </section>
            <section anchor="surrounding-eat-is-json-format" numbered="true" toc="default">
              <name>Surrounding EAT is JSON format</name>
              <t>When a CWT is nested in a JWT, it must be as a 55799 tag in order to distinguish it from a nested JWT.</t>
              <t>When a nested EAT in a JWT is decoded, first remove the base64url encoding.
Next, check to see if it starts with the bytes 0xd9d9f7.
If so, then it is a CWT as a JWT will never start with these four bytes. 
If not if it is a JWT.</t>
              <t>Other than the 55799 tag requirement, tag usage for CWT's nested in a JSON format token follow the same rules as for CWTs nested in CBOR-format tokens.
It may be a CWT CBOR tag or a CWT Protocol Message and COSE_Tagged_Message MUST be used at all COSE layers.</t>
            </section>
          </section>
          <section anchor="unsecured-jwts-and-uccs-tokens-as-submodules" numbered="true" toc="default">
            <name>Unsecured JWTs and UCCS Tokens as Submodules</name>
            <t>To incorporate a UCCS token as a submodule, it MUST be as a non-token submodule. 
This can be accomplished inserting the content of the UCCS Tag into the submodule map.
The content of a UCCS tag is exactly a map of claims as required for a non-token submodule.
If the UCCS is not a UCCS tag, then it can just be inserted into the submodule map directly.</t>
            <t>The definition of a nested EAT type of submodule is that it is one that is secured (signed) by an Attester.
Since UCCS tokens are unsecured, they do not fulfill this definition and must be non-token submodules.</t>
            <t>To incorporate an Unsecured JWT as a submodule, the null-security JOSE wrapping should be removed.
The resulting claims set should be inserted as a non-token submodule.</t>
            <t>To incorporate a UCCS token in a surrounding JSON token, the UCCS token claims should be translated from CBOR to JSON.
To incorporate an Unsecured JWT into a surrounding CBOR-format token, the null-security JOSE should be removed and the claims translated from JSON to CBOR.</t>
          </section>
        </section>
        <section anchor="no-inheritance" numbered="true" toc="default">
          <name>No Inheritance</name>
          <t>The subordinate modules do not inherit anything from the containing
token.  The subordinate modules must explicitly include all of their
claims. This is the case even for claims like the nonce and age.</t>
          <t>This rule is in place for simplicity. It avoids complex inheritance
rules that might vary from one type of claim to another.</t>
        </section>
        <section anchor="security-levels" numbered="true" toc="default">
          <name>Security Levels</name>
          <t>The security level of the non-token subordinate modules should always
be less than or equal to that of the containing modules in the case of non-token
submodules. It makes no sense for a module of lesser security to be
signing claims of a module of higher security. An example of this is a
TEE signing claims made by the non-TEE parts (e.g. the high-level OS)
of the device.</t>
          <t>The opposite may be true for the nested tokens. They usually have
their own more secure key material. An example of this is an embedded
secure element.</t>
        </section>
        <section anchor="submodule-names" numbered="true" toc="default">
          <name>Submodule Names</name>
          <t>The label or name for each submodule in the submods map is a text
string naming the submodule. No submodules may have the same name.</t>
        </section>
        <section anchor="submods-cddl" numbered="true" toc="default">
          <name>submods CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
; The part of a token that contains all the submodules.  It is a peer
; with the claims in the token, but not a claim, only a map/object to
; hold all the submodules.

submods-part = (
    submods => submods-type
)

submods-type = { + submod-type }


; The type of a submodule which can either be a nested claim set or a
; nested separately signed token. Nested tokens are wrapped in a bstr
; or a tstr.

submod-type = (
    submod-name => eat-claim-set / nested-token
)


; When this is a bstr, the contents are an eat-token in CWT or UCCS
; format.  When this is a tstr, the contents are an eat-token in JWT
; format.

nested-token = bstr / tstr; 


; Each submodule has a unique text string name.

submod-name = tstr 


]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="keyid" numbered="true" toc="default">
      <name>Endorsements and Verification Keys</name>
      <t>The Verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture" format="default"/> describes what is called an Endorsement.
This is an input to the Verifier that is usually the basis of the trust placed in an EAT and the Attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain Reference Values to which EAT claims are compared as part of the verification process.
It may contain implied claims, those that are passed on to the Relying Party in Attestation Results.</t>
      <t>There is not yet any standard format(s) for an Endorsement.
One format that may be used for an Endorsement is an X.509 certificate.
Endorsement data like Reference Values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the Endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an Endorsement.</t>
      <t>For the components (Attester, Verifier, Relying Party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <section anchor="identification-methods" numbered="true" toc="default">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes Endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for Endorsements in other formats. If such an Endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id" numbered="true" toc="default">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC8152" format="default"/> and <xref target="RFC7515" format="default"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters" numbered="true" toc="default">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft" format="default"/> and JSON Web Siganture <xref target="RFC7515" format="default"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an Endorsement and thus carrying additional input to the Verifier. It may be just an X.509 certificate, not an Endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the Verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters" numbered="true" toc="default">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft" format="default"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification" numbered="true" toc="default">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the device and therefore can work well as a key identifier or Endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
      <section anchor="other-considerations" numbered="true" toc="default">
        <name>Other Considerations</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the Verifier may be configured with a root certificate or a master key by the Verifier system administrator.</t>
        <t>Often an X.509 certificate or an Endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints and an Endorsement might have Reference Values.
When this is the case, the key identifier must be either a protected header or in the payload such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515" format="default"/>.</t>
      </section>
    </section>
    <section anchor="profiles" numbered="true" toc="default">
      <name>Profiles</name>
      <t>This EAT specification does not gaurantee that implementations of it will interoperate.
The variability in this specification is necessary to accommodate the widely varying use cases.
An EAT profile narrows the specification for a specific use case.
An ideal EAT profile will gauarantee interoperability.</t>
      <t>The profile can be named in the token using the profile claim described in <xref target="profile-claim" format="default"/>.</t>
      <section anchor="format-of-a-profile-document" numbered="true" toc="default">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>In some cases CDDL may be created that replaces CDDL in this or other document to express some profile requirements.
For example, to require the altitude data item in the location claim, CDDL can be written that replicates the location claim with the altitude no longer optional.</t>
      </section>
      <section anchor="list-of-profile-issues" numbered="true" toc="default">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, UCCS, JWS, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both" numbered="true" toc="default">
          <name>Use of JSON, CBOR or both</name>
          <t>The profile should indicate whether the token format should be CBOR, JSON, both or even some other encoding.
If some other encoding, a specification for how the CDDL described here is serialized in that encoding is necessary.</t>
          <t>This should be addressed for the top-level token and for any nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding" numbered="true" toc="default">
          <name>CBOR Map and Array Encoding</name>
          <t>The profile should indicate whether definite-length arrays/maps, indefinite-length arrays/maps or both are allowed.
A good default is to allow only definite-length arrays/maps.</t>
          <t>An alternate is to allow both definite and indefinite-length arrays/maps.
The decoder should accept either.
Encoders that need to fit on very small hardware or be actually implement in hardware can use indefinite-length encoding.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
        </section>
        <section anchor="cbor-string-encoding" numbered="true" toc="default">
          <name>CBOR String Encoding</name>
          <t>The profile should indicate whether definite-length strings, indefinite-length strings or both are allowed.
A good default is to allow only definite-length strings.
As with map and array encoding, allowing indefinite-length strings can be beneficial for some smaller implementations.</t>
        </section>
        <section anchor="cbor-preferred-serialization" numbered="true" toc="default">
          <name>CBOR Preferred Serialization</name>
          <t>The profile should indicate whether encoders must use preferred serialization.
The profile should indicate whether decoders must accept non-preferred serialization.</t>
        </section>
        <section anchor="cosejose-protection" numbered="true" toc="default">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
EAT/CWT has the option to have no protection using UCCS and JOSE has a NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, CWT and UCCS are allowed by EAT.</t>
          <t>The profile should list the protections that must be supported by all decoders implementing the profile.
The encoders them must implement a subset of what is listed for the decoders, perhaps only one.</t>
          <t>Implementations may choose to sign or MAC before encryption so that the implementation layer doing the signing or MACing can be the smallest.
It is often easier to make smaller implementations more secure, perhaps even implementing in solely in hardware.
The key material for a signature or MAC is a private key, while for encryption it is likely to be a public key.
The key for encryption requires less protection.</t>
        </section>
        <section anchor="cosejose-algorithms" numbered="true" toc="default">
          <name>COSE/JOSE Algorithms</name>
          <t>The profile document should list the COSE algorithms that a Verifier must implement.
The Attester will select one of them. 
Since there is no negotiation, the Verifier should implement all algorithms listed in the profile.</t>
        </section>
        <section anchor="verification-key-identification" numbered="true" toc="default">
          <name>Verification Key Identification</name>
          <t>Section <xref target="keyid" format="default"/> describes a number of methods for identifying a verification key.
The profile document should specify one of these or one that is not described.
The ones described in this document are only roughly described.
The profile document should go into the full detail.</t>
        </section>
        <section anchor="endorsement-identification" numbered="true" toc="default">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as Verification Key Identification, the profile may wish to specify how Endorsements are to be identified.
However note that Endorsement Identification is optional, where as key identification is not.</t>
        </section>
        <section anchor="freshness" numbered="true" toc="default">
          <name>Freshness</name>
          <t>Just about every use case will require some means of knowing the EAT is recent enough and not a replay of an old token.
The profile should describe how freshness is achieved.
The section on Freshness in <xref target="RATS-Architecture" format="default"/> describes some of the possible solutions to achieve this.</t>
        </section>
        <section anchor="required-claims" numbered="true" toc="default">
          <name>Required Claims</name>
          <t>The profile can list claims whose absence results in Verification failure.</t>
        </section>
        <section anchor="prohibited-claims" numbered="true" toc="default">
          <name>Prohibited Claims</name>
          <t>The profile can list claims whose presence results in Verification failure.</t>
        </section>
        <section anchor="additional-claims" numbered="true" toc="default">
          <name>Additional Claims</name>
          <t>The profile may describe entirely new claims.
These claims can be required or optional.</t>
        </section>
        <section anchor="refined-claim-definition" numbered="true" toc="default">
          <name>Refined Claim Definition</name>
          <t>The profile may lock down optional aspects of individual claims.
For example, it may require altitude in the location claim, or it may require that HW Versions always be described using EAN-13.</t>
        </section>
        <section anchor="cbor-tags" numbered="true" toc="default">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.
Similarly, the profile should specify whether the token should be a UCCS tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unncessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="manifests-and-software-evidence-claims" numbered="true" toc="default">
          <name>Manifests and Software Evidence Claims</name>
          <t>The profile should specify which formats are allowed for the manifests and software evidence claims.
The profile may also go on to say which parts and options of these formats are used, allowed and prohibited.</t>
        </section>
      </section>
    </section>
    <section anchor="encoding" numbered="true" toc="default">
      <name>Encoding</name>
      <t>This makes use of the types defined in CDDL Appendix D, Standard Prelude.</t>
      <t>Some of the CDDL included here is for claims that are defined in CWT <xref target="RFC8392" format="default"/> or JWT <xref target="RFC7519" format="default"/> or are in the IANA CWT or JWT registries.
CDDL was not in use when these claims where defined.</t>
      <section anchor="common-cddl-types" numbered="true" toc="default">
        <name>Common CDDL Types</name>
        <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
        <t>Note that unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949" format="default"/>.
They are just text strings that contain a URI.</t>
        <sourcecode type="CDDL"><![CDATA[
string-or-uri = tstr 

time-int = #6.1(int)
]]></sourcecode>
      </section>
      <section anchor="cddl-for-cwt-defined-claims" numbered="true" toc="default">
        <name>CDDL for CWT-defined Claims</name>
        <t>This section provides CDDL for the claims defined in CWT. It is
non-normative as <xref target="RFC8392" format="default"/> is the authoritative definition of these
claims.</t>
        <t>Note that the subject, issue and audience claims may be a text string containing a URI per <xref target="RFC8392" format="default"/> and <xref target="RFC7519" format="default"/>.
These are never the URI tag defined in <xref target="RFC8949" format="default"/>.</t>
        <sourcecode type="CDDL"><![CDATA[
$$eat-extension //= (
    ? issuer => text,
    ? subject => text,
    ? audience => text,
    ? expiration => time,
    ? not-before => time,
    ? issued-at => time,
    ? cwt-id => bytes,
)

issuer = 1
subject = 2
audience = 3
expiration = 4
not-before = 5
issued-at = 6
cwt-id = 7

]]></sourcecode>
      </section>
      <section anchor="json" numbered="true" toc="default">
        <name>JSON</name>
        <section anchor="json-labels" numbered="true" toc="default">
          <name>JSON Labels</name>
          <sourcecode type="JSON"><![CDATA[
; The following are Claim Keys (labels) assigned for JSON-encoded tokens.

ueid /= "ueid"
sueids /= "sueids"
nonce /= "nonce"
oemid /= "oemid"
security-level /= "seclevel"
secure-boot /= "secboot"
debug-status /= "dbgstat"
location /= "location"
uptime /= "uptime"
profile /= "eat-profile"
intended-use /= "intuse"
boot-seed /= "bootseed"
submods /= "submods"
timestamp /= "timestamp"
manifests /= "manifests"
swevidence /= "swevidence"
dloas /= "dloas"

latitude /= "lat"
longitude /= "long"
altitude /= "alt"
accuracy /= "accry"
altitude-accuracy /= "alt-accry"
heading /= "heading"
speed /= "speed"
]]></sourcecode>
        </section>
        <section anchor="jsoninterop" numbered="true" toc="default">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per RFC 8610 Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- must be base64url encoded</li>
            <li>time -- must be encoded as NumericDate as described section 2 of <xref target="RFC7519" format="default"/>.</li>
            <li>string-or-uri -- must be encoded as StringOrURI as described section 2 of <xref target="RFC7519" format="default"/>.</li>
            <li>uri -- must be a URI <xref target="RFC3986" format="default"/>.</li>
            <li>oid -- encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1").</li>
          </ul>
        </section>
      </section>
      <section anchor="cbor" numbered="true" toc="default">
        <name>CBOR</name>
        <section anchor="cbor-interoperability" numbered="true" toc="default">
          <name>CBOR Interoperability</name>
          <t>CBOR allows data items to be serialized in more than one form.
If the sender uses a form that the receiver can't decode, there will not be interoperability.</t>
          <t>This specification gives no blanket requirements to narrow CBOR serialization for all uses of EAT.
This allows individual uses to tailor serialization to the environment.
It also may result in EAT implementations that don't interoperate.</t>
          <t>One way to guarantee interoperability is to clearly specify CBOR serialization in a profile document.
See <xref target="profiles" format="default"/> for a list of serialization issues that should be addressed.</t>
          <t>EAT will be commonly used where the device generating the attestation is constrained and the receiver/verifier of the attestation is a capacious server.
Following is a set of serialization requirements that work well for that use case and are guaranteed to interoperate.
Use of this serialization is recommended where possible, but not required.
An EAT profile may just reference the following section rather than spell out serialization details.</t>
          <section anchor="eat-constrained-device-serialization" numbered="true" toc="default">
            <name>EAT Constrained Device Serialization</name>
            <ul spacing="normal">
              <li>Preferred serialization described in section 4.1 of <xref target="RFC8949" format="default"/> is not required.
The EAT decoder must accept all forms of number serialization.
The EAT encoder may use any form it wishes.</li>
              <li>The EAT decoder must accept indefinite length arrays and maps as described in section 3.2.2 of <xref target="RFC8949" format="default"/>.
The EAT encoder may use indefinite length arrays and maps if it wishes.</li>
              <li>The EAT decoder must accept indefinite length strings as described in section 3.2.3 of <xref target="RFC8949" format="default"/>.
The EAT encoder may use indefinite length strings if it wishes.</li>
              <li>Sorting of maps by key is not required.
The EAT decoder must not rely on sorting.</li>
              <li>Deterministic encoding described in Section 4.2 of <xref target="RFC8949" format="default"/> is not required.</li>
              <li>Basic validity described in section 5.3.1 of <xref target="RFC8949" format="default"/> must be followed.
The EAT encoder must not send duplicate map keys/labels or invalid UTF-8 strings.</li>
            </ul>
          </section>
        </section>
      </section>
      <section anchor="collected-cddl" numbered="true" toc="default">
        <name>Collected CDDL</name>
        <sourcecode type="CDDL"><![CDATA[
; This is the top-level definition of the claims in EAT tokens.  To
; form an actual EAT Token, this claim set is enclosed in a COSE, JOSE
; or UCCS message.

eat-claim-set = {
    ? ueid-claim,
    ? sueids-claim,
    ? nonce-claim,
    ? oemid-claim,
    ? hardware-version-claims,
    ? security-level-claim,
    ? secure-boot-claim,
    ? debug-status-claim,
    ? location-claim,
    ? intended-use-claim,
    ? profile-claim,
    ? uptime-claim,
    ? manifests-claim,
    ? swevidence-claim,
    ? submods-part,
    * $$eat-extension,
}


; This is the top-level definition of an EAT Token.  It is a CWT, JWT
; or UCSS where the payload is an eat-claim-set. A JWT_Message is what
; is defined by JWT in RFC 7519. (RFC 7519 doesn't use CDDL so a there
; is no actual CDDL definition of JWT_Message).

eat-token = EAT_Tagged_Message / EAT_Untagged_Message / JWT_Message


; This is CBOR-format EAT token in the CWT or UCCS format that is a
; tag.  COSE_Tagged_message is defined in RFC 8152.  Tag 601 is
; proposed by the UCCS draft, but not yet assigned.

EAT_Tagged_Message = #6.61(COSE_Tagged_Message) / #6.601(eat-claim-set)


; This is a CBOR-format EAT token that is a CWT or UCSS that is not a
; tag COSE_Tagged_message and COSE_Untagged_Message are defined in RFC
; 8152.

EAT_Untagged_Message = COSE_Tagged_Message / COSE_Untagged_Message / UCCS_Untagged_Message


; This is an "unwrapped" UCCS tag. Unwrapping a tag means to use the
; definition of its content without the preceding type 6 tag
; integer. Since a UCCS is nothing but a tag for an unsecured CWT
; claim set, unwrapping reduces to a bare eat-claim-set.

UCCS_Untagged_Message = eat-claim-set


string-or-uri = tstr 

time-int = #6.1(int)

$$eat-extension //= (
    ? issuer => text,
    ? subject => text,
    ? audience => text,
    ? expiration => time,
    ? not-before => time,
    ? issued-at => time,
    ? cwt-id => bytes,
)

issuer = 1
subject = 2
audience = 3
expiration = 4
not-before = 5
issued-at = 6
cwt-id = 7


debug-status-cbor-type = &(
    enabled: 0,
    disabled: 1,
    disabled-since-boot: 2,
    disabled-permanently: 3,
    disabled-fully-and-permanently: 4
)

debug-status-json-type = 
    "enabled" /
    "disabled" /
    "disabled-since-boot" /
    "disabled-permanently" /
    "disabled-fully-and-permanently"

debug-status-claim = (
    debug-status => debug-status-cbor-type / debug-status-json-type
)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude = 1 / "latitude"
longitude = 2 / "longitude"
altitude = 3 / "altitude"
accuracy = 4 / "accuracy"
altitude-accuracy = 5 / "altitude-accuracy"
heading = 6 / "heading"
speed = 7 / "speed"
timestamp = 8 / "timestamp"
age = 9 / "age"

location-claim = (
    location-label => location-type
)

nonce-type = bstr .size (8..64)

nonce-claim = (
    nonce => nonce-type / [ 2* nonce-type ]
)

oemid-claim = (
    oemid => bstr
)

hw-version-type = [
    version:  tstr,
    scheme:  $version-scheme
]

chip-version-claim = (
    chip-version => hw-version-type
)

board-version-claim = (
    board-version => hw-version-type
)

device-version-claim = (
    device-version => hw-version-type
)

hardware-version-claims = (
    ? chip-version-claim,
    ? board-version-claim,
    ? device-version-claim,
)


secure-boot-claim = (
    secure-boot => bool
)

security-level-cbor-type = &(
    unrestricted: 1,
    restricted: 2,
    secure-restricted: 3,
    hardware: 4
)

security-level-json-type = 
    "unrestricted" /
    "restricted" /
    "secure-restricted" /
    "hardware"

security-level-claim = (
    security-level => security-level-cbor-type / security-level-json-type
)

; The part of a token that contains all the submodules.  It is a peer
; with the claims in the token, but not a claim, only a map/object to
; hold all the submodules.

submods-part = (
    submods => submods-type
)

submods-type = { + submod-type }


; The type of a submodule which can either be a nested claim set or a
; nested separately signed token. Nested tokens are wrapped in a bstr
; or a tstr.

submod-type = (
    submod-name => eat-claim-set / nested-token
)


; When this is a bstr, the contents are an eat-token in CWT or UCCS
; format.  When this is a tstr, the contents are an eat-token in JWT
; format.

nested-token = bstr / tstr; 


; Each submodule has a unique text string name.

submod-name = tstr 



ueid-type = bstr .size (7..33)

ueid-claim = (
     ueid => ueid-type
)

sueids-type = {
    + tstr => ueid-type
}

sueids-claim = (
     sueids => sueids-type
)

intended-use-cbor-type = &(
    generic: 1,
    registration: 2,
    provisioning: 3,
    csr: 4,
    pop:  5
)

intended-use-json-type = 
    "generic" /
    "registration" /
    "provisioning" /
    "csr" /
    "pop" 

intended-use-claim = (
    intended-use => intended-use-cbor-type / intended-use-json-type
)

oid = #6.4000(bstr) ; TODO: fill this in with correct CDDL from OID RFC

profile-claim = (
    profile => ~uri / ~oid
)

uptime-claim = (
    uptime => uint
)

manifests-claim = (
    manifests => manifests-type
)

manifests-type = [+ $manifest-formats]

; Must be a CoSWID payload type
$manifest-formats /= bytes .cbor concise-swid-tag

$manifest-formats /= bytes .cbor SUIT_Envelope_Tagged


swevidence-claim = (
    swevidence => swevidence-type
)

swevidence-type = [+ $swevidence-formats]

; Must be a CoSWID evidence type
$swevidence-formats /= bytes .cbor concise-swid-tag


dloas-claim = (
    dloas => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: ~uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]



; The following Claim Keys (labels) are pre-assigned by IANA.
; They are for CBOR-based tokens (CWT and UCCS).
; They are not expected to change in the final publication as an RFC.

nonce = 10
ueid = 11
oemid = 13
security-level = 14
secure-boot = 15
debug-status = 16
location-label = 17
profile = 18
submods = 20


boot-seed-claim = (
    boot-seed => bytes
)

; The following are Claim Keys (labels) assigned for JSON-encoded tokens.

ueid /= "ueid"
sueids /= "sueids"
nonce /= "nonce"
oemid /= "oemid"
security-level /= "seclevel"
secure-boot /= "secboot"
debug-status /= "dbgstat"
location /= "location"
uptime /= "uptime"
profile /= "eat-profile"
intended-use /= "intuse"
boot-seed /= "bootseed"
submods /= "submods"
timestamp /= "timestamp"
manifests /= "manifests"
swevidence /= "swevidence"
dloas /= "dloas"

latitude /= "lat"
longitude /= "long"
altitude /= "alt"
accuracy /= "accry"
altitude-accuracy /= "alt-accry"
heading /= "heading"
speed /= "speed"

]]></sourcecode>
      </section>
    </section>
    <section anchor="iana-considerations" numbered="true" toc="default">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-web-token-cwt-claims-registry" numbered="true" toc="default">
        <name>Reuse of CBOR Web Token (CWT) Claims Registry</name>
        <t>Claims defined for EAT are compatible with those of CWT
so the CWT Claims Registry is re used. No new IANA registry
is created. All EAT claims should be registered in the
CWT and JWT Claims Registries.</t>
      </section>
      <section anchor="claim-characteristics" numbered="true" toc="default">
        <name>Claim Characteristics</name>
        <t>The following is design guidance for creating new EAT claims, particularly those to be registered with IANA.</t>
        <t>Much of this guidance is generic and could also be considered when designing new CWT or JWT claims.</t>
        <section anchor="interoperability-and-relying-party-orientation" numbered="true" toc="default">
          <name>Interoperability and Relying Party Orientation</name>
          <t>It is a broad goal that EATs can be processed by relying parties in a general way regardless of the type, manufacturer or technology of the device from which they originate. 
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
          <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
        </section>
        <section anchor="operating-system-and-technology-neutral" numbered="true" toc="default">
          <name>Operating System and Technology Neutral</name>
          <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
          <t>Claims should not be defined such that they are specific to a SW environment or programming language.</t>
          <t>Claims should not be defined such that they are specific to a chip or particular hardware. 
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
          <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
        </section>
        <section anchor="security-level-neutral" numbered="true" toc="default">
          <name>Security Level Neutral</name>
          <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists. 
Secure Elements and smart cards are examples of this. 
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
          <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
        </section>
        <section anchor="reuse-of-extant-data-formats" numbered="true" toc="default">
          <name>Reuse of Extant Data Formats</name>
          <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
          <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON format for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
          <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
        </section>
        <section anchor="proprietary-claims" numbered="true" toc="default">
          <name>Proprietary Claims</name>
          <t>EAT allows the definition and use of proprietary claims.</t>
          <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer. 
This is a supported use case.</t>
          <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
        </section>
      </section>
      <section anchor="claims-registered-by-this-document" numbered="true" toc="default">
        <name>Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519" format="default"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392" format="default"/>. Each entry below is an addition to both registries (except
for the nonce claim which is already registered for JWT, but not registered for CWT).</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <section anchor="claims-for-early-assignment" numbered="true" toc="default">
          <name>Claims for Early Assignment</name>
          <t>RFC Editor: in the final publication this section should be combined with the following
section as it will no longer be necessary to distinguish claims with early assignment.
Also, the following paragraph should be removed.</t>
          <t>The claims in this section have been (requested for / given) early assignment according to <xref target="RFC7120" format="default"/>.
They have been assigned values and registered before final publication of this document.
While their semantics is not expected to change in final publication, it is possible that they will.
The JWT Claim Names and CWT Claim Keys are not expected to change.</t>
          <ul spacing="normal">
            <li>Claim Name: Nonce</li>
            <li>Claim Description: Nonce</li>
            <li>JWT Claim Name: "nonce" (already registered for JWT)</li>
            <li>Claim Key: 10</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <xref target="OpenIDConnectCore" format="default"/>, <strong>this document</strong></li>
          </ul>
          <t>&nbsp;</t>
          <ul spacing="normal">
            <li>Claim Name: UEID</li>
            <li>Claim Description: The Universal Entity ID</li>
            <li>JWT Claim Name: "ueid"</li>
            <li>CWT Claim Key: 11</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t>&nbsp;</t>
          <ul spacing="normal">
            <li>Claim Name: OEMID</li>
            <li>Claim Description: IEEE-based OEM ID</li>
            <li>JWT Claim Name: "oemid"</li>
            <li>Claim Key: 13</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t>&nbsp;</t>
          <ul spacing="normal">
            <li>Claim Name: Security Level</li>
            <li>Claim Description: Characterization of the security of an Attester or submodule</li>
            <li>JWT Claim Name: "seclevel"</li>
            <li>Claim Key: 14</li>
            <li>Claim Value Type(s): integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t>&nbsp;</t>
          <ul spacing="normal">
            <li>Claim Name: Secure Boot</li>
            <li>Claim Description: Indicate whether the boot was secure</li>
            <li>JWT Claim Name: "secboot"</li>
            <li>Claim Key: 15</li>
            <li>Claim Value Type(s): Boolean</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t>&nbsp;</t>
          <ul spacing="normal">
            <li>Claim Name: Debug Status</li>
            <li>Claim Description: Indicate status of debug facilities</li>
            <li>JWT Claim Name: "dbgstat"</li>
            <li>Claim Key: 16</li>
            <li>Claim Value Type(s): integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t>&nbsp;</t>
          <ul spacing="normal">
            <li>Claim Name: Location</li>
            <li>Claim Description: The geographic location</li>
            <li>JWT Claim Name: "location"</li>
            <li>Claim Key: 17</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t>&nbsp;</t>
          <ul spacing="normal">
            <li>Claim Name: Profile</li>
            <li>Claim Description: Indicates the EAT profile followed</li>
            <li>JWT Claim Name: "eat_profile"</li>
            <li>Claim Key: 18</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t>&nbsp;</t>
          <ul spacing="normal">
            <li>Claim Name: Submodules Section</li>
            <li>Claim Description: The section containing submodules (not actually a claim)</li>
            <li>JWT Claim Name: "submods"</li>
            <li>Claim Key: 20</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="to-be-assigned-claims" numbered="true" toc="default">
          <name>To be Assigned Claims</name>
          <t>TODO: add the rest of the claims in here</t>
        </section>
        <section anchor="registerversionscheme" numbered="true" toc="default">
          <name>Version Schemes Registered by this Document</name>
          <t>IANA is requested to register a new value in the "Software Tag Version Scheme Values" established by <xref target="CoSWID" format="default"/>.</t>
          <t>The new value is a version scheme a 13-digit European Article Number <xref target="EAN-13" format="default"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.
This version scheme is the ASCII text representation of EAN-13 digits, the same ones often printed with a bar code.
This version scheme must comply with the EAN allocation and assignment rules.
For example, this requires the manufacturer to obtain a manufacture code from GS1.</t>
          <table align="center">
            <thead>
              <tr>
                <th align="left">Index</th>
                <th align="left">Version Scheme Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">5</td>
                <td align="left">ean-13</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations" numbered="true" toc="default">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations" numbered="true" toc="default">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Any set of relying parties
that receives tokens that happen to be from a single device will be
able to know the tokens are all from the same device and be able to
track the device. Thus, in many usage situations UEID violates
governmental privacy regulation. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The device obtains explicit permission from the user of the device
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one relying party.</li>
          <li>The device authenticates the relying party and generates a derived
UEID/SUEID just for that particular relying party.  For example, the relying
party could prove their identity cryptographically to the device, then
the device generates a UEID just for that relying party by hashing a
proofed relying party ID with the main device UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per device. Each UEID/SUEID is used in a
different context, use case or system on the device. However, from the
view of the relying party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations" numbered="true" toc="default">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the device generating the attestation.
For example, many mobile phones prompt the user for permission when before sending location data.</t>
      </section>
    </section>
    <section anchor="securitycons" numbered="true" toc="default">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392" format="default"/> and Section 11
of <xref target="RFC7519" format="default"/> apply to EAT in its CWT and JWT form, respectively.  In addition, 
implementors should consider the following.</t>
      <section anchor="key-provisioning" numbered="true" toc="default">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manfuacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949" format="default"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material" numbered="true" toc="default">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="transport-security" numbered="true" toc="default">
        <name>Transport Security</name>
        <t>As stated in Section 8 of <xref target="RFC8392" format="default"/>, "The security of the CWT relies
upon on the protections offered by COSE".  Similar considerations
apply to EAT when sent as a CWT.  However, EAT introduces the concept
of a nonce to protect against replay.  Since an EAT may be created by
an entity that may not support the same type of transport security as
the consumer of the EAT, intermediaries may be required to bridge
communications between the entity and consumer.  As a result, it is
RECOMMENDED that both the consumer create a nonce, and the entity
leverage the nonce along with COSE mechanisms for encryption and/or
signing to create the EAT.</t>
        <t>Similar considerations apply to the use of EAT as a JWT.  Although the
security of a JWT leverages the JSON Web Encryption (JWE) and JSON Web
Signature (JWS) specifications, it is still recommended to make use of
the EAT nonce.</t>
      </section>
      <section anchor="multiple-eat-consumers" numbered="true" toc="default">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer should leverage a secure protocol (e.g.one that
uses transport-layer security, i.e. TLS),</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then transport security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner">
              <organization/>
            </author>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC7515" target="https://www.rfc-editor.org/info/rfc7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC8949" target="https://www.rfc-editor.org/info/rfc8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman">
              <organization/>
            </author>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7517" target="https://www.rfc-editor.org/info/rfc7517">
          <front>
            <title>JSON Web Key (JWK)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key.  This specification also defines a JWK Set JSON data structure that represents a set of JWKs.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries established by that specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7517"/>
          <seriesInfo name="DOI" value="10.17487/RFC7517"/>
        </reference>
        <reference anchor="RFC7519" target="https://www.rfc-editor.org/info/rfc7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC7800" target="https://www.rfc-editor.org/info/rfc7800">
          <front>
            <title>Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="April" year="2016"/>
            <abstract>
              <t>This specification describes how to declare in a JSON Web Token (JWT) that the presenter of the JWT possesses a particular proof-of- possession key and how the recipient can cryptographically confirm proof of possession of the key by the presenter.  Being able to prove possession of a key is also sometimes described as the presenter being a holder-of-key.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7800"/>
          <seriesInfo name="DOI" value="10.17487/RFC7800"/>
        </reference>
        <reference anchor="RFC8126" target="https://www.rfc-editor.org/info/rfc8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <author fullname="T. Narten" initials="T." surname="Narten">
              <organization/>
            </author>
            <date month="June" year="2017"/>
            <abstract>
              <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="RFC8152" target="https://www.rfc-editor.org/info/rfc8152">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad">
              <organization/>
            </author>
            <date month="July" year="2017"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8152"/>
          <seriesInfo name="DOI" value="10.17487/RFC8152"/>
        </reference>
        <reference anchor="RFC8392" target="https://www.rfc-editor.org/info/rfc8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610" target="https://www.rfc-editor.org/info/rfc8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz">
              <organization/>
            </author>
            <author fullname="C. Vigano" initials="C." surname="Vigano">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8747" target="https://www.rfc-editor.org/info/rfc8747">
          <front>
            <title>Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="L. Seitz" initials="L." surname="Seitz">
              <organization/>
            </author>
            <author fullname="G. Selander" initials="G." surname="Selander">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="March" year="2020"/>
            <abstract>
              <t>This specification describes how to declare in a CBOR Web Token (CWT) (which is defined by RFC 8392) that the presenter of the CWT possesses a particular proof-of-possession key. Being able to prove possession of a key is also sometimes described as being the holder-of-key. This specification provides equivalent functionality to "Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)" (RFC 7800) but using Concise Binary Object Representation (CBOR) and CWTs rather than JavaScript Object Notation (JSON) and JSON Web Tokens (JWTs).</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8747"/>
          <seriesInfo name="DOI" value="10.17487/RFC8747"/>
        </reference>
        <reference anchor="RFC3986" target="https://www.rfc-editor.org/info/rfc3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee">
              <organization/>
            </author>
            <author fullname="R. Fielding" initials="R." surname="Fielding">
              <organization/>
            </author>
            <author fullname="L. Masinter" initials="L." surname="Masinter">
              <organization/>
            </author>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RATS.Architecture" target="https://tools.ietf.org/html/draft-ietf-rats-architecture-08">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz">
              <organization/>
            </author>
            <date year="2020"/>
          </front>
        </reference>
        <reference anchor="COSE.X509.Draft" target="https://tools.ietf.org/html/draft-ietf-cose-x509-08">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header parameters for carrying and referencing X.509 certificates</title>
            <author fullname="J. Schaad">
              <organization/>
            </author>
            <date year="2020"/>
          </front>
        </reference>
        <reference anchor="CBOR.Cert.Draft" target="https://tools.ietf.org/html/draft-mattsson-cose-cbor-cert-compress-05">
          <front>
            <title>CBOR Encoding of X.509 Certificates (CBOR Certificates)</title>
            <author fullname="S. Raza">
              <organization/>
            </author>
            <date year="2020"/>
          </front>
        </reference>
        <reference anchor="WGS84" target="http://earth-info.nga.mil/GandG/publications/tr8350.2/wgs84fin.pdf">
          <front>
            <title>National Imagery and Mapping Agency Technical Report 8350.2, Third Edition</title>
            <author>
              <organization>National Imagery and Mapping Agency</organization>
            </author>
            <date year="2000"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="UCCS.Draft" target="https://tools.ietf.org/html/draft-birkholz-rats-uccs-01">
          <front>
            <title>A CBOR Tag for Unprotected CWT Claims Sets</title>
            <author fullname="Henk Birkholz">
              <organization/>
            </author>
            <date year="2020"/>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="FIDO.AROE" target="https://fidoalliance.org/specs/fido-uaf-v1.0-fd-20191115/fido-allowed-AROE-v1.0-fd-20191115.html">
          <front>
            <title>FIDO Authenticator Allowed Restricted Operating Environments List</title>
            <author>
              <organization>The FIDO Alliance</organization>
            </author>
            <date year="2019" month="November"/>
          </front>
        </reference>
        <reference anchor="EAN-13" target="https://www.gs1.org/standards/barcodes/ean-upc">
          <front>
            <title>International Article Number - EAN/UPC barcodes</title>
            <author>
              <organization>GS1</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID" target="https://tools.ietf.org/html/draft-ietf-sacm-coswid-16">
          <front>
            <title>Concise Software Identification Tags</title>
            <author>
              <organization/>
            </author>
            <date year="2020" month="November"/>
          </front>
        </reference>
        <reference anchor="OpenIDConnectCore" target="https://openid.net/specs/openid-connect-core-1_0.html">
          <front>
            <title>OpenID Connect Core 1.0 incorporating errata set 1</title>
            <author fullname="N. Sakimura">
              <organization/>
            </author>
            <author fullname="J. Bradley">
              <organization/>
            </author>
            <author fullname="M. Jones">
              <organization/>
            </author>
            <author fullname="B. de Medeiros">
              <organization/>
            </author>
            <author fullname="C. Mortimore">
              <organization/>
            </author>
            <date year="2014" month="November"/>
          </front>
        </reference>
        <reference anchor="CBOR-OID" target="https://www.ietf.org/archive/id/draft-ietf-cbor-tags-oid-08.txt">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="Carsten Bormann">
              <organization>Universität Bremen TZI</organization>
            </author>
            <date day="21" month="May" year="2021"/>
            <abstract>
              <t>   The Concise Binary Object Representation (CBOR, RFC 8949) is a data
   format whose design goals include the possibility of extremely small
   code size, fairly small message size, and extensibility without the
   need for version negotiation.

   The present document defines CBOR tags for object identifiers (OIDs).
   It is intended as the reference document for the IANA registration of
   the CBOR tags so defined.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cbor-tags-oid-08"/>
        </reference>
        <reference anchor="RATS-Architecture" target="https://www.ietf.org/archive/id/draft-ietf-rats-architecture-12.txt">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="23" month="April" year="2021"/>
            <abstract>
              <t>   In network protocol exchanges it is often useful for one end of a
   communication to know whether the other end is in an intended
   operating state.  This document provides an architectural overview of
   the entities involved that make such tests possible through the
   process of generating, conveying, and evaluating evidentiary claims.
   An attempt is made to provide for a model that is neutral toward
   processor architectures, the content of claims, and protocols.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-12"/>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122" target="https://www.rfc-editor.org/info/rfc4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach">
              <organization/>
            </author>
            <author fullname="M. Mealling" initials="M." surname="Mealling">
              <organization/>
            </author>
            <author fullname="R. Salz" initials="R." surname="Salz">
              <organization/>
            </author>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4949" target="https://www.rfc-editor.org/info/rfc4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey">
              <organization/>
            </author>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120" target="https://www.rfc-editor.org/info/rfc7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC                        Required", "IETF Review", or "Standards Action" policies apply.  This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation.  The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">
          <front>
            <title>IEEE Standard, "IEEE 802.1AR Secure Device Identifier"</title>
            <author>
              <organization/>
            </author>
            <date year="2009" month="December"/>
          </front>
        </reference>
        <reference anchor="ECMAScript" target="http://www.ecma-international.org/ecma-262/5.1/ECMA-262.pdf">
          <front>
            <title>Ecma International, "ECMAScript Language Specification, 5.1 Edition", ECMA Standard 262</title>
            <author>
              <organization/>
            </author>
            <date year="2011" month="June"/>
          </front>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/geolocation-API/#coordinates_interface">
          <front>
            <title>Geolocation API Specification 2nd Edition</title>
            <author>
              <organization>Worldwide Web Consortium</organization>
            </author>
            <date year="2018" month="January"/>
          </front>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://webstore.ansi.org/standards/ieee/ieee8022001r2007">
          <front>
            <title>IEEE Standard For Local And Metropolitan Area Networks Overview And Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2007"/>
          </front>
        </reference>
        <reference anchor="FIDO.Registry" target="https://fidoalliance.org/specs/common-specs/fido-registry-v2.1-ps-20191217.html">
          <front>
            <title>FIDO Registry of Predefined Values</title>
            <author>
              <organization>The FIDO Alliance</organization>
            </author>
            <date year="2019" month="December"/>
          </front>
        </reference>
        <reference anchor="FIPS-140" target="https://csrc.nist.gov/publications/detail/fips/140/2/final">
          <front>
            <title>Security Requirements for Cryptographic Modules</title>
            <author>
              <organization>National Institue of Standards</organization>
            </author>
            <date year="2001" month="May"/>
          </front>
        </reference>
        <reference anchor="Common.Criteria" target="https://www.commoncriteriaportal.org/cc/">
          <front>
            <title>Common Criteria for Information Technology Security Evaluation</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="April"/>
          </front>
        </reference>
      </references>
    </references>
    <section anchor="examples" numbered="true" toc="default">
      <name>Examples</name>
      <section anchor="very-simple-eat" numbered="true" toc="default">
        <name>Very Simple EAT</name>
        <t>This is shown in CBOR diagnostic form. Only the payload signed by COSE
is shown.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
{
    / issuer /           1: "joe",
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /            11: h'0198f50a4ff6c05861c8860d13a638ea',
    / secure-boot /     15: true,
    / debug-disable /   16: 3, / permanent-disable /
    / timestamp (iat) /  6: 1(1526542894)
}
]]></artwork>
      </section>
      <section anchor="example-with-submodules-nesting-and-security-levels" numbered="true" toc="default">
        <name>Example with Submodules, Nesting and Security Levels</name>
        <artwork name="" type="" align="left" alt=""><![CDATA[
{
    / nonce /                 10: h'948f8860d13a463e8e',
    / UEID /                  11: h'0198f50a4ff6c05861c8860d13a638ea',
    / secure-boot /           15: true,
    / debug-disable /         16: 3, / permanent-disable  /
    / timestamp (iat) /        6: 1(1526542894),
    / security-level /        14: 3, / secure restricted OS /
    / submods / 20: {
        / first submod, an Android Application /
        "Android App Foo" :  {
            / security-level /  14: 1 / unrestricted /
        },

        / 2nd submod, A nested EAT from a secure element /
        "Secure Element Eat" :
            / an embedded EAT, bytes of which are not shown /
            h'420123',

        / 3rd submod, information about Linux Android /
        "Linux Android": {
            / security-level /  14: 1 / unrestricted /
        }
    }
}
]]></artwork>
      </section>
    </section>
    <section anchor="ueid-design-rationale" numbered="true" toc="default">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability" numbered="true" toc="default">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion datadbase is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table align="center">
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and SW so this
simple approximation is used. See <xref target="BirthdayAttack" format="default"/>.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
    p = k^2 / 2n 
]]></artwork>
        <t>For this calculation:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
    p  Collision Probability
    n  Total population based on number of bits in UEID
    k  Population in a database
]]></artwork>
        <table align="center">
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's 
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of 
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
  t = 1 / ((k / 10) * p)
  
  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table align="center">
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid" numbered="true" toc="default">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122" format="default"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this 
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality 
random numbers, but do so by mapping into the overall UUID 
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>UUIDs seem to have been designed for scenarios where the implementor
does not have full control over the environment and uniqueness has to
be constructed from identifiers at hand. UEID takes the view that
hardware, software and/or manufacturing process directly implement
UEID in a simple and direct way. It takes the view that cryptographic
quality random number generators are readily available as they are
implemented in commonly used CPU hardware.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid" numbered="true" toc="default">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR" format="default"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR" format="default"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs are used with an open set of network protocols for authentication and such.
In these protocols the DevID secret is used to sign a nonce or similar to proof the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT defines network protocol for proving trustworthiness to a relying party, the very thing that is not defined in <xref target="IEEE.802.1AR" format="default"/>.
Nor does not give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat" numbered="true" toc="default">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT defines a network protocol and <xref target="IEEE.802.1AR" format="default"/> doesn't.
Vice versa, EAT doesn't define a an device implementation and DevID does.</t>
        <t>Hence, EAT can be the network protocol that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the Endorsement sent to the Verifier.</t>
        <t>In this case the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity" numbered="true" toc="default">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat" numbered="true" toc="default">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence" numbered="true" toc="default">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR" format="default"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR" format="default"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts" numbered="true" toc="default">
      <name>Changes from Previous Drafts</name>
      <t>The following is a list of known changes from the previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences.</t>
      <section anchor="from-draft-rats-eat-01" numbered="true" toc="default">
        <name>From draft-rats-eat-01</name>
        <ul spacing="normal">
          <li>Added UEID design rationale appendix</li>
        </ul>
      </section>
      <section anchor="from-draft-mandyam-rats-eat-00" numbered="true" toc="default">
        <name>From draft-mandyam-rats-eat-00</name>
        <t>This is a fairly large change in the orientation of the document, but
no new claims have been added.</t>
        <ul spacing="normal">
          <li>Separate information and data model using CDDL.</li>
          <li>Say an EAT is a CWT or JWT</li>
          <li>Use a map to structure the boot_state and location claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-01" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-01</name>
        <ul spacing="normal">
          <li>Clarifications and corrections for OEMID claim</li>
          <li>Minor spelling and other fixes</li>
          <li>Add the nonce claim, clarify jti claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-02" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-02</name>
        <ul spacing="normal">
          <li>Roll all EUIs back into one UEID type</li>
          <li>UEIDs can be one of three lengths, 128, 192 and 256.</li>
          <li>Added appendix justifying UEID design and size.</li>
          <li>Submods part now includes nested eat tokens so they can be named and
there can be more tha one of them</li>
          <li>Lots of fixes to the CDDL</li>
          <li>Added security considerations</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-03" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-03</name>
        <ul spacing="normal">
          <li>Split boot_state into secure-boot and debug-disable claims</li>
          <li>Debug disable is an enumerated type rather than Booleans</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-04" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-04</name>
        <ul spacing="normal">
          <li>Change IMEI-based UEIDs to be encoded as a 14-byte string</li>
          <li>CDDL cleaned up some more</li>
          <li>CDDL allows for JWTs and UCCSs</li>
          <li>CWT format submodules are byte string wrapped</li>
          <li>Allows for JWT nested in CWT and vice versa</li>
          <li>Allows UCCS (unsigned CWTs) and JWT unsecured tokens</li>
          <li>Clarify tag usage when nesting tokens</li>
          <li>Add section on key inclusion</li>
          <li>Add hardware version claims</li>
          <li>Collected CDDL is now filled in. Other CDDL corrections.</li>
          <li>Rename debug-disable to debug-status; clarify that it is not extensible</li>
          <li>Security level claim is not extensible</li>
          <li>Improve specification of location claim and added a location privacy section</li>
          <li>Add intended use claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-05" numbered="true" toc="default">
        <name>From draft-ietf-rats-05</name>
        <ul spacing="normal">
          <li>CDDL format issues resolved</li>
          <li>Corrected reference to Location Privacy section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-06" numbered="true" toc="default">
        <name>From draft-ietf-rats-06</name>
        <ul spacing="normal">
          <li>Added boot-seed claim</li>
          <li>Rework CBOR interoperability section</li>
          <li>Added profiles claim and section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-07" numbered="true" toc="default">
        <name>From draft-ietf-rats-07</name>
        <ul spacing="normal">
          <li>Filled in IANA and other sections for possible preassignment of claim keys for well understood claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-08" numbered="true" toc="default">
        <name>From draft-ietf-rats-08</name>
        <ul spacing="normal">
          <li>Change profile claim to be either a URL or an OID rather than a test string</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-09" numbered="true" toc="default">
        <name>From draft-ietf-rats-09</name>
        <ul spacing="normal">
          <li>Add SUEIDs</li>
          <li>Add appendix comparing IDevID to EAT</li>
          <li>Added section on use for Evidence and Attestation Results</li>
          <li>Fill in the key ID and endorsements identificaiton section</li>
          <li>Remove origination claim as it is replaced by key IDs and endorsements</li>
          <li>Added manifests and software evidence claims</li>
          <li>Add string labels non-claim labels for use with JSON (e.g. labels for members of location claim)</li>
          <li>EAN-13 HW versions are no longer a separate claim. Now they are folded in as a CoSWID version scheme.</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-10" numbered="true" toc="default">
        <name>From draft-ietf-rats-10</name>
        <ul spacing="normal">
          <li>Hardware version is made into an array of two rather than two claims</li>
        </ul>
      </section>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIADWf52AAA+y963Ib2ZEu+r+eooLt2E22AZDUXerweLNJdjfbkqgtUtac
cEwoCkABLAuogqsKpGBZE36NiTjn734wP8nO/DJzXaoAtXyZPXEm3NHRDVat
WveVK69fDofDpGmzcvouW1Rl/ixt63WeFKsav5r23tHR06N7ySRrn6VNO02S
aTUpsyUVnNbZrB0WeTsb1lnbDPOsHS6yNm/aJLmbP0tfn1xfpW+r+n1RztMf
6mq9Sr5KJ1XZ5GWzbp6lX2/y5mt61KzHy6JpiqpsNyuq9+L8+vtkVTxL0rSt
JlYOf0zzVXtDTx7w301Vt3U+a3yJZrOMH0yq5SqbtEGJ9dg/Kyt+VM8m+bRp
N4vcirVFy39c3+TpeUl/bNKTloeVtdTH9Lp6n5fp/vnJ9UGSjcd1fvsspT+S
rM4z6nzZ5nWZt8n7O5qvYl7y4LPg88m4qmnQU5qoZ+m9o+P7w+OjJFu3N1X9
LBmmRUnd/2GUvqAV2WRL6p9M9g9FXUxvsjp4UdU0yf9rnS1oRMv0Op/clNWi
mhd5Q72YjHi0ND85jfTh48cP0xdVnd9U6yZPz+riNufZoaE9S6+yMj0r8nnF
c5HPqY/P0tNsUcyquiwyTOK6bGsq+ebqhP5c3WCb7P3yOH3y8En66OFx+pg2
yR69ypdZsXiWLqWL//MPbTH6g/ZvRP+x4T0fpc/X5XS8yKa5G+DzbF3n5SSP
XmGIV/lkXfMq0IJU9SZ9/vzUt7WYL/5n0SyoxWGd844IG3oxSr/LFgua+7yu
GtfUi2K+zhedV/+1sxlM5oN7T58GczmWXu6czJ9G6eXXZ1VZzW/WfjZ/yut8
uYnffPkI7z1+mn6f1SVt1Wo9v0lfV9nUjTB4geFMeXe+OX6QPn5+FY2vLNp8
mv6GDsC0WgZDffAgPb738F56/9H94yfBUH9fTdHZ/lCTsqqXdHxucyYKr78/
vXd8/FR/Pn54/FB/Pnn6IHj62P90T58cHVnZ43uP3M/HD9zPh/fs5/2n7uej
Y/fZ4wdW7/2nT1AD/8NPiNqNTurJDY160tJelndtVs95Sm/adtU8Ozxsq2rR
jJhojmg9Dm/a5eKwS0izoJbh0ROpR2jS63xZtXlEj17VFREwKtqkYfP4yugK
/x6ms/ViIdvjx7x8n35X1O9vqsUf8dbo0b2jhP4+vbw6H/3rw6OnozPu2980
lEnV5MMPVEdnCHun312+Ti/Hv6d+pldGIcsp0dpJvVlhTPvcgQPuJ9GBOl1l
NXWbTmqT0jlKJ1ldb+wrIvg5Ew7++19H1Fw6yeu2mBUTvor2PjsNdHauJjcZ
Nnc0BVhR7ufolCr72yaBNmzbNFUpE8Fkf8g9G/L9Q4vVDI8ehtOCWaEpqKY8
kmqmgzkNBkPTwoXCRwefHd/VKH2d/THbOrq3P1w9edAfEw0pz+r2ZliUs2pU
zrPRslgc/kAz/cPhaj1ecLO0Qs1hWz+5//BodO/wbt48eTArytFqOgsH9BIF
s0V6sczmOdFtXq0X2WrF4zuZ05JthAhRlQva2Csi3qnUOSBSX9S0I6YF17Fl
jKBlX9BCNPSjo0QP68XJy5PR6dvr0ekiK5bN1mm4u7sbFVmZYV2zhu/yZV62
zeHkru0t3Nt8bIwBVXuQSr1hx9Ow59x+0LVZtmjyxPr1U6dfvT23s2e/155Z
1366unwZdu2nTtfivvU61+3dm9PTq/As/BWHYay0RgjcejKh7X8c9fVEJvI6
m+OMvylXdcWkjK4QmlHtNfECbdx16/nnaFuHuF3f0C33w6tXo4sX5xfbTzXv
xWwxuj9frTCSad68b6vVspqu6TI+vFrlEzmBOArRn2d5S7dZM8qa1YdfN+Gb
i+mvHt97Gm6d+7THf8jLvFZKTgeP/mhuihVTdSaQ3wZHJGpGGOr0lNiQ9GXe
3hGbje1/ndfLgs5E8236cr0c5zWdhUGaTadMcoxmFlPaLq6qXcfrPs1RdH6O
n6Y8f99fnF2OTl5fnj8Lx8JP0xOqhaumimkNTxaL6o7W7zXdVXWBpbxcYbDU
j/Pytqgr2bjp86Jpty7ErJhWxADRbp/kWAme0QaPh+tsNrw9Hh0NZ9Mhd+74
+PihvMmk4SF3sldkxNty15iZ55eRaKPBBLysbnOeUT8T5ycvh8f3t28hPqTz
5lg6zfJVVk+bwzHd7cQxNURky+F6NQlnUEQHo2knROQni1xXkfpHjR2+eXWa
WhW7hvDD1XFn1XCjV1dvL87+pou8ySZLvsTuiunw+FFE+iq6d4kFvqpm7R3J
P+lFtLH4MDfbJ1BOIu2G8uKMailpq/NW3t6/iooV0xFJVbr88oD6hA/p/8Qn
Hb878iur/ZP6U21ADgvtBmKc6RM647IT85p+ZGmTt+nxtt4+4Ul8sI2We6Lz
kjiJ7H2xXNfZNi7juzqbLvJN7xUJKD8RU9z0Xnw3Sqd5+iKf5oWIJ/Hr0xEL
IG2xpBElyqoML2l904vh2UjYL2Y4WlqAYVVME8eiDiMW1RfvMZ5c7dnzy5Pt
SzJfVCSYrEjcJ2K9xLa5W/GCtLQBDterBUkMzSHN28PD43uHP7w6fXdWzAui
qc9zYl3ry9nJiuj7bbZ4x8ezyzpo2VQKMzNkxXccx4dJkjDDEksJD47vGQv/
IBANju8RN0+/6Y5ob6bZhpjpbPI+Imb2iiV3erd1CvJydFe8L1b5tJCbmP86
tC/fyZejrbf8+fn56MnRvdHxyeuoWX6RXimxGKR7+FsLihhM4mZ+W0z8Scvr
vaCJs3xic3L0dBtT4ygRrXouFJVYt2nT0mrZu0NtcciVyJliWnf64uRqUher
Nury+WSZxZSL+u3LklhfztfEncW31yB9ODo29m5vgMrdwNN7j+4FY0p/Wpc5
L/LxLi4tpz4Qvxr0AQPDY6rrkNo65Bb4D2w1Zn/vn45+yKvn1SQaDj1aVEq9
Tl5ddO7ce2XMk0oHf8rKdUbcJ3Xxyc6r4O4++nT9+nDumxhSE4dfTaqqJqaf
2fl3GMUsm2wT30Dd31b1YkqUOAdfR5SNdR7Fegly+uZi9MOa3sVD4ieLgqiM
MFZEr+lAnX+gkzqlG5nE9D+sw/2U7p+/uTgYpJf1PCuLP+qMLjbbSl6iJLMU
p6xVKzcpkdv904uzg2B+TtbzddPy9DzeOj1b9qQRkmm2POSHQ3+D+l93+fhw
Wk3Wwvu2a2I5Cjpih/m6sFXmGXleVe/Xq/45e53PietQ1usEMw1Vn+ent/a2
zue8LKMtvXaPiJoOuXckMB3eFvkdDtFXtTRY5M1OovD65Ev7+aUzSWRzup4Q
bW/ymglHYwM4pGOff/BX5g4axUTgeDeRSr+nLUWHiBkWFr7ytq5W1YKoN/W1
zjPjTZv08pY7kN+hXE9R0Tsy+bih9cxHWdkUHR6Kx4b/UPe4dzX953Es6D12
fKrO3qbPq9obPg2varppiRDSefhttljn25d+BzPKaio6ywFnqiu9Gd4SIR2u
GuE97x0//pt5z4CwM++ZYnivrobHD46ikTld6ev8D+uizoW95nN/yrqVal5n
q5tiQtwDJJmtw5w09WRU0gBG8+o2FvqnEG5okKvmkJo+vMe3R7ZzRF5ALxvq
4BqUx7ZOeApeZEw+IRGCV+UJHZ3SQEh+yaIByrvU3mFoF3bzM8tpas2Nn4tz
YhzWXtTZRp5lDSdaq4p/oESTw5CUrepiIZQsGQ6HaTbmkzlpk+Sk/BlbQcoM
DFHiJs1gF6Ctti92gXx6AOazmiUTkXLbm6wl/q+h/ozzlCvLQWQnNxm3Rl2k
6Zw0PJt0znK0O0jbzYrlxMUmyehjcAmL4j19KZpXWhIufVFd69sRi8I5XQfa
KjPw64b6NSa+J6nzBXRsKxJKN2lb0UctZMs8vanu0uV6cpMWbXpXNFQHv4e1
iLqea4dGMikn12nRpHlBL6h9yPLUkZ/of3f0LG2qZR7aR4ZE3eh76oVOxogm
kb5b8KJRH+Yku9ONs1hQS1Sv0X/6Qb3ghnCvJdwMzxjrUmSpyqrN39F9SQR4
vGa+P0muvztL5OWymBJ/niRfMSsjFJN3S6LqVp3N0IxT8DrO1rSTuXna4kpf
Ze0ggHKJGhUkWkHDk5bx82U1Lki4w8IMsCxqNxpWs+H1DXWvSfdpqQ607QFN
WlJhDml4q4r4BJ5z3lM5LUOTL2b8NzcYLNuA9xr1i3lomvxE+4iF5wFIL3nJ
eqv9vqRFxuJ0Nl2Sjau1rLNNC83zlNgk4knubnL0kTYGtkMTlBu56fzyeZzQ
zNC7vF4UtH+56oTVQtWEBFa0a7eaFC9z2jfWed9PdIVuIdoxxAXxsUmC7o/z
GcuFK1aj56x8HaWXtMnnVTWl3ZQtV7RO1MtxQZPBagwY61TJwSOgMdc52nFF
UiJGE17EFFuUz14ZzgSfu84B4643ru8YTdBHqoZrwWP6zWVKnMkq2dIoCbc1
3a2LDS30Sam7xo9EmatUFWy80f0Y4l7dZXx9+F65Dt0VdAK1An6eEH3MbF/N
odJaFH/MGwy8Sk3cBm3Ia6Kija3ZspjftGiICiZ+9Fkwdr+AG1su7F0drFbN
XeDGxnmSTWhPKCkrWtp5fLfSTPB6MdEMNiBGTm0IgeE9taTLqCgni/WUjh3R
Cn5L3yaLYgmLFtM6qm5WaRdYmPyGFXZUM/3L75bZe62rIt7bnuqA6DxNoS3Z
//HtwV/3KTZpQyz/AAtUTNbU7QWYQb4IG73xPBGlDbFquI0XedashR+wOhvT
2uxfvT1I63UJS0y0U/lLopmzYr5WBhSHDhdS1DMuGGj06BxvuauCgRglJNKV
/vDqKjWJiOjxV1/xJTHAFcGtsdY5SZjPnC3yDwXRTb5l+Q0NCd0olosVRqYk
hXqZQkS6zWgeWnB4eaBuHPCt1IC40PWqVxO0zx8/qhnx0yfcUqw///jRi7P0
WFiNUYKdHul36VpfrhfE3eTVuiF5yS5woh10BvXDZve1SNNhTCgNQbpy/+m9
T5+YjPMs9Ep4hTwXYhIvs9aviI2gnz5t7bXcmHwaK5rO6F0jd3Q2FZmXV1VY
Bd5swSHSAxarlXHQUiPXab6QzcfXH8Y/cLcFpt6mW6ZpoMdLLhAlKEy5brkJ
7plxKr29Mkqe81GmBRAOIV9heLqvXX+cEZGfUndGyUWpF17GxImuMCYEtEGo
ESOZ7KCS7uej+WiQvrh4cY4HB/hUyGz32/ZGLOhr2akYKSvleCWU8JRVOis+
0GCWxLqSxN0s02xSVw3uZ3yISkdyMs7OnifbVnHN7fLbge6cR8dH2DmNDrtY
so4Cs7vgNojYyiahY0RnEQsrHCGdp5UsFq0JX3VpIUQ71/ucmxGqvswT+r/u
Yrz6slNElx/bQO3Ijoj9wecTPdH8yYCVfrR0xYf0nJ8Fw6JpS2R/5NNReuK3
Z81CDRjZeXGLjtNnv2+qEiOoVtyhGfZF4jhHufuCtmhui7JZz2humYrSpOy/
ZLZFL+Wi0QshmMLMbdFlThKrsMP0g92haBu0dzl1BnMDphSj45ulKnmb+pUo
sVlAHB0LoEcuONEx5ytkjGaU+SQqsC6z5ZgIthAhKs7NHegRZToTb5w7PpAQ
3fg8yeWKBcaLWxL3svFCmbxiinHzniy2k0C9N5mpQyXodWHkYFk1uH3ulI8x
CtkleLLXVZ4yxQHo5p7IFntGvFnlpFcK7TR3uYwzuv2XYxr//h67l0Ha3TvA
pCb8qSxXC945ZWYq4klLveDrpYpYTB9wNpKwXHNTrRc8aekkFK6hLKNO06xg
6sYbozEJe7/RqtW0aeUOiNi84SK/zRc2NPYTqJjIURcaekG7K3Fj4Y+/Jtko
TRIS5Uly0CqaHTIGMR23zFvwdBUzeEy0RPmJX8CtG96OaeVsdKD+vryxFyn6
Sa3zpayM5YBmMgFzCfkcF0TcAzoT6ASN7i9//n+z1ar5y5//v/Beli1PfAjJ
GGXQi2ZDMvIy3b+8kgUk+ZMlC7pbFjnv24xnaEqLyEYHnvGEKyeaIlQ4WzTW
cnp9fp7uXzM3SfN6bsMPOZcDY7KTKTMu5YSuoqKp+CBPRdMprfdZLRJiJkKG
MEUkeQe8eSwzhDRrsRnYfWHTk19RL1ndM53m00T1/udCkg/SIY3jpmAyYcvB
TJ6uVT7LS74JsnlGNKxNf3ybiCGiccIDLk6RHUnOjaSxxjj4LQKv3MtJIDOa
9iJgvPlum9MT8O/xdklndbWkk19MbhIaL03bXHTe1OaFHcjFQE50QXQhZ2nB
LVF3nyQ3wkgYz4GT1mnRHaSyKYQ2Om2JUBjWhVM156yXKVWSDdU3r/OGGLom
SX6krwep80JzTke4wJfZFLubCFjXwMY3cMio62EPaaI1PsC734Js5MTfb+kH
+selXquQxg4DNJRXdPl+zyx6nh4rJd3WETdMyNyOEVqSQMEGGuyPOatRsFLc
jvSBr/Yq6t2uieIjv7s297XW1hmFssR2z/lLsLA7zm1dxz0Y6+EncVuviBYx
Bz5KXlbd2xR3P/MLwSbJP9Ad1vAyU1NMx0Q7cEOiRytXlbZK3SHWzw7VbL0A
U1TnfK/waOijWQGGpHfV2SsRKKIK+zU6SeqPTkaX48rnnraQjokqdkuMKWZ+
nh5umRJq5QUftC1fNsz9bVTAp2vUsbA/u4QgQaxzoSvKcQRgdLU6WkG5Fvkk
Np4m+i1iKplN3NrvRbMo/cApXGhNXtQI9+vXDVSsGe/8Tge8VxEaDbvKnCBu
/o3tiNt84+X9eKzUReZi+F5Wni8mrVCMbJv5NNm/xkjhJiQ9z0JlDBrnaeR7
f0LXoLGsjuUbHSTJFSSV/vL1Jro7l5BmlkSU6FaDbua1o2Vi+oA0g/bAjQcs
aK8dZgb5oltslM7unjCulZYmo0u0cV2nGqeYfBHDaEr5OE5u8sn7fGoiVMa3
oNW543gHAlc2KVrqj6rIjIn2lGtxl20aURfLILk1PnWR9Bd9w1Wr9p4Fqdts
shmCABFfSj2PL36aXzbyiRMidQ07DPMQKfcrTB4xeA14NhM2ttXf0aSMREfC
BMZ7UzETuKCL6vry7JK9hO/YkpHuM2lhtRVftAcy3kZ3GS3mAqo3PTuI1ggd
QCS+g9UVtMh5prp9p/Xi85jnersVKygK8w/URehfaHNwBx0Tl0CbRbsf+9bz
dvJYOR8vx4W1igsF/kl8SMYoeSasSqECrmjS+ae3cMjfHG/CGjP8Xo+HTjao
6iQWtUJ+x5lrisC6BJ2yilJEQNezDFNVS2+EZ2e6KppN8AXeHqK8lW1rYdtI
Sp1y57JkUtSTNW3kccV2VWXz5bWoduz3LGX+oblh9Z7KE6mZebVv8dFLtXdi
Chg4FTu7Uscdfp83pqrgjodDL8pEpZhAs+6YqQtZ8+7CDlSl6WdK5rWBCgfn
jfYjsXqRXPWeKAG1ypa4Rbp/8psXB6yBqIIW0+m6RiuuZtbbi0AqCmWaYS3T
6wH0Uph8sKmzbFybJySVEfXiPj09gEgplcDMmfqdgyo6ky8Gtk3SFkvcuyr3
j9TYsmuAdm9AgSvu8MwL8b7fPa1Oh0yc2CF/aLpcVXPpNAkzkogEa6sqaxpz
JPH9IqFPwo8JwUzUZKm3yc7BuNV1ZZNldE4+v1Ni68OSr33a9Ol6BXouq0m8
P06yXfA2ZO3vLZHhqVhLmaVroLcT4YjFFNz6QomTwn1oZ5P5zJuMVUE8KR1x
medhlP5oHCPv3kSlXz5334SzBu3PsmgDe0E0NpnieLhz8W2G9aZZVSUCAeKz
wJpHNvJVdHcEYQ4HjoOi76P53tIMTTzvACGbIRf1DxgDNW9fNW5RYJeM2DVH
gDC1bqds67uaL4lErOtS+8wrnMG6IRbi4ILYOYBpISax3b0Z8MzQ4iMYDLvT
7/eYftRWEpZyNbDplFywH7MyX34KxKz0Pt8+gEDNJvOcpN2ZVl1GzkpN4Sg6
jBlo6V220ZiYIR8PXg3twL4o8kNljkbe0AZj5eAJLOrsDdC7nLHZ1yt2isin
JoM63fXKycIJG7HY1nmrymBMDPrO9/QSXhVit9bqhOx4K03Sa5vKqmaAlk6p
M2x9+WpRbcSgUGJ7QjHBtC2Ra4XVkmxOnuQl1V81YtXtPk6hRrAVCXZDYuqS
JQ2pJcmLGFeoL43f7W8MUWTofuAbXXk5JoofNm7Tqw0v2B2qdS3a/qlLtpw6
amSTt76hZrNULdOueyXRxVY9e8jaRztbFZpKIbATw5MyoJ5OMuYPmDBSr8wA
xxVFbd+hHppiqI6TgJ1TOwnNbnRRecFZ6LdeN3IPgt99q+vxkkifuRDxsgjD
49lS1c03QRFcrbA4/d5cVJpsmXtRj627vQ+8pwqURV+l17IyiFRmmy3UJwnu
aid9BIsH2rDxehbXLO04qrsx/xTRoyZOj4peOSZGpJ9CzXRomijLYgrJUSmP
eUQMkvG6nC5Qnk9Emf54ff0qvUEQHeyDMv6gk9QX6CGESUlCCyvMIK2Y27KF
P2LjukJQXjatVqLMxNUZfMp6YJZsCmi/dctAYS20JF/MhlDVUQfECUhp0T5P
iX65SbJARyrlch8hyCVpOxXDmihBRiQMhL8Nlsh5itiWqMUlDtRitl7MWILl
FQrkDlMgJnXgPjcS6zPft1nhFO0DUFO+VFKNQ+Bu8T7gtkQSMssPHyQa/1AY
RR5p4DrTF5X5lEIwgSw6cNYDb2/wWgxT9LJVb1JUa5pi+D7IfJjZ8fLqXLYb
/TAVbsBvijXdT64eaTBGsFMyfRrI7VPMbDjqS6Iyv2pnYGhbsk88O7qGMxCO
WcebvBIvJQy28yWxYpjIrClo+YM7D5q1bMPKfpbgskWr102g8sF5tdjSKxLx
iVUDneAm0j0bdoM3e6HqBreZsTtqeZCrQC1bCTGkQ2ZKlY7DuYCIx3hBIhkq
3RL0HxNmkaTMbc/K69jEyACyiy1RtHrAhCQU5W21uAW5TS7OhIj0wl5ZZUC7
IoVgQHeD9mtJTEbNdsfEsQF6bKJZyRZzdjG+We7JbDRKNmRO3Ftq3ixl2F9u
Utt6jftkRLQ60H6nvfpTfzPpUvBKuGM6Vgu+UWaRbZX7Fu3Dkg+kM1ebR1mz
pv0zpctXprVgClvUTTuQ850nZVUOb9mmw9Yp9jNmjXWzyia5jUivpZlYwLtr
mbi1VLrP9pgFG33gIeQ4SSiQ2cRLckd+l94QdcbACvZBIQolnMqS5SFWWsBZ
Z8R+q8T8y7Hnq5kxDyZqOXXylbJuSbCr1JAPpbCzhQYdHCgRBQ9JxK9o0FBC
jBarxJgM8nzJMluDIimPJCB3sE09ZTKrrGAjPqfnp2cnJ+n+ObWyYg3v6ZrY
+PRM6OUJzf9mybQqUOcd8LImrI+giwTbGtf4umjBRMCg2PGHuASjydI2U3Qw
hzDpiq2fmEa5jlTjGO80u7KTwK4e6exZ04Lr1YUYmJZetwjDlKDUumXLARMd
jb6E+7HQGz74d1VN1/XeizdX13sD+X/68hK/X5//rzcXr8/P+PfVjyfPn7sf
UiKhPy7fPNf3/Mt/eXr54sX5yzP5mJ6mnUcvTv6fPRCTZO/y1fXF5cuT53t9
7wGcJZjunJOHsAWheiD57vRVevxATPSMvfDpk5rrjx8/oN+sOBe6hd0ufwp3
RbJ0VqtKMJlkK47rauCWQrfZnbjfjdSjxXWqzuHO0vrZFAGX3XwCd6YBCE+i
PXkonlKlxAvH3gSIHk5fEvdlmrqbNXG+xDyIxRioGe4OUJsiH1txi7EKfpNv
7Hs4cyyzFVbYnFy+rBao2a0edk2n+5yDePzFq844J6ollzKBxwMahzqj4PvJ
mr+VipM4XrrXYyteCQSDONpWZYsrI5Aq3d2usk7EEIeKeJqW9EWkr7M2o3vP
JoYPYqAceM8qsouZij/sLZs4icazfj++ODnFntINXIgfPXxaIwFolER1ydfn
p6cD7xlRSgzLWX5LV9jHj2E4Hm8h10hSOOepWyYsfJc53ugUg1tlRY3eC8FL
lJMYmJNY5h3VzssbDuqYkuggYuHF2SAtRnRNnr+6ODuQZlUG7E5dwu7BJshw
SxCKZFlFl6XOOMqGetfDku6djs2z67zHAjo7SSRL861Td5Puh+JtZ3KLbBwY
R0NXVC/nq9RFXYX7FDfxLPmGqL/aHaMOBXEBemVh3phwqLck+C8m4FBrqG3T
9iWtYgzpQFTJ+slvrMBPQQHWtckAfWQWdGCsCwliIkTMyRb8yluQ+Q0DHXGk
+6bzlZsZeEuxXxYxGZV4I0fMSpPiNmDqOy/ZAytkcUqOuZhl60UrJxt3Etsa
ER0guA9yorIxjOGq1owlbCfhstUcKhzT22WNc9TBlyyecUXCNSRjURB0uCu5
lKG9MaYVHyOIoSj1yhWfNosXYWUgRqA+ql5lpMZ8VgXBazdStuLAJpk6K6xY
ScQujI6Ysn8ZY5apn1JLErJu/JXMbcDW91wdEw5/W03VHTpX3JVRmp67IqE3
QuY82ubAXdhnGUh+ghKZ+182n3N8nRNR4TAaOHzMctVZz9D/A+f5aD1wR/jj
R3ukNClonnbYuoZbZpU4sp6X2MHOwxC30aHeL0SmxOi/ShfZ2LR6bg/BQTkT
R8+5+nfwgaD+6KWCZtAjTCgRbd27EDFLeBrKt1L/KEEfPvuFtmAfqPGS+FAA
/sCbTh00YHDi73i7hldP5LrDL72DA2tsEH7FCABYz32aWRT8fVscyDUp6ysU
d49e79nd+1P35e+Dl9dQlDK/yrIKzVAuak1sr8qYRFP8wtOY9sha4mcxFc5v
iSe7SXBOpxW8NZXCMimDy+EmIoiyl1n+NMm/NjEfUqXUzr6lvMDmw+Y9LIj1
nvhAErubAi1j4kKA5mtaBVpUmnXi9m8QOiOxPp32WQGjWrpr4sZpbZYrPUL7
xJEfCCu8Rz/3OpSfxhveKMGBVc8A0CAOLsk5MAoqwoBPwmDlcEAMyFpxMAu5
GJEqFgtVl6jCRReh8V6W2PI4DWpDFXORitBWm4lT+WIK8yktuJnuuBQJHUU1
xVpwf1SxGzcINedUhXr9QKtlYqZqFhozW5vO1b4k142P4aBNmXGFGduLKzE9
EhEyF9SExqQEp/igRbkXC5jxMVVpQ90g8axVxckCDr8kn+XFLc+Bv4d4KeiY
rVkJaMuL+6eaFLBiCPkNQwmJLoULWFDv5hLFtJiG2l/ZE65W5V0DH0Oc+UUF
m8BQwt5EJueZlMPIx4z2uXyU2EdsJY++gzZCVoFnWxleEL2sde4oCT7yLXGo
BzgWmphiVeh1kWlFalSJG0rUvuqr1fbgX8YcHnsh1nXFBoOT9NGD4Zi5PqWe
Hc94XE6rird0sRQZwDu/ZSmdzznG+svDYfrw6Cgds1xflcmGpK6GBV8xxDC1
lTGh950ZdfMP3rNKE7hjrHgviLJ7jj2r68ZMtWgORs4Dg7mCkEU9EZ05TTlT
G6W+ID0HYmqC0lz1meqbq5QJFqVbkQKZsCgEhyo0pRCx5ubA3SVfFvgod2rg
IRGSDLVJJV2PJdX6wIDlvLugUxYWBZY23l3+YCfuYPseKZFx3vBT41SlrIZk
yFCMm4kE4F4BzGodAgGYEoJ5Wz4zSczKbvzaxFcUf8SkNqzcPJ6zBcvDG62D
LbMucg5M4boRk4T5Az2huQcs3aMH0GkdwJyQ3+XiM7kuxVaWiH5BdG8s1S6z
D8VyDd96/hJ1QHhBD6FEE9tUvmTeWjwtaOByZcT8KCsKdKwN+0fKiTAjUI7T
qHpLDG7oB+fnQcP8WtuRYk1KWl9rzn7teTkNHAVj+YSZK2I8CpZHUadyWAqB
xUz6BL7xfJelHCdGvWCiGBrYkszt2JVa5FmRLdMvoT//Tv/gFx4OwV/+KuUw
9HSEru4/GY0ePThItICs8K/SfRjJpaZf/UsafH2Y/i6990345N+SA7QjPtIl
3Qc1kVeLx/Ds1DovptTQm/OLs7/8+T8ar/EIbozAvjiV88U86mE/XCHphETT
ddTCt7KFMTX9jthQEqLYWrTK6UJTp6hS8CVIcvLu8MT31pmzmbte2QmvnSkC
NfiYCviDjUXpj8/hJcgbyddB89MMzDrNHMAigy2Xrnwdkhm8s/dFKd4GjQjx
JZC8mDSJpSSoHyRQQlcbOq/cWLYYBVNrZ29tq7EQS7/gMNEfylxq5Fho1W10
V61FPhilXKnWiNgIqTb4uhNijfloBiyJKRsvXIECyMjptnCFLX4zUXWJVifX
8V3lPNdYsYVQLLMzlakog1s2t7vamK9Yi6wuDnZM/qka31w0dtDJ8HXiJiK6
fpxxlieHuNZZLDrLNKP/bgWcLpVEVVUahXcQtyDclMrJS/GZ5eYSiQ+bvLeo
wc/GynL4dZ6v3JExpj4x41o04oPITGIuCMZ+qNYBQEA00q9hbshJ2OSzrIXj
stCf8iWAmRGWlRqE7eiCb/1bGQCTXVEmIPTOIA8Onfej7GbZPOzyAb0rXUvz
9mYE5cku1Yg5xihvqtU4Hcv9+3qFQBWwfywyNz/C9r338JFcThrA5Ug5PIzl
IgI3BV83Og5WHw37rTqEO3c63EPYra3OiJpp2LwkbUIdgC4oG5B43wTpJ+7t
M+VjMwkq5WUQnRsoTOfuSMK7w+/04ChIeF7/CGA3msNJoq4yvECq1QK/l91W
Bcvc2LuzXIGizN4tHSL6FrmKhMwIT9VpIJqxzlG+UlseT4mDfUlPTMGhMMzY
YX9Kr3nOvuMp1N+srqffMQTXn6jk0YejY3rx+uTlGZd16uDje08G6fHTe0yX
ddmZH5iS6Cu0N+DRKlMaAGbIcWgeoMF76rpVF2aT/mS5plTwQAnZ9OI8ZhRB
/OsVOH3PfmknaIa0V7wvPbc4E/gJNb+5RuDeKMb1LA40ZOelG+d+Hge8iYdx
VJohtXkXf35KhPUa0/IqHoDQokUx64T8B7PnmmZaOVaTpskLtCoY6MjW7h4t
GhTw528ubP16rscoYN7JncByz+NyFCVVEkTS48HwAW0E/v+jI94L+PVAnfCm
WBgJ67x8czHg/wzvPxJe4JQPtD9HAa/Y7UrO4hVmgOV+vT+JNA4NtcKVG3H7
qkmetUpQzBEIPhhil6dt8+Lk1KBaHVcLUuLCaqkEBsdy2Lip+HYUq9NMx/ng
ySgMV767YZ7Kbg7Iq0vHpipsrMOca3wUoisUdWngPf8gUrIoiGtBCL80cxCY
VIAexvrLjx8dON2nT7YR7vNGeHF+ER/iB8Mpwz+GGjL15NXtSGN/omVAJxhm
VnfGKfFl4hqUPtIiEfMFmjrZ5dk5UO2RGGDHudNeZo3QdlVYUh/k3mKbqNjU
WfEnV45C3nDbX6vam0VfOVYnV6cXF17Xa+eJC3/rf6b3tWVEjvFEDXCyjj7c
v6+OTpg2qdw66czGtlvS5+ubUuJbmjWshFe/fRn69I9oWSIwZCzNx2fpV8wN
QBZohmJ+B/rWr/aw2KdQmYl6iReg2fskd7v6d3FXqe+iWeadoW5SEJw3Ynlt
zEBGPEcpCyteMYYA4HYTlBhlBfU+CxQd/YjX0Sub4gT+/Z5W4EAqxiDAXLR8
adkTCCEBy1mtMj7Tfs3l9jbPBMVp2RjRYlKuGJSLJPCBiWKkwVQq32mR9NxN
OhzOuijcQwJCiY6FtuTulo1J8ijVICs0ZP5i1kiVL4tpLPI7RSxJMzm479A4
BD5ApOCMsXmTb1R2kMudicUtQCVoCy3URM8kIeqg6hxKWj4Y11465oC6rqKI
3rOmGY2mTJkpmo7HMh1sm0qD8uk4Q5S8+kALR72TV1H3D3TlzFxkQoGhI7Ub
Z2tjQ2e058yZpc4BnPaC+KIgkC1j/ri/9jxUBlyVvyZZCWdz+k5jO4u6w7xx
OBmRGAF2Ei2+Tscxppa3Siq3KjWG8UA8USgPOEgFzowWLBHNT9HApEo7Qtaj
I2fK5TZiuyvUEUwcRBtBD5w+wpGMjjri8WhEVCuR97E2Qmr61b+k7luneGDN
wxXt16GTNrRv+1f4/wHQIK7oxoNMYohGehOy+hUWO+HQVbkDNawsJ8Ryf88L
Ia3MtxPMzpAEISJ8UEUSg+sU8dJUY28kVPTG9LDVnQK4D5zrFlOrVp1jhgju
glufeuj6YDVek2wuq6Q6iOQkdOPCxSyWOqVYVKdMB90PwgANUkX6a53/vYmD
esrczS5f0shgtAJEBEQXNqOGljlxgVjXbCYR8A6+I0VTLKLofF000GfIKeFW
m0jlCWuC1gY2Ub2vrdoB+wktXDBv7U4Zl0E/qQZDNzQmxCJd2bOOypw1qu12
kQlAgxPORGBvpAeILnBQO4qQ6FhKCTH0jmDor4NiZORDmbcA/AO18v1zMdvC
H115KVF2f83pbkrEymerIJyCZpIG5JSsUu0o6dIQnUZTa6J6Z8cDfOhl6XbZ
K4d2hM5qbDdVv/f92eXel2oKrv4aVYGnCA0XbIwmfMSR/2XaMm2IzjxxD1q0
Qx7kKRcOqopIxOX5iy7mPM0CZId9XHfEjH6FH5+EO8Arje6B3V4UO7b8GG7E
8mokmYEbNxpkKD1dOxQ7NhaOEVMRXNbUOzVbKH6UUY/E24U8AJm5Jb04GT4f
8H9f4L9XhtvJ70g+SZS7fn1C0834fvoBb/G8dpHP4ucEAQds9T0xM4HSJdgu
yqmK6uImW8yE+QhGP0IvTEBZbLSmJ1xTIjQTMxDV5NmYoCYRlXg0vqOJ66hI
YHzV33/ke0mDE4wCTD6UHGqfEPPUuqYzTANJQPGUKrN54VTuBIjB8cC9GRw3
hXj8YqYSmUS+KZgv422wFnCQzozIOjCpBDAuonA9wnYSImyrcKk+iXA1C4Wg
THzIDRN2AZjqxAFaSmEBr/5Eu/fUTYNg4EBKEyOUGuXczcTkKd7H6ZjEnveN
cYRESd/jE+mDuLxzreZlK5yIKbTR+JIp2kBbYIKRf0AaI9Gd/EgkijFAl5LK
J+DQk540KCvDtDwXY/wpsVCS4sQsrm+dn5954iTOk4QvtnoqrK/ajuSqAdeR
1YEyVzemFJdSye6edhlPOVlyQ+yR3H12TtL1nsQ2JYF0SBWbChLCoDprHX1g
j8WjD2fn/F+Wy783z0v9UmyHkKpF+p2ta5ACpiSPHqzrhZVUQ5Bw8B1DEB52
SKcUJMLJcxJRzB8tcPi3dElDZBa74b5FFA9v5YXU2Kjzhos31rcOW4cLCeCP
eOR7pkpAovTmA0eEX1GUu7ljSHi16ZU0ynpkQImTzJlSU6UI48KpxrzbwWhH
X0Nf0ZC9QcvCLYZ8DbNrdItApo+Dl7l2J9qp9kf84NyOxFKGjehEKUwa47M1
1rbNtMU+sC8vKJQkayESID+cCn7rKpi6TxDvOOosPb6vyo+PHyVFDddwAr2s
Vm0VhGEXTteFXQzLsoVgOM9sgNdYUa1E6kATpabEcfQ3vIw+m98GSBlNq/hh
bN3iRRtnNTIMjoL9fnPntqiyFr/DnteHz1KwGAM8k67Ro1/Ec538W5Lwnow3
uzs+4Ss+RZ0m6UAl2L87Po/e7fheEd+2VxC/3FHDjgPrKvl12h/hQN9s6b29
2taxAbfnaQhvRQeu/hxQW2oRdqhoOPwHScgshTBGIS70oRpXEu872nUxMwgz
R2sm2ar16A4WgfI+34C9mAdoK1AGtu4pAkqdthEO4uONxIBAwK7WdRfmLg6G
IN67uvM1KG+UqJYDLuEeyUf0HIH7NJf5nl0nhGlldMOSGYd0nzn3A4f8T4cs
yl5gFMB7WHl0eOttiJDmLL4cUQensSbxQeYOI4ID2dCLQ6oWzk0G7+zwoLuR
T1RTMfWBi9obh+ZG3TxOh8P0TVn7pF8SDCByEXQ0xDrQDBkBZ01UgDjKcl0S
QEtHXQii1pvU4DixTqP0ku/Ou6LJHVCJY69IGlTHacbUclNGN8265vlmWKbk
HvXbpyqjTp+bu0LUUKi/Gzts2qGKskEIewSq6IALzQU4cH1YrRx8oZnHB+ld
PuZQ27sGSikVQjg0Sg3mxS1G4OXmxrDIzPGgtWOahxnYZAx0UnPZywcOtou5
Izc1AmuofJFTfrhbOH1bDL8vUucuMUhUlyHOF3D0Ftwdj/5+nzdGr0O75xmi
8DLPFQbVMj4Ex8myZbCyLvn5LHN6qDgrHMtOvVFdn59/LXPtgtnksqY6WPes
yXCGonC0qRqlz5lDxNHm/rgpnFfZYuBnNB5cEVAzoXYA3Mw5JlmpHhDJ6cLK
FnlitppDzSjgSaIWDpTASfKAZ9o4vZ+ZYBs8LyWHbRRgxAAjSSRZa1/dbBow
6ACUooOJ2JzPdEJzErgt2bBOfioB8VUr/i36OV3+LE4JSVcGP7AwMovDWJzK
FQJ51pbOr9yrF7JwMVimcYRK5fTgmgZcoiJp13RxI9lFk+5O+m3qfilZG+Rt
bpjwFpUP8MkK8kbloMIyA0MNAhJhjHMhCgLtGrW9FWiFNUtZGErbcYIzNYxB
mskANaqPpJ0/rIk0DwxIUWMhDPl2S2yFWnO9z6qLvYH6MWgEXNqEuIkmd2Bu
nXEh4eSutqSC2rmDTz0WzXUo/okXlrkc6UerBcnvuO9mGlfCk4x7TVHpvU+Y
C472XK+nwBJO5OwInFknPX5wBIIhSXZIak2gcYsKdpPRMMMepa5hMsMb0Cl8
pnnqb8JFjtBg4CEEBQwvWBkEvVqrWoXAmMfqSoPxW80CKGzy/xC+cB1czc/S
Y+H7wkf3lHfGURqGb+7LG+M8n6UPmDHsNMlw29Ykiu+FLe6lkk9nb8ujXovu
jbW412stZpw7c8Oaw13zcdh95fodej8qPfmOfexDHjcfstu9CsdqPphxngp3
DHLFCM7FQZ9dFACHMh1Zpfo8CaFHpYg4mEKfaMBezs9oabBfAbie3sHqdTsV
i3lbVy59hBLA2Opj9nVzfkkuz1+QaGgRGhFeqehQP0WOMYLrAQbc0McKgGq9
vnwBzFUtITGNfYjsABM5nxpWQRIK9+azfVe5cOzwEMgibD0B8mrb7tCPWDdS
VYtwrc/y8XrOfkrturHFnvIzzj5Hz0ycAc8lOY9k4odINsEDMFdSeYKPDbWo
cLajRBJQpc5DznugQtf00/XJD+rQlc3Lil0CveQ/XheLViK/FC6Aozd9j/iG
dcvR6wCQYxXogmZhkPRQthncipETFjnjOLuafFajaMzqoU2X/0pEngH8GkPo
y+BKYNgFbcZVjBHTLqmBENnhZ/UO8IKjBtaBm3BpsjpjtLQeepTYZ5PZh/FC
3bXT6abMljSnHGKIbZqG7y2OR62OLg5REgxVUq8CDRnIDRyRLMMOg5FrC2FZ
jmsWsUpSXsVJhELci7Yy5CSMbY64RN8Aw2z5/knXtY2x+hlmfr/M1hIo63Ec
fI6PJDSzeZOY3rYSNSR2ygmEyR7gOxyYE/GGQKbWYrZlYFBJqaGFEYUZDwET
vwkcphLJMwfBjsPLLfWIC6oVAmgBqs7tgRdf0b7lBmUs3qRwDJoPej0BP5PX
twLh7eAOpJ+CriI7C/Ij40yd2b5AxhscNTGk3ZDEwX6vYwula2UFpa0E870t
ZrXP0/z9DKTMgZCo/z7sYzSqv52FVB6/Nl2Oq9mfG+ejajSuWyIxF0ipAlIz
TwamJ81nMyJ9dKkXEljJUXx3LFTIrrTaE1e7XWq4BL5utDXWpa9rVpzD2132
nSS6E/cSad2AqdRzuKqcDVds3kVJf3D2TTkjlq6HlcphpIOEJawRfQjKK+EP
kf9IWC3OxUoIfORNUvso0cTB6Or9BiOgNWKAtmzQWK4yh38nZeFf7LoHDd26
QSBAvQm6LYCgH/iKAMizU4Lp5kj8rlFHplvDcEb8VAiD6X3zM2dlYBw4IQHh
3VJIuDXzKLOZ0FLfpYANqtX528WXG7S1gjr06ohmRvJChbGWO7mEvpcmOpr4
SzBC/1ot1rWFK/SoB9g3ni/eWjN1X+bBDzTFjUCkBWHtDLftd5mesgg4mqU/
yRxIDIrHInKOXh50OYt7vvGmefNvuLshMakDagTADdPxIfYWQAFSyrnK+u2k
0Rkw6PhZVG0AcABYrOSTlygYgc3K2rkWoR9D64f8pUsTcSAb1REoiofg4WRb
QhRBS4O0ep7cGb3xA0gbIy7bDrqyxOfC8CSg9kiLE3ZLo2oiCcAxCZ7RbAaQ
SBwlUi4qRF4JdEdjL+2YidKuTL3rVKHiRCJPXgOODS5UPeIHLFXdMQ5N0PNG
LUfUWKaeNQ9ooPdE6ASf+C+VOinIvLGHWsOKlfLZTKHkYg79kEHDlW9l2SGf
cjLiGkBf47VWumMM8aToJcHS5N8/P+BsxSeMg4Cayu+S9Av73+3eK2MrF5vP
9I/Z+Ggfdbq6CmpxnfVnHjw0vFJrPdJ0oa6QO00Q//z6MmYrx4/2HBZt09ny
hZLrBElegjqAbIn94MfRuev/5snm+ZTZ7M7l92uL0fv5We30ZpKtxBZWBIRQ
ljQJllTpWGfKu3svlGC7onL4bpuqSA/Js/RIFD9WtVMb2YMhZgOStdMfuXdB
55wKyb2c8TQNaZriYg/ERhp0r69W0t45JZHV2XsQ9K7/Lmi2/3Jr7/Y6Peva
boP5/tW/pDvm+DDdPrpQIXHh+ObfkFTk8kYG+Ul7MT5sgPQZwLxMpb4Laj3z
+J7puJDcj2K7FJBX7zwaAEwHzpyoyzxCZ5Uy+E3AUbxXV2e4h483DrVvizvj
ew9w4sLl2bvK3MgiF9nKuzZaVOnIR+nB/OJRX30qOpoHnRuGi2xjMH7NWOR7
4yIMZF54hizyBFRrEJonOpJWjGPnYbjYcdTDqnFcnbNiekfSEA8L/iGMUL1u
QszDMChZBTGT5sPcnO5ZCJfImwiIKwzlo34vGtCr2IIK+cSoeu8Y1E0LBQB7
GPN7rSjI17m9IhR4m4/TbmWPHx4/lnSkbNJm/Z5mR3XI4Et19FkqeipM6fig
UNc8DlpUoITcgHHYV0R3rsT9mMrIJV/tt2j6og8+ntk6Yf5YrgNpkAyJ+gEf
mQg8jE9GkK2U9bUqYxuMg5/Qxw8eS2gUT8iTI7YxhOF77KSJBXdWbO6GR+kd
pYkCtxlgSnwUx5sgTZmPIORK4E8tbqk7egiw+SVjrIexkWHeMnD4Dl1OLTCR
lsEd+jSIpOUrfPvcFE0a4mVYktgOXKWhzoAJthZosZdsuuTQ6daBn60srTLT
KQCZjJIz557GxM+dDo0NqCrx4HWtuB3gGhg5WE+dlS0jscBlj9Lc9Ujk77fB
IY44xQ0icwbum0EYQgp9JVRtnnnXnH8DRX423T894GY0vtMAyXA5ODQBbDHn
0/PchdGJ8tvC6tTM4aLsZJTsb9aowiNOw6Xk0TB0Xd6/njdHkARQDcVTOrW3
+dQ76r69f5r+kFeuiZNXF3Ri6OmInlKHlYqkDObbImM3h4Hrz2whD8ULaEJs
HXu4Y/S8bMC457x9b3+4evLAanIfCdwLACgYGa9SmABXPGX4pFVDZEg+ZKLi
GlEnUDBnCJajryUGMahVvmN8dlXgAl6cRG1T1WsSOtiVSs5/bkEGzswOeGS4
1NWKehNU9zJ7me53wH7o5hhmQ+nKgbIFKyagKrHe0KL8sZIU3hzoV+Y+Y7g2
ygz7BBDxbnpWOCMABdLD7oIcu+3rJLDHOcMITwpxRIycahztWzdr2IrcpWe6
UY279hXMOhBYblfa1uKvs0h75RRWiixQ+2yvXkXa6ajDVHLfBHHPhlSgF1F4
NkadM+QDelieCHDEMg8ilkYgYnzBJoaA1lfFiwLbV7ksynUrmJE0tbWAR1JF
iZcSgQYGdmTSGpYVJ2N3yGCj9NyndvYoUYy6Ps8DANpOesY/rDMfrahDk0Fp
VJqrKvF1sDkF91UtDCA7YUDU9AehWDp1087m7zqQDbxxyq9b0bQg7zBXowYC
jbwIDJVWXDGpJuw2rwnmCrxocsFMT8ykysREQnf0mz26Jt7n9Z5sL+6buuBx
cBXaZm0+0QdR0ikwGnfZXjjU/GxCm7UpQtpqG0hmTgAd2E7jNkaScJSOFRua
xW9HeA+Mu1Z4R1CP+jyKOOlDrWNR0jUYhfsYVQbkkMDfyHOj0d0Xv/bkt//G
aOvOb4a7ixhV7L0Q4td77Hc7vfp3/mtIy+ManKN/a4Z7+5QkfpjpMUl2e/b3
XhIMNL2HV/ZgL/EjTe/zK/t7L/HDSB/gjf7tvwlGmj4MPx76sm7I6SMuoX/u
JTri9DE/xR97STDc9Ak/dw/2cNZ/lT5FK3N2wXBrHUu+7rFEqNH8RJsilGx5
479ZgbwZlhT+MqhI+cvQIh04daauFpIoOhbTHLhGIvdQGCdDZ2AFlz1H+gzp
zWz2AD8EPRQNme72tfYx3uvytDN6LWq7ojNYOJBc8bzreOGe0NADHbIv4Ljh
zJA6FP9bw50zCw8VBxKNOWasByQ0gY3eRWEUjjETzbbagnyUBupQ9tiC26Q9
gHHK7at6BAt9d3xteLWGLC77NLnrbCvcCHToRcCKvs9XreYCDJ393TT1XOz1
ORw5OPamO+MX5izG4Vg66eZANiRqf4DMPV87o4TBuSlPjxAOn3k9mLHIRUHu
s7BedfXykV1laNmUoF+YmwynQMBt3QWAPq9ZI2F2AIUsDF3pgwsP080WhpnE
CYaRtOK9qjnYDJxAVIQubNfumjjPHV94iO0TaDv4dP/AS0fbIHnmfobMvFd2
dHrhncnDccOSWasEgdCP9WrYVkNgHIUe2rQ3lwEPKk2Kf7UAS10g8bz4lEPW
Mi/XIqjc4kqGMmlhuPFMByn+3x4qIHScdWhTFvsi0QKCQHfncntZRKfrS5Um
zppfRtMV6LiEnQwwChSxybISRtuLGBAxKsba465o1XWZlN0hmjg2WoTtmW/2
qyC5SDh4M8IEuR0loWIcQC9oNtI9TY2HtEW24gyu3XW5jlDuw6wlLhS+ZWlI
z5nbO9wjs4TreRKxneVfrcPtIZg3O55wK1hezddCx2ye06dBJp2Lhmgg3xr7
4VNLLfSawfqa9oBmS15DF8guMJzhhudu//Tk6+YgjTrsl6lxHYGRo7DG2HTv
m4v8tmjGgOaNYAKLvAtyzJ6UiSmJAxIRbrUwUZBphGsZCHX36jUjyD3U/VDN
GHf5FdIUN3ImTjr0q7MWO/Y4v5loHDVA/FdW+cpVnu6/ql4d8OE0F470RVXn
KuTlHH6apVREIFmziW102+RJ4DvjHGEMtrfnfzgU3wDIbKIqcgepyeFEiShf
0x0l0P+yKl1P5XuG8eCHoS5ZZr0k2TBvWPdN3ZBUTjArfnZLMpSWRTRZxgmn
J4LHAA89oFzKo4TUocuphO+2GXjmQscDN2BPFZwhJzwizoAzaepn6QMtUK2e
pelDNtlEDfZNNtpe4ATs23MPw/bcQ2rPF6hWe2mnrZg9iOaEOIQd83CYbu9v
l5c4e355ku6fcUglkannooBjJPoV9zVbHDh30UWVAZtkxyez4JOPH7kMiVdg
9ZyGUx1P3F3acV13bhMGYKq750bBu28LZstCtJLo+8azzRJCk0lPjR5rYg1J
oUWvfxC3vVdEfqAuk7ivzznBi0pJKlUUXjNGqDNJoCLujA3uiHWvE52Pqnqe
larY7/nUtQYTIt/rGC2Vuzi1EC2SHALsTtwPNd/xJXFEptgNfZ9zTePmV8S7
mNiiQKUZk97CYzjzXMXjYP7OAMrjGH8pezHzrj/8RPWMsq5RT7+sn66PgX9a
vG2of76hmpPtOC2tA0+hpWEuw+As0pVtmh5jKnvEf4YT8Ob1RaQrrqSdHEoV
GbfbhtIXVbi4dkTu5C16EvB328tCIxyUUrSVa2mVZ8OOhvSsaCIcSKef9oOg
UoNtfXEeKB22WEvQpVhb4jUjCaGJnilK18TMz5is/S79Jf7wsM2J/9PiovnJ
O9fNZ+m/0xXkX1iH36E7zyR03UKBuUDQ5bAMR1B3QoJfKWKO0kIF0GEEFv0p
w/gkGqqPHy3VGpFAs3hOc9rz7D3R8VLLDI6HveQcNE/RhEEMHLJvW+/N6+e6
6y772EFYTwjL3j6W9Yy2/irWhk9QGTeKdIgun0eAU2jDcN9Y2mZkAzWAY+e0
wghixN2OIg/OrQpqBkya+i4yMw6RnD1MYPSBF7rY5etiyZxHgNgUdCkglJUO
YNGByLaSlu1TVKWZz4LlVuJaB4HYFoeFAfNyZ1vzs+ElIxm4yGFehE4pNoo+
ffCUDTHfAeYK4Sx3NSeRM6yItTmnz9V6cmloLxBbMwbFXCv0r2ATm/7YmU7U
To5+CrpmF/fKhow+sk8Z78AQAVIL6PZKPN4mLhJZrb08a9/pZO1ha1hql8Jj
OHtC0gffByckX1t6CrGqUzVdtP8QD4SRP9KvHo0eHB0d7TMAyEH6bSq5dZDz
VmRjzV6BbPMTCaKRzvCE0kokSXRqHfGx7cFqUaIkxEP9O7XY5ZiuLL7jBV3V
M7pqXUTN0h500AFMxxdlcIKdOQxBEStBEyDZWdCrGPZd7YpRTow2YGaiwt5I
EAQuhYUFRsYp3GLxScvFknpyET7F3thI2lVh2KbTJhhJFXRm4BIeO8S4sAWh
WHCW08dQfXAMLu6oQBmlgCSp3a8O1SCGFxe1SBb6LRqQ4iaelD74SUxUPBpB
kKatkZt7IT6vSxddHgUD6QwYc8U9P1TaGadCTpILDckRO720atBvlr3qM/0O
/XtFDt04odeRaz8q5GwKcuMltn9tpM5r2PjluLmvG5+GON0XTqbTW2QXsT53
sQ3w4QFvJ3PAsmFvL+oq5xKGORczk+oc4hhG83ux0duRiXyzojcm1magmUN1
EREkGeAk/euL5/YU6DI+WK8DzmYaTY07cg14Ag6mW0hzNsc8iCeQZMKe+R42
vgNc1LTfQkTHeboNzwZXAF0f9o1xyWHCk4vW1KvmXMywZsMJ7cGh/GRlHxsT
gB4mS8yM/pIO2zJbhBd408vbYiC1TsdPB6euORBtZsiNYPgdHQNLqu6pfPve
IPJzNnNhWzaFAmmZq9F9UYxreAQYipGbZyW0plMIbjXV/ldsQJKeh8sdUNZG
cQoa2GdDd7Kg272gI99TXn0ol31SuYITX7VGlsUgrA5DmJ6Z2GBdSoDoNo4z
mIbb51qVzmKQr8XaEFjnw1ocDju/QBW8b+AwiPzChaUOo42jxowuMm93Xzsv
qxD8L2YkGmmTlzV3eYi2zZreNJVxmZo4IG5O0Z0EGPTi2n8tgG0hhGnx82vk
nC6gWfpr18ojWdp69Baqs/nitVr7EKF5b6a/aDa2TT5VNuiuggROx0vQn/dR
wOZl3UU01weT2qMqiN0ALTe2Eqym6E8MfqzmeYaMEYSRukS3oLBW9uLq8vDi
/DQ9fvr48RHoLS+ks8OFoRIuPgqLAw+miDoVYsY3lxbMoJqR4hQ+nkqXzvEN
X6prwLWrX9joXI2yzgkoaHbr7cStuhvKk5pCtB7i4iDWW1fKXfdEh99nc3W2
kpRTGr2orKL0b0v1eq9Vs97tOOrwHbwxg3ic2GYokNtmn8IZ8ChxRaRd2j7O
MNWIB32zBS8sp3BEAFfZhgGD3C2oiq3cEmLK81AwcM11OHo/H8TT+0KGMxY/
YbXCL9Nf2EO9HZp/S5Jv0xf+xAsdsj6iqt436eGvFDZxxCpZ5LwomnzY3DEy
bDZPfv4TJnLvzkuJIHl3nc3nHHm0XRJxqUJFEPnY3Nlcffp5SWRAG4umYODn
t6rjfIwWtBWJKxD8my2iyk7m3I69l9MlvrjxlKzDsrv0Lh0hRz4sb4GqRZyA
eSEZc8ZIWREoW9z/LX2Oaanr5LTC5nPOnAHK6nZJAlwdjLKOud1RNX+rbHNo
S+oDginId8DrG5PPXM50WoRixzZAMQsXX0MAXLciI0aXo1t6PZfqJc628pim
uZsL/hA+sB4X42cZYnzk9iXc4PRucWFAYci+I8zxhWOpMZ1/eNyh8OqSWyju
YhCg4NQlYCloA9lDx4aC7dQtGDCeI+j4sIGKZrIW857cELs6+9eSwA6la4QE
xmTxKqR/fmK7uCB+xhkxxhczEth5pDQwePpZKugqFzLY/+znCWFM0fw99MqB
LUuq4325o1i3csWXlwXegmQIftyAVeHAQIcobABuTWQRYIP7SZSRTziXOWcx
Vw7FJf2Bat2ljK/KMld0uiCiWzfWcrkunbpCM4AIkhygvkiq4JN2EFWdBH3k
WohfGK4qJJlcT4sKX/KEVqx834yJGYh7JmJVArHKQf4IvB3iEl3lCgV/zQjh
rESOscRCyU06AtFK1SAiMSI5NxjBuXJ8UbC4VqFrFCb8kLygtSJ18EECe7A6
rMa/z805FwuWS/I64Pwn8Lp2tac+ZN+hz1tbDDWPuqP8p7H2nC8ZZ6sTe4il
MkxXuYg7YVSYJVZIlHYqorMGwHfgfzIneNZhznlgqZFoTLUmMHLFrKfLt100
u6dNOEj27U3ECRp2L/Sl5iVE5AdgcqSkaxg6P0D3zIKHSech8N6a0UjN7dd3
lWS94QL+KCaSR4GXx3HI6lqIuW8cRPedZO1okE/lBCK08rcenkFVnZIigC9s
2QaSSGexCUl0sCF9m9hsqD2HkwgcZFyliGoUHHYmqWEAvN224lHDHuc8aCTy
1V6GQw5QUFeAMou72++l+Lp1+hnghUB2shzS5nLlLi54hfNGqOmclWo34D6B
dCmaQkjD+tGGbbVSbLDQuc4TC0sZkvnFc2+8u5PLvpH5AKH1GKYMONVESA24
gYPKnbQmU32oEV2wvnIGQ8umDUy2uJvOBBKYMTIja4EilCfLLNy+PsG89wCq
FozUa4cDti78ASt6UYP7GXIO4xi/OT29Ohi4wPDOVvaZS4PvR1HtZTeUkGr/
6e31l9QZf2gshCnBNHbMOCa/KoDqmVQ0EX8MTbkaOibZI6l6QVLyYQY8RfyS
N7lpx3yyEtnyM4V45ymUg+MOoJ2Xrf2JD6VbUKijPYKwyZLOEJh/mLDfrGEQ
gTXiDGBgP3hl1Aq6Lq1GmlmBAm/En0wywwtlgKhtVELUsfaZeJJyYCjX+BP9
f+C8g8XTL+S9e94VeXRo1U7gNlHQNzmlUe/GnLDToelxe1yP39bbApV7JMId
uiC1k55JZJxvIlAX3JRmrfOYOAb3UIRxrohD5RkqF+x8WCJpOjhgbICviGD2
Rh6cBeYINm5PqBFFx49ucPcQGMdYzgZ8axolp6rcbsfEAY2UbHLwfBFV5Nkd
jd1x0bF2dsqccplEso5HHQ2UxY5w6DYyGy60+6H8IXxUU8DbrpzCuIWVbTRd
qAxPdYJNEPASyBwnry70uoARwLsAtcjRJg2O10y9cYeUqzUTCz2aNA6n0HEO
BDw4p7as7IlLp/NCYsZHCU4EsZ0a1le6KiXDvVfXIKZaFBTvXljEuRio9eUb
uv3C17oQwQ0OK0PkDuSuslOcyMA8Eh1mwG4F9wzbCXH5DDo901j4KECUPUwF
iElxtj+zsQNqLEff7d9wp+Cchxpi3lYPHz5++hTTzUo/pFPYkWDKzQnvVost
jibKnV8cHHgmDDQ9DcMnayBnJ8sGzsdLOhoDyZmI2FwSYsUFAhgfjac6Iq8d
fZg+nT6dPcZaNVX/pMjYuCvYmrLgqMtVBQyFda1Jh1M1UYWeFziVyWXrIpu5
A36+At3qAA8QPSBX1FuOcIjmvhuzr8nuPYdQ44rNGqsg/L53xhvn4zLOv/jY
SEKc/oFwx8W2HTMAwQlTkpq+CW8zoQm46641O3kTM6kc+jCp6lXFyFJ2LypD
FdH9WMPaaPxhh/tAiHbhYAPEqVkTARWML9g6xYnotIy1ki5mmvot4oGZpYhU
bJqoEh3NoJyiYw3OX3lsJ5tkAXCkxiNs6bO5vqBGFwtr9ftty4P6vWOueDAY
1bb+OmFEpdoYHSA6jls5ngA3MSRVtrL7QqAOlLvwHIVAKPk1bNRNSD/UPIuq
kySmyru8BD1EKmAd5zYOc9TfNmW87XpbB3wL8XBD5+TNXJLcfMBXdTAfQoKm
5gTZsDnAi0gsEPuybhF2bsfPb3BVQHhCjfOPdwO/IzSENPJwYKsRu9lL4IGk
pcHJroTB/dkJEuTQqPEe+dg5bb3Z6mac6PZNx4UmVFJ/WaUXHiXN6V6cmGbS
hO4VRVTznjtOMPBybKLyUbqrri5CocPpcY61RZ1otiKXRARtZJpSUjRlMsiF
JRYoXbpyMAZCgWo9SbTGQEIX5BcWxbnxjag8BCXFckcEqHGJ0HmcO1GbaC7X
TqJThwaqeU71/u8kgGl0emMwe6V80bbtTZkutXCKnFcLfLSwODVjX2QLwyR0
vslesWC1WOSepg92TUaokhetJhovK2SnUGunYVNWM7SdBylgYEdMTGi2bCez
6BtFGPX5IHZYcRPWLHaqCgHfuc9cZAVOA9pR0bVT/aq0uLw6sKhAl+yB571a
AWTCBaABMMJUQqE0JciQGye7QcGKXQlwVa8kjUOzdo6Jni7H+ZSDb/Sz3KlL
hUc0kv+SeAvdJeL5zDZvy1zegWaM9GeNKdBEcElUcmCEZcv/4+/ml1XXTAsp
zzE33KJBiGvtnZCZb3G2u0rGjueCYmRF+vJQVUq1OE5xC4SWTzSoatCBaGyz
UOfbVlTLTbWYbmsu0X3dDNFTZ8nQMSFlprx3Nozgb47PT3+pReTJpyTRoTtZ
NFgQ8XICsp5BJvgr3ity+TBRLfq8yalvGXJpq1ZRqefLcEPi+jb5UFySOGfd
t8I+ciovN1jrezjWIfYQjTfPFO59yD051E4oETjA6HyoBxaK2xnE1keB1kdd
7v5UJQVflFSHZSjsVtZ+WWV0MfpKkiTspOVNPkRd36bo8nl8MCRFrzqeh5K+
7utoTiTVqnPTZ4TQaVU3aq/my0T8L9UUCXiwj1/RsXfZUp1/Jq41DdTTQYrb
MBOJO2UeV3nNA9MCESxdEAXIDOFt2K6agSRMzo40uP7QIVITr0w6ocZmdoKW
oeskFDVjIHjmaN+KfcTUDMu8vWF8Es3o0PlS09l4Qccj60FXvFkuOVZFMOY0
k4EwESIdRGCVPsW9Zt/DNX8GdprobFVuloz6dhJYqffPTk44LPP1yfVVehJi
7X78yM9G4bNPn4IJulO+2owzZbgLPFYtFHirddvzzDW+3C4MFZwL71BVY28w
AxLgdjl2zamhUZFG/3PJdtTV+3NxP6+4F6J1MPu4832tPG5Wt67XLrLjtxKa
TOMSIobYVa86R0hq3ffyjlr2Xt5xK+C1jAICsgsAYma4AMy1+J7LrEa+zTxZ
4Rq/hiTQxIDebbpB8vCN36lCPPabA3PVihb0snT+CcLaBZ5K/fLmXTZ6ePQ0
jAseJWEhqMCxSXvTinCGaBZcZtCsrjW3iFR/e9/A7iVXmVLPdaPCU7D0uhl6
3XK64G2nG8hM290ruiNe7CzZJxk76EH8NbwjaIWQEdihFdRr75sRnonMzkQI
9zfeiL+ZqLORxiA1i2i0wjBqCQ1WeC5iFu2YDYKAxWi3Df7y5/99oKFUgUsL
UgBOY48YARcRL34Oj96kPv+A5AGIZGnl38VyvAHS5baZjKO1RskbIShqpDE3
diMDGmTiDB2KjOV73u/xSDBT44V5AbLe8KQtNDkGrmv25lJoQPGWFPoPqtZf
X04e4SzjW+bKoyXiqEbJmNkcWuY4ytwonQg+3bqvZq5XltMkvqPrLYegUbHI
IAGdUdC56/LHitSuGKFw24zj1KKGCgs3MPdHRlgXHNmYXnh/HPVAGwD/wtft
LNFL88in7W0AnWPnuKY8OF/zhz+9vQJA6MWZTIrc/UbuGLaIOsasJLDmUL8U
T/ffc4b3gMRZivoYr9QgRx8ijzb0iXlm4IUBdKTHruUYhlVeDhEbLjEBpo/I
YDukjgHcqFIfD8v/ztwAMWk3etJCLiG4YbP0N2ff45FBRWyiXUej3D/5zYWj
8H1C6CMsrrcdl86ZvLM4QhnbX/78H00w7qw2kYhXwnSz2uiPMv2vbPobnUF5
+/Ej/zH6V/o9OquzWasz7oBfr4o5taKMii2CQ65V5q27xETPPjxsB+mHh2sh
WxJFIVeP2rX4egF123I+cAYtoXO4O2R/9WfT2Lp4r7uD5doyR0JkU9jCLTnH
I6pMgkS3rJ1z1Q2puiiUmG3vTwb0mwoCAUuOAPqqwLlebXVrFMJEfCCji9rF
47m6yhsUZZ7sQLKKL0Q6wWJv2wR0+Wj6dxkh9g1//VLQ+uIVqT26MV103VYa
DREd8TPbSJgTzTVvmxUsKFi2FlQbQrZvn0+EoCV2EZLKkGLS6PWbMLMvvBNd
ml04Y0XuUV5LsmW/Tni/TnS/2lxCGv0OHpYgWNGdIve45ILqLRyDuVpCo0zD
mYYe7immFR0sSGh12UGlG95bRGmXt0wYMoxaaE+3lTS+M8L2VR95o/4k2fQ2
Y1umcsJb2CWXcodTy/gzJTa1DsMkCjt70ixZjuk1yYDtcav8dF1q+hcxQ5jC
P8h0ihwyErnMzm1jJ4cE4/agccHDwvVTrjA+Jep6OlBtsujusFUaUZpKhuL0
NMJXhDc00lyZM3Tt7a/YHpI+RMe0la0S4dQNFve+cxeQexfM6B1DyG4CCON4
WbQeWGtvkUiTMVZVSNTbXIL0AnZ13TKIzxhL5dyITWoUmHI7YcL49Dar1zLI
Vgei8nztIvcy5KrrXn+sKwMTzQNRDaqrSclfNuWgPMTeIX3m5ayFF9X2C7VD
/kWACS3uIOnbpYRoUFsbCPBZBdWHt6pAStCmU4VMpwvBN13JKwQuCUwIHsU+
2Ky2mzwyhwOmVlImbAw4b/Wf9vk6dqVvFDccvXsgg5sygapCUvPAky0OOjI9
zqNU9E5drt38upSDUHE/4CCYwhreROMBJhqL5ACpUIZd0emMOZ5na8lXlcaZ
xzMXcV6oH0ko9Yw00WddWJZ688WKmykCD6BUM+ctlxVA7XgmOGviQvIiMEMR
wPMrrJaxciXtPnZWBYsaNSGiUA/hHzVQ7URHw3owEhqzJukKBjXWdEURB6n3
piAYhCpr9QALhbOtiUJjqI9PIpR9r1FuzBMbSsiZ8qohoIfH4AhheC0TXRcH
yFSxnueC8UsUo4NAB4cTjNILoRxBjtFehDnC2owSaZSN4Y2ykktL2PIbIx4A
OFVsAGTeSHNJ6uDCQ9Clgg72Qy5QA4YN0JFlKWII9oF0RdfsjsSI1kwV3FkH
D9iDbncH07VEFzE7nzIpWMltLCv3XOVkW7ULgDJ1hddIpAZq/ym7+LDKfMBC
xUD9k3BNOkaxUpAHjai0eTJ74HRaAwMxEW7qjShNmS4MnOsls8PxBvZZvYTs
hp5y5u8i0TvOwsyVDbRi8Ne8NLd5GepjvIfQxWzb80FwJP0xNV0Ilim+B8XX
QVJU2FFjRysLmCxiV0JRf7su6+SEcUHOsdm7ChvmY2wA7NxVbubksnFIfvBW
Cu00cgxNCcuiiuuscx5epUEfRkkgU7zIVoLMhPDIc/3yy9ZOlU05DbCcAxeG
6mgOl9mqEff1na9tj4gtRlw/2f0VcSz0XbZetApZIcC5MMN9pkLJ0kfHhqFU
2zz6Fg3Zt6IZ/VzfLA5Qop1t10/g0Cs3NWth1e9RMmepGmVWAP1EkiMyQ+yT
QVRimkOSDeb8HYp9UfpCTDAkLWy3e36b91IdB1EZXoU+EB83UxmI5dpwUqKb
NdoMV2K0+vt2gVi+tu4AffWPWX2tbORy0i51K0ukb0ABHDnc2SEl1eO8pAIT
xjydmRCokk2XIYnm7ZUDyL8Ks9t82fzltpfADvL6e7z9KFnO6AuXI6xO9y27
MOysNVT58W55JVwoBnBqNwPeRBFldk2Id4t4rb44OVWXIO/Vqr6rNGO0Pw95
X5p0KDU4l++yMgbYYyTDDSpony+0l2+ePw9LSjWGeR3G2ftjFtU9kNwuvKvQ
Zf1lCV9K63wI3HOyWITsiXdYZ7WJu0QH4kNrh0967zc5FxZM4y0riXta+Tjt
qLkBOQF5JYmM4XyHtHS61m6gPXQ0bij31IqV4rB+uJmBO0EjaWHNKKkKcY/+
Jt8P2JR8A/LtEW0uOox6nLFHJrrGLGvCDJ8pSfANVIDu5D6GZykxb86XxFKk
oS5YcOXM4iXOaNPaHqggT6r/OvWCdRW7DnLoW+MHKCBr4awiBfkCahtPsr3I
7sCSVQzwxlAZfBFCtUHxfHdTLNTLxs9IofMfgCX008WZFTb4zmlu4KTld1D/
dJ8s5qzYvlk2yWd11G47CglwXxlbGPsguKmSHgZBTrRNG8BiBeaXJXGPV73U
qWU+rxQYv6OAMFrnNy10Hq5Lul9jI5UNvetM0dP3XSkd+fhRfCxCM33m8xc4
U1QQLi7a5+0ODT+r/d9mjtqqoJHq6HUTS3WdFFy1Ik0ho1iQhXn6+e7MK+9J
zMFOCvZo0xfqPXozVywLlvjaasADsMPjGFEi1z8z+4NIcmXaccchBUw5Artl
z/imomdgtvxRM7+XDgtmd8dBIlScGigMftZs1bw1gv+CmfieztcNLQIdnJ9w
tyJoUkIwXMYzxa8UZh0MhJiM2X5ZChtiOlMJd0O4mCRNsjwOmci0G/XMYVcz
Zdy3XBsOS4YnamZdBL2Z3DBKqy6/6Xbo3+99qVIdVYY7HVVEqFKwSrtbAeYo
F1Rl7aSKXYS5em2+71C2N31lBsiLeibcwT0jo1uISYJ4XqNv0eaZ0aZc1+5Y
E5dyU4yL9q9qQ4BnvryRE68E10auO9vVTT/vG4TBudx7Lqth7IDhwgKqSKjX
aRNbjEChnDljftJrFwmQpmz1sDpoC3N2A1GVdUK1u9KlJmP2QqWlVtuuzlDg
qOALnLAf3/LkNcoOmQbakyhLc/FyeHw/4pevs3mzlQfyhtGudiCQscFeXUsg
C06nkiGDkf2b6nQxHVap6HFFfPK8pgO8+IKG8C0DonpLoVXuEatef3+aPrn/
9J6/wf1nQfYTGTSw00xbbhEo67I0xWaIfx3694d2WZ+HNbY+qXerGOWEScWC
eaBQoJdtR+35udVkg6+BaoT8cBfr0LAytRGH0BGcp+gUwIthXqkrV5NZWyLw
AgvFI5a2GtPluyFLaZ0BKLSjKhi/E4XTj1+ZQPlJRHCxf609kq8kIg1CgqFd
Ollx8G3xIT0bkHitvhMkL3L0wUjRQLQC1V9qqk1jjIKwA+fAFjZC20L8KmgT
EeFWOFvTyT+VR5lHN0ZuVPWd5ZJhmlT04C6zFCUYnWGyejomF6b2QdSRhjXP
3wOEIUksNZf3L5pYwAAt7Kqa3AwF5IYLiuM1WwsBBZF0chM6bHyTWP350fBe
Ce1QA4AmIR8wTrAstCVCYuBgPjbBBEbwxtcGvSomJe/Iq5NvDoaAII4wbFBq
WNVDxt51Lr5uEgD8e8yJjhSQlz2lMXPA95WIvuE0JP8Wl24Xt8tc5D6BcUnW
JN4RhiPCYn+J/Q5M2ibaKWqdMk8XKRNHi2HZLSwmhlOGuZYpxkBg+UXzsp4W
wXn1brmhS3QQJCJIzoyWEnYsdA166rMRYx3B433JSvql+cUv2NPbuTimh4fm
qf5r6XrNbuqwTVjqORlZ97EbXec57b1CEwTxG97O+oZzeqrU23kjqQyGWdt9
Mblrh4XPnjVA8g7tZXqcuK6l9xLfn/R+EnYifZCELacPk6C59FFibaSPAwQj
1rOrtxGb+J5zLEgj7/FKghACx7jaENvgoL6P4JHmgB3mJKjAIBeGhkFueu5k
nVPrtAp7/GOPxpRzLBQ/kJ97icRV8RP82kuqfKnf4NeeS9miynV8nE/wh76U
xPL2Bknmo/zweDMdz/mvPZc7D0/tjz1NKSedldx3Br+NZ7yzDAw8ynuCt/SA
fu75ZGl4yn81SO5nUSEycvwOM/7x4yDdn78j+YX7ay9AwZKa3J97kqVABsq/
9oKUiBinjNxSIcrQORWhYwj5Ef0RpD7Ek8mk3pr0UIsPtYBlOuTHnTSH6Knk
OAzpoe6+i441lK5fTgKjRtJPJIBxKc+/2RZjUgKO6tHxkb96z4keerQ58G6J
38ggp3J5Z3UeIuajEQRc41YCMBBCQYZDp5PrBKvnUyqDLROUsSqpqpecmqmY
nCEyMxTnjcrfY7obUb9v0vhy2V6xqO4va0Djf2nFneqEHKPM/adPHkkZhq2n
MkFTmVFyb3qGc5JztM45JULLATRTYgDZukvkKAoqAb/Ed8Le8eje6N7Do9Hx
3oGyEiQgBKJCdyckieQxEMgoZ4g1M1hsuotBGZjzcxHXmkoKCHwZXvmbzaUQ
JontL3/+D0MmHqi2ShADKg3G3mK273kfSEruknq4yMr3eRs7XlDPxatARhxp
50WdSO2ho5YST2xAMgWBqCdwgsRhkRAL+JawIuO8ytuirkpR1RkOoUh2Dcwu
nTTLWaCHnlYyHbEDBkIb4AtFrPhOfwa15xCFZkHNiQZbRgz2qqusGm3PTeKt
2506JEcRer3FOjtCjknn3G45CF2mYrX3q0OeZWrXvd7J5udchYJYaNtAh7em
wYySJPpkBLTDVtmk4LAioJfXo65DvGrm4+HF2wcAK85F0OEuO5WU2MRyvzhT
l3bSLeKbxsePdqcSjtXLpeQrlNkxRZAPmDStRs9hhvcWuGmf1KWNGAkjUII2
J8eVtgcHZq/bTmdENekAJ7id02D+z2TBOka4bwL7XLe6QJtq/XgwOnakUrhJ
B0Lqxnh9swW/XG1tmSyCxCOr9niLHY8/V8MM5mjdSDgASBFcnYiQ8ki/ST/X
mrdpppEpW300V018GwTjvM+UtzPS3V37+XaK2d/VbZOzPtfd+39Hd63+Xjev
KoEGAUT5CpkO1H/zC9ZcisAYljZSESo9Uz9PAQ92DhnRyK7chusuQ79xqvK7
rKGqbmkbTZFAfdskPRzd7+9eu97lyIVDcbNmQ+FbMZ2u1UcJFnWai+ZQmHtx
R0QP0jfX3w+feBu8KAEWC/Fe3BK67d0hvUdMT9gMYrId0CFyjFYanCvpKltz
drg2rIoiQI/UtEeLyqvOnH1Wwpeh61samlMSRyhbivRfpyyLyAsvGLJ4Ej+D
gBI/gogSPzKDISe3ZCl0qH4aVnEkzXQa9cJM/CIUZuI3cSJwJ3P28jLam8g5
0B6G2bTtWQeq3HWxg+AbCNIuFl6efZN2xPFBYhHuP79DNIT1WrE+LLAfPm0S
wI3FvboK7nDzm1VQhHCpOXqMPnMoR4WClX6bFl6hQtRAQFMgVzDrPEr37afz
h7QUn2zRzoRNlGrYkV72q/qaheMJGj/QfWgR5zTOLgjTIR520cjocVBNNJUh
qos7Ts493kfPR3GpAMT4FprmdCsEWREpmyBsHT+8x4c0m6ePjo5Z7/Qt76gV
DqB6gKOdKQeQeJYBEbSqLRCOrDtkaM0eHe9vwaQ6oIHzy6Pj/WhRD6IpyHZM
gsdcdfNAuyY0vuokbJ0CB5PVW4yOcpbTdX0r8yPj633wq614W4c7qj/EPPae
x0Mu0z2XnG3P2TVG6ZvSYR6J7UBjWQFDDpn4287+DNDtXboosXsQfysYjgz8
8Ihr4+1OJecc9iKm/SxEtYK/Ly+8ND3rwl+e4vg6Gj6w/HKSo2K6nohkk5G8
zTJ6dIyTZOus0NxG5WiW/hot7T/1hp/VGybx7dNPYZyXnMF5+iw9ki6ycl8e
HMcPhgjkwf3mUhu7dySf0J0DCGSX4ti9BDTrkE5jXOwB8m2G3esnPNbeudTF
VmfvQdC7/rug2f7Lrb3b605cnEA0VE/SUu6Y48N0++h43O7qNzwZVOy0flSp
iCQylV7313nxa28T7r8xbd/Ob4a7i5hKsPdC1IK9x14dyokN7aS6Bufo35oe
MR/hh5ke0yzt2d+hkpNOAF7Zg0DZSeeBX9nfgdKTjgbe6N/bVJ90XMKPh76s
GzJRysOeIpROEz9VXWgw3PQJPw8UwELTnqKVeb4XrHW8i9xjwXOi+Yk2Be8S
YVp1i0ClOWo408j+k9Ho0QNXIK5XlPK8Qv7rw/R36b1vwifIdhtwwO5zUeEz
gWIcISp0c+e44Sgxrj58lgp4j4AKAZGFHv3CPpEnnO52clOsYr7atRm+4qY7
TXIvxhWx5js+j97t+F6URDsqiF/uqGGHbJD666Y/QjsAW3rvxYN+x3AtJD2J
wmM3BYYTXqmqWgCjqiOe9Kn9umS08rpg8S/IWu8fKWHXBsI3StVtFpR+d5rs
U/CwxSBvfe9Rr0X3xlrc6w+wPyne1MQYXrvm47D7KqLN/4Qw+yeE2X8zCDPY
crddJI9Ho/v3D/R9fJ6gWMG1bd/KJoJuJWJbfintREU/uaKdWtWMjP3pqgIb
HOk9+rQL+v1iEpAtnxfUES54XzAhpSlxNGvS1ESutEC1ouvpYa/BPuXS9gKi
5dtzD8P23ENqzxeoVntpd3DRjET2aJqWHfNwmG7vL+7x/6Kc1UmofHLF1Rhv
DF+UA++/eeq8/z8nyRIvhC5nBM8E6vHv6JTzHwH36P80lpCfvLNzQmeOd4t/
sSI+n3vzDgzvM6FexgVxgSAbd1iGmcek59iy1amlhtZj6JxbxhtNXPxt6nzG
XGZe9WuTO2g/DAY6iD7gW5rkb9GZs3H0JivnQX5jduqV2A9FM4N2h87TSBl0
lnOOxJ2Gfh2rlwz9vN/1j6FnDyK3GHrwMHaHoSePkq7skB4/dg4v9McT57NC
YtRRknjXlh7nbC4vppHwDNA/fYj+6UP0j/Yhcliq4t7aQXKBZ7266sLjgAEs
NDMfHc8DdbikQqAw7GQSu1UCmI2BbwyZMoA5EnBJrpkYMM3Yi3wLcZ1iSFc0
tJcVwgTQ2doa9eBto5TDDQNEzBB23aVPFzqRGH35qdcmfHoTQzxKT6OMptvA
AhSWar4uppkm1JQugQ+kDocRxh7xAfCjGvC3M8N78oKRS8zHwDXBv4UfklSD
ijku2IsTXUfxOyi1f9aZwInZuaiyV0DPeYwrjiE+L5FmUP0DTLoa13yxzyt2
U74Rc4EL2rBkrqD8tdaFGRBkpEy9RIB4yzNAsiUckwPn8EGUbhUZqvLJTVkt
qvnGyqnLCZgnkYzaG0DXag5XzkPSWs5H66i4JY3NU2UxXK1rtr7EcWlbXXp4
eILwa/cVUjlm9TxXRRyG4PBQNAkQe+9kBo0k6ybYQJmPCfZp2SzxLfvYBdC2
MgJEq3QWzMAMQghA5wOfL5t8cZtrXlG4lgQItIj4dvZ2RBN0/akkj3TQj0U1
o0bRG/6AO84buw2Dm7A5FhYAI/GndT5bd22UXiTPwuUt83Wru2MEp38QZQdp
w2EzYauGD2co/7ZUzhG+Pz9whcO+QUDartnXODmRJzHkmmphzQNCXuWYWVf0
QF2uzP/pSvGbaJau/eBeyuAc1fTUyuinRy1qQ+bHgeUgjUFauXYMORSsUuDA
JXycRne7fN2yXQM4/m5FjUyMnxMaKgcHxg0Y1dnRiiA6GKz+rjZccW1CguF5
ScQGxliBeXuXA4Yjni91KfzMnEXzlV69Db35EIBZMxLUEgD8C+Il1+Lg8Pc1
w8pHVO4Rflz4cz+T4yZsxlLWRLqLSoFafnybKhNlF4YkkpSYJguBdtEG2fZP
4iyKYzZZ+uTe1nnWOPnF7yS95lsQXB7OPjN3aCTWrnUDbbMo7UJ0TlmRMs5x
W8XZASMasCVXhz9HL9gRLKS5gBK5zeVK8mDdDuxN805z7m5N9+BARaKAqiD5
OYdgR4l0NfZqyUo/om1TdYeWUboE4PSZIyEaxGo8K6i+OF8hGbBL1uFHEkYG
47z2yvQh2+g4ylpq2mOlZ+zpZTMh8yJIeYwE2dvzwX7nQQYcimKVO+j0IEpw
YzFiTOUFNsbdUwuFCxVRryo7GVYAo+0PjHkO+96UDEY1Wayb+NoIAviCOCQJ
HSwFeiCa2eD8G/fjGN3zDwymmJ7xvSBAXw2CGiP3zZi/hA/ighi+qcc1hy+1
97MeRJjCimYkN6pk0URYnAd91K3JYi7NBofgIh88S7vGWArv6OLyBLm8rm7z
Zpt7tUQ/5jI4i0gLPLKDU5eVARRS1x9afULWTQDLoQgizlsUN7EANYvc4DB0
9WuHqWxIFtt8pzWPkQu2Tek1x1xlPDkOm0Ooj/4x29HdpguL5kJ5gV7TtoJ3
YTGgn+GDkMK+c9hU6N6K3DtNT18/74HIZ82wUGYnSmcpeZByMWn02DtHs9W5
AsnnZ3VGX68le0IkeGhcpmWV/Ez3gtjwFfWv5ZhYi6WD+CYu88JoR0nH9Mys
gg+dTNHB5XL0J+DlI2Jkhh0Ms1+jp5c40r10CsjFyd7g3EqFS0vdqLJ2W+OW
+E7cxR1EjCeovGOQo1xo8JYeGQ+KNWHUlEZuQ1wo1fgWDurq4o+V4ODKG0Vc
mAHbCluvu9IDm1cTjiKiYtMRnDhZwFiMtfFjkB6dcEuYRTadNh3n8luXZYKf
7zn0Sgj/eknsORE8CmGhJsMoWvPt3+soEDpi/l6yrQ6JbBylQS7ycc7IVuKw
ZaFJEKAZGMsH5ab7kks4cVmjKhdgqRIiYkGEaAcX20xE49BDP3rHeg/lfvYM
boA9ihEvvTegh6KNPCW+rWbP3noPc7B3Fc25LQjNoipHlpZ3wQM7W98tde9p
J+446MRv8o22I38DVVViivebgz2naDUti1s6PkxRTZzYag+TE+txul8OXHRw
EA5tVTmliq8uBqxuew2WW+ryuNNC28+hNDmBmhPbmf0oz2kTVPWz3frfNgwH
9ryEwFLlQeplt/8TK515WdNDSjIfEoKihkldHWVg9Dn0NnO9ZTQsTaoaHDW2
yAKHdltKRUmiGTPU1jdwtuCY9/mOzB321CECp8qDXgcA31prFmk9pcf3jlwE
t6/RaZJvfV6U4CCoq1t/qk1P5eOP3gKuqQXYuBe81Vt0uxa/V+1AxRuPUebk
Ll4a2XPxlmvcgQkU5buNB4gU8F8/S18yuXDPgiPuX8UNPjN9ebq/m6ocuBqp
P8/YCGF/+/NKx/VZyBVwkS5JeZZenF/9wEEYW4kKqvj48XKVlxdn9BXt1va0
YoCaQfruXbRA794lyf8ox83q2+4MMOb69gng2X5TFsghvkjPaUVbZLvYMiVi
ZfgmXohnbHP5zxv4F4/w8vzFriFenJ+fqz2KSu0YnJpD4iW9/39zZOmuocUS
8vYxer32H+OEVPathA44TDLmrc3tYdt0eBtQPCMPds2IOj7/42aD/vnshOTp
d1XV7ljxbQi70G8wsIdoB3aMWuxb8aAf7ho09WCRZ+V/+uY+g0bmCmqfnxmx
6oZYGYqPiENmNpRYjG0Ddma7eMCP/m+t8q4BP1fD4W6aNc9dAr+FL9wboLdA
xiN8vGuEy2z1nz46Baz+/Er6vBJmKLXYtW3jJDHxnTOgxkN98l85VJ/s3EL9
di+p8UIBOEqQL3Uf/nwGHqzaxoOtp9hMwNE83Nt5P/9j54G53Gvo0E+M7zLx
W3yGSNDRAGlvtfFcIcKmDLMRmrErOPl2JcE2lATTj18Zf6KuruIZ/InkXjav
FpKI3fwCA2UzjIjgC43l3nPwVhzMFHdC8zvs9WVE8ZQB6AwvZVBrI9iQqEVz
SmZ0sw6nxZwYwfM1y8p8M7GekFPxSrDwx48CmcY1Ipia/3D58RhF0FxBYOkU
QFpiYDrV0DUH+d1Ft8PBb5yxi840Vx1Np3cagHdydXpxIW40MfSSIBCgPxhD
M/AqXeBTCvLqqmZi6dKEfL5NBJ8iHWegGaJGoK0J8vgF7H8tjqod24OuNEDU
2puOhsankcnCF+iXWG5+uDqmFfwTE6H8Q/qn7vLzAaOn8YH4U0ofPIT74Z9I
Sil5YqJ//iRqC2c7+FMiGTJIgpxsOn4KyJeBF5PoOSdHy2v0PXAJCDMpsRxK
LNB7DJu2hwAOQP3ZqgE8aS2l0KCnoFR5zVpVpCkBi0N/htgD9S2zfAaoNs0Z
XQWGJ03NY2otSaFiKR5Prkdpem5WhDtuKbHs66ytYkQG3Vkx7GBjXhdfN4Z9
xSNN1iVDVgmgGHyEqTeMqqK+DkixBKg6/No51czR75ruE6ml8OlVmQD3J4PT
b28MoqHjFZBovgcgQTQOrF8sRIxMo94S2HsMGFzOvXFDFXKJGSH50Hsfb4eh
Jx+7ExgkkGIzpnyb+J2hqclpS64Bzy5aQVmupqDbReYGY78tqgXfxMmcBPga
x45lWZ1NIqLrhYAZMLSO5FzoVZRJVTyYRLXzIfDfRDc1Le50zcCVSGU65vQq
DlqfFQDWqlOB5aKwlbRumCohO2ZpzCzZq86WMw8gq7r2Sitr+DLKGkF0J2p7
ZSsPYvtzy5/GOUpEF59A/TDL73CUZMI8IElp0yIHCLYJtbvzwjGKKx9XS95c
BPY+l4JWUq/dqkqV382LPPDoCOhC06pu17bSat0m3H7jD4moZDBXzwy4QfeS
0EzD15Nk0stCTqzbfLwWsQNLEhghuIVDtDNKFTlxI0tVC+otb4DlyieMMTu8
FkgY5GVCfaMxzOtc8/LFudXci8YD99Odx5abcVa+Z7qFU1HTIGvsUtGvN5pd
wzQdE97s/6e1a1tu40iy7/UVHdyYEOkBIAC8DKV9oi15zAldGKRkv2mjATTI
HgHdGHSDFGbkf9/Kk5eqaoCUvGtG2CEA3XXNysrKOnlSndZ53HQdl/CVcoHa
zVySBxXX3V/azsX5huj0yCmvSQLt/QnzQcdKZDvoTEas9xqxo6LHMaEqLA1u
Krz0eZs5ajPuE40iJmpZWnG2m7pOHnBcFeO0cEsnPjG+FqSfdjJSiZuUe4HS
KheBneIm72lk2sfJFnk8cS9EMMp6Xsw6j0DliB1B0BatJ5nNwGUY3aA3pmsy
WeW8H0VrzGiSnCE9dlbTCmkYWNfC479HaEheXMAkiLj0AmtPbdnSZH/VEu36
Xdefuy+9ySnrLxkKvXf2lTJOqirC/sjKBfrB3S7qCaZqY+6wfLqumyYxomSH
1QPq43urbuSP7a9/3z3AUltgrgqRcAT988PZkIEbZUyEMisrvhQFpY6lIaCt
o2vQLPIHc/3KvuXVKjY2ZXXyM1w1qtliWyTgqnTbkZnArRKzNjV6wYrvv9EY
Zk2z8v0Ae4XESXzNX5He+xU7YKNUJp5gqOoYydjwBUexuoPFzso36PE5E7nr
UGAfEjd5I/tVMjZI+WZuuh1RUCfclGf+Q+yXS+UiGHkRN855ILMJ5KD6IyHe
5+kl3WrF+gb38IwHifGxJDA9WsPkN/eSvtjyHh64AZ0Zx/WeuUtuPHg1EKf9
VRSs49xVyPIQ0kJ0t2VJ//o8pHFQc5notl3ncdbkeIL4eELaeMXDpkXBLvP9
ctBtfv9uCWsrh7UUhCrwDFbdyN0BCLJW5awDUcidXMhzl/XJ0FU5THOZjpNX
Ej8I1z3fRHWTOErdSr5BjGiThd7Ge8OQN29OHcjTQRgTwC+R081b/4psQiK6
faPvTelmU7ZImh6SLPpH67Xcadv8PdYfJ+2M+lM2AspkYAcDFlh9dAvIK0ec
RGQYHjaaCvuE+Znm9TpLQaQH8uzBUU89tl39tNNKs8a0HiP8axlfJePolwgA
ADRGygXe4ymlA6/XLtU0EP7vGUxXis0LQiZw08El3fgVgzSvtdxLH/K1Pg36
ERs5kVgg3HBKl49yO/qh00FaV2+1SncNRDWmp/PcHxiEntsZNZL4Vd40Zo0i
KceamSMBZ1gWszK3a2rJypv0P6KHPzyg0pW55MByoEcp4z50NxvJ7ipP+kmg
cr10ImnK2sskjCi+xydxI/PYEdCJmkrm0MavKjLI1sg5TOqMurnIAcmw5KMJ
/IyYyZZ+XIl6EmkRayyifXIlI8i1gL4z5HZyhDXBal0WfsS2R776t358akMY
82u6bqnb9MqudpmVFDlIcBg70bJU6UQyo1PJtxiW/7EmI6qgW2sx1B55KaD4
eZ0rb/kHa5HuYI7SiQH/+eQ+1MsOkq1MKdxx60+p2dxmxck2eBmFjE7Rzk4k
Pwd+yDSNSrofumQzwz4M5HcutEX+xRSJSc5bYcphvC1wIzjIMGiktSRY/sBE
xzpJnrlFG8DZw3q2k2ZzsnXBl8QZqXI+EwvcKLggNMI7TLUNUd44aRfcNZGD
qNdZaSG3tmTKIE/Jupzd+sNTvVxuKnG/NQqljhWdRCOgDt+viwbpVMhol9t3
d/36p/dv375+9+r1K+4NIDdJ22QTlIHrGfhHlNcCZ+/bIgLk5ISp4HMHEjhY
zuWmm6qJt2qnO7ciIQtzl4W8Oh0DyQRCjDXhg2WJ+Ack4mJBNE236I5LLkBh
/2jDWUQMDfU6tO7wH7+9Pgo4R/+rC5l+/Y83RynoqunFB4mEKlQTb3FLnV7p
YLx4+b3VI5QSecKP1wGs9To0vvCB6kTtkRTw7jgNaokEI7KKI4+k+iLjlCnW
Epo6oRwgiDEyodivnAiqm2lFnN6VeD4plj8cFcO7ZL1Yq3cwgEZ2pzLrrVJS
tYw5gvamKPvoBBSUONlEdOiMFoG3BBP26yxZRraK9jTTtgyJhxQ4pJqUvdQ0
jiHxVdgm+HTE90HMu9veRWPCOEsvu+m0iuvUrgIP/dmvbpmCmqT7gB+QlAJ4
j+ylWcHWNJn+lvldpIG+s8xs2FFJKiu2ACzqgfPhJUFHtbg407kv6JqHr18P
DygXT9P6lbwMTx0cRZqV9X2sCRR2KSgpJ4e93X7tmzRtnTUXMTRbt6cdltJN
1VauG6Ulg8HGrgnIHBNJqwrvcy4+1SZeJAfkRH5zc9RzIRjAD+FmGWbLDMiC
0aMqGiUB/30rKN3UlAOuHItr1Bnhdt7XlRAkaTg5NsNcHq1UPm5U+7aheMsI
I03N2DeDCvBi8hiL/6IQzewdddwXQ3F+vf1v8+ZrzdKJkJOubczKulGbkmw1
AIDL4tNmv9/PJvn0MxLTqP76z39piMbv0Km/UvTXDSfc9iWFODdf9wOzjhCA
1W+1t1UNdlrwomfv1UC3TPMW6U5y67QESa3hmKHjuVLhPY8uvUYvs4N/1sVB
Tx6RSOz4ieHL7O7Zi5Pz+fn52XA2Os5Pzo6L8+KZvgIvVfyGP+zTK8PRi/P5
6TA/mc/PpsPT87PRVEs4Oz4vcisgCd/mAk5fennYFPoEx3ELXRueGZ0Rs4f/
pxG2hZ/lpRBZfehPUERCmfmXRoej0/HZ6cn4/MXJkfs9JNWQWeI9IeABeuCp
UWx7inFqOuO7O3j/5yH8kwYy+87hlOceH9SnRpX/umObNCqK3LfKTqQy0W+B
9Sl7f2PVWcx8NvaDyAPNv8zLNYVQ4XcEH11UszWRoFwEBgkphv4Oop+zn+v6
IHuZReU91lZqJfHTxRRWUam/e7UaXh/T3ikNuoh1iV4cypFHMmNGjUvDu7LX
eevb12kcbdMa0Qhzg6k8EAhFZ3iL1ITyeJ68fffsZDwcjY+fJe09Xof2xvYJ
Z0t8U1abLzaqUWOTHw5e/gmj6Pj/thp5QbziyNprAU0UxlzNzqyrdT2xTBPi
4VlMxWcsOQxmwu1d6NluEsUt515ja2F+U+ILAcCY5f4W16iK/xXTdFWvtAo9
aVjaUfY7WZh5dGVjTjtzIJM/dsIxHx/u1kURBT02Fsc14aDtdRxeP4B3LqQ6
FQ+3o5sMdr9bVlE/sUQFjozS4pg3hzhiSXOYDhRBnC3oco32RvmdPEdtLfgM
RIqu/He92PHNYGjKZlBWIf9yzyE6WRssybzV8EY13ppbTBridI4CBHHhG55c
6CkAca8TCdztsTEnqtpypVNyhjXzjsUec726Y3tnZhBujkJuwiREYZvepMLd
xmj4FzWMfBcXM0I2hKkP404EEXo9ZVPmBDtQzcjfYkei3I+2r6hEWghCxUsA
rBe1Wb4VTJI+0udHQhtB1iVTCkKxZttv6365zG9LXEfmWAq1pt2q6E7Tm9j5
jFpJRf9rk88eK50QOSI2OUxtP1XLMkk1zTVhO8Bsm4E0gbOWLq6nQDDN+Aac
qhwNh3G1qG+mFVJYqSQYwcDeF5aXtqzu6wVALFVe1b6KulVDnowmFueeb+O9
n0fKr5nDS8aheTVtUQw5cZNyPVM5sIR9hC2jhIuZ0iT7dbnYNuVu5jROWDP1
D5MgwkclWAjK2lsbVCG7vNKcJTBQVRknAj1lWLyggDBFLa2fAfMMqStHn3Ka
+oPW7WSD8/V9mUt0oO979dl/8+NiU7R13d5FKdAzpZh2Gi8Djw9N1YI4Aeho
9W9amaHV4B/5ml0VNa0s+vsqOTpo871ixfKVDCONoX+uOTy+InAVk3pFeRXw
oH11Q2Ib/r66r/3o76/9nb89X/Wz731QfvE9GQ2ziQjdV4hh8offd/6+Ytl3
vrI1ezgafhqNj8Ive2rpDeOa/kAt8SJBRadHVgu1PqqF6ojr+QO1dJcjavrb
EdUSTh/ijmSZbSxvNOTox9Ifo7yywu5LssR+26XAEV3Yl2zjnMgrTU8vjI/P
TtlP91lRjGELXUEATXMTvuS72nPRtoSdQnOc7etG6uIXOkUz+08EScjmm0p8
vJ3N1ZKjrvh+dekVU0jgaOZCammYTbUCm3E/Kz79p//50/j54bg6YuMmPJE9
YsLIA1VGOTQSyyPsO/rQZ//fBecqiH4MB3xtMHQlU25IUBXrVVFlgsTUbhoi
U1N6Ok7pSRzy3F5S2Jr3J2BV73M/I3zLbwOjdBo3v3G8tR+khg+6uNT6Ui7N
TGOaJc4ZpdPJs0lhmMFepcH1gwo7O2PfVtux+tRkjt55erRpuHW0bXM3ooAg
zCCr8N1DgFIWZuEqvAWTT7dTUqWPasBsND7v+xLZyvUfX4zjj+PTs+hjqi6f
0n/f+Oie0mTj7AevGz71R6f4eC4fj/njqXw8xUf3lLLSgoYvkoLGL5KCTl5I
QY/rIysobdE4bdEJt8i9AyCH/PMiDN82+InDTKxT+Kq3Rb72Rp4T/IZ4dm1G
1Xe+Y0um9hmsDEdp95SZoS3koJAnRqW9xsGAjESiNgwSPJfbsRkjoxX2F6yP
eIdAnXF5hGtyqJbIG+Tnu1xyyk4IF2bDNntizJSICUOw0uWbk33ctP0pjwGI
wloZJsE5ktPQ8VB0e4/thnoKtAKlglKost0uml8SJYCuQ2zdTIl3jYMmb5QQ
RkY1Dpe30O167Y85vkqb5HnxoBb5oMu1hkvTRvIC4lxYLuW++Z4S+fmT3SJg
t/Lu+LlY6EyztEIDxpBSIvGt5F4r6JzOPLq8s1XaGUKcq+FEGTRgK/T6h4ef
/f9HwyO/blZHLvo9+0Dd4V5ETXV79GfcM9phoKBI6p3pw1fxYvgDSjD789Tg
/08RnrFlRQPeiMX0aXyin/HxJHx8UhWekyOkrmZNML4+jdKijpOiHleG59my
JIyflMdFjdKiwkdi1EEYdo8GWfYuSrSF20YjJ/CPeDuoZUTORkGqlq2Qly6c
Ig4ss7jK2gBGocUaypnTJ8VvUzV+Crl2nG9pcT5xAm3cTqi0CHbcUgbMK/MO
WY/EPeyPwUFyO16gnK0gKClm2aDrKylus5pFWkkpL4AM95qM0ObF7rjU1rEe
Gze29rvD57rhGxG4W+/MYjkX1Oa7OpMkjx8/ensjinFgsnj6VmBJozEh7SYM
0OPslNO7upwG5oVAMBDA81QAm7445POB1GSF3YmKG0DuWpMcRtNg8JxxRZEY
0Az3UkBx3882lMXaD6tX5kpSiIgIMxqh59mYdD9dfWSzMbCWYccxhixClBh4
YmYXROOhPwHRe/4fpwP3fofvDUiDuG2+45M1IxgQt8D4Jj5V+ApdaADddVNQ
GqWEiUC6vmPtgmRT7oQ7M01nd043upm27GyTURBDPGWga+rNmk7avDWUa2HG
0rimk4xnbFZzVIbRd9E2QWXvH3eXDjzjknwZhNkndwPnbALDE85IiFJYsHi5
wPBDq4M2CQzigpwt3AeZnPAg03JVteOYOgwVMocR2Qtv81+IGSrTZLYN3IG4
qjM0THSElHRsLJRgt6CpX21NgpvCn0B96wOJBLMxKuJyWlR+jusmSjIXYUYd
pYQLHhwCIwDcva4XmXnRYto+sA/h/q8iYYEJBXyXzTRVTBObEG+xJ3DAi5hJ
t3A4Iyg4tIQKWy+wvwlINABAOcQLzEoBgWWdcawgKkQn8TEL7JjgeCcSOxry
PVWnguP2LliFLNcGhchnZXLuyxu7BA0aj/V3mq/Xr++wtBFeR7cj14Voaz+T
RIIwOB+OB6OLaw2gFzfTpUYtHPovLl8dKa+QwL40yWZj4TbMkcIDwMz3fE9S
oZbsEsV4PRrX6ZXpulhw0EbN1ywpeW7diVrz3dgpoQZlLY0WnIyM/u5kR0z1
BRngC8JLZAfcqre4fRwcEM9Z6BlFHHGzWaW90X8LppO4ngJmFpGYU+HCZSh7
niXF+50luqQQQk5ybc8lhoeRZzn7VropmpludSbBcVp0SDrIHuCSk9KVchZ4
rPmcz1nwOPUKCDr4a8RHavgHdgNH8TV6FUOKEKeDVqJD9Hkaf26bl5V1EaJ5
DNwtN7cAaZt7CRErfHBomnpaJoQVXF7CbGaBLBL94dyPW9YnedP2JB8tDUyz
0ydG8hPSAKjZTUM/Ewmp7En5nlgRNmuYqTTOhhiR6nUFc+DeEX5ZtR42PknT
TDsPSRdB1nscSKFjGknXI8I1cF16SQIWI801RxXf007L56FwzeVNQLn+6VpJ
Xv3cUrd4j2T8awzdpRXUKJAG0FXyS3lBhQQ39nv0DggDrefKFEgY9O+W/x6g
VF75RUG3UdLvvYESkr2cBkskhtGtpIAZHoVtsUTnyUolJIzI5i1zgtRrfaxo
BYQYMCk6gKoaJa6FzUiu8SOV9hvNAyAmFxJfZDmJU8nMd2WTGr+j4iSb6sD9
SvUjDkkKkjSrRsaYW1BXR+WFQaF3fJN/KQBTA2gwtxDRnfZw+EDQNqY5WN8k
K31CGEfZ9OKE7gSbTlQAQQbj9znqqolXOPkUQAlMRTJ4CrTBbO43EcnYr5JK
nvn8xEnZBMCVXhxLVTDDmUJXOOUemWCkp2dct90C8R59pIqP4cWt+tWxVx0i
VYn/V3iKaz7EEDA/QRH6cmS+Lq0+qStco8n5TBNW+ub5neExBRkoO+W+kEjF
6xl1LTeesU1jB5el7Ct2e5U2ol7bCYftKtmE4N5P2pC8xyvjl5r58a94nDEA
rwNX3H67gx1DVFlPQo9pHgVsyOBDREUzeRMz8u7wzwkEpLtujWl173jm+0bz
A3a5DstAIB23bGE0dCiJ91xlWYzij7nyfbVoU1jBa2CxhBUJqTrdg5ryiBS9
kPEaNScwdei9gd7vi20eIlga4xdB4Oi9BPgsFd2WxtEJALO7qB/uimgdJAHZ
zCra8IJvIjy4Ra/Tqaxo7rDrwrsr/oWBY2Bo0kjsiuGswffSVIdVKSTbNMqK
XMZ2LaN/Twqfzxl0uoLs/P3qxkL2/JiZLrNR6wqOzOz+EZMx2hdFpgubdB9e
gfTlXREjIYnEIUJ0YuRmfC5JK4FPM6mFpKUCAam6ZSX3hrTejxDtykaLd1Or
U97UpkLwpWDrP/MzNB3hUAXLi7NDJALLglEs256bsPBD7UbE12l1kZwI2zF9
Oykr5TWEKPJpVZqwt2EDJ9yEulNG1Ppb2F9x5WyLGQjajn8wzCSCqzsesryD
la5Zmzu2jIbpdfZkBeKQ5kJfYAg1nbcH7n2lXAwoBSBkYFXLQIwtsQZ8HBUX
kuzdROE93Ve/chZH52nq2JovB6KzI19EMEcw5wqn9+LDZ2Cbp8gshvtod/Rq
lXeDi0qIin+23OOaaSSwP0b00sKuy3TQsQZmHusd0uMd9pvkJWY1oEAvTn7o
S+YS7o8zy2jd6O4JbFXcqqbdzGmHeLir/RfIaaUJmDZVBOTX3INY5Xua6C7n
PDs7vwnxrRyXfU/42CaXx2ph5RUvNhmcTRNMHX5RDdodiA3/DGohY8BIToOd
s15qCHIuRDu/hR2XrTlqQ/BQt3LlonaP3BFKcYK2yadtEB5InjI8sE0dbALY
Y1eClZ0WbO35jziBrOz7XjR8vCL0iCkkCmVlo2GgIqEmNT/UopwXqVoVAtUp
O6lrgZLB2WK7oG4XyBfk18EWEIeYOyVuTSVTqyVLE8yApzb0p1siriI5hP9/
92Rg3oplnEUoDAcNvN/OykZjZFipyK7YFMXniJqVOkENkuGLShFVYecYruYB
GCpWQDtNI/8kXDM0+9/vm5FD7PefFMXa6RzIpcakoD1HIiwEnHjoC5yFiwhv
qFJPPuv4x0cUNQcobLDHPktI96OhLCOxfaxHTO6UDlVcRJOUYpfoSpZv8gPx
Yd/fT2IM4Jh/pbe8r9b5vN2X8Yq4ZZiKjnnVpvHryUXxDEUoCg5vAQpX9UmV
eBFoATa0bL3LQiTxrlisMiqFCIHgXg4bMinDqjUekKkm7PoZ6Wqoxr7vctOn
HHHDEdHBXACqLQRCsLTWCmXOYB3Myi/dIvx4zrb5MipqGKc/mucleSEZ0pPm
IKxDnizTE0JlxuFTFScyk20n4l2mZoK/5kZ4A1IweCU5JQA9FT8ipQ0d0Bt0
rVepsZ1Heb78j3SHhVzGvE/pLQFMp7pu/yeAIzpsYt1B8UeKeXdwf/JjECIb
JZQUOU1LzWoFrl0u0r/wtqzIv7cqFguN5uAda15+AevohRAeRqztSLqBcLR/
tqWU9HTbxtS2ay+2OIC9/njZIAyIN17jdEGCThohQM5FkyGcnSaO0OB+B7tt
7xrc4Pboapyvt07PBkGyVIbg0PGNpG7F0sahfP9moukbCaRAomiiKJMjSaNx
CkUg4WLrfKsNozzCcPi5TO6/5AdFNoemF0vCFvyQvakZmI2xVQOZhCa0/hGP
mfvGAB+jM/4g2sZChOGNw18sQZBFsKho/SA0tfp9Ke4PigLjSHWKi/b/NKSb
0Od+s2knLvBzXr59fSlkzjzJbKCqaQajZXTSjwma6WXKxjulysh8W/FtK42y
/Sgmr3B7s9xTtlJ07CehTcnbmJGUDqpRPZplGzORlKaSINmu4S0w7170ONWX
HZp16Z9tjoy2xX8tJw4WprBWvV2Y3wrzHAyUSgKrwoO0BPU+Rw70EFPc68vv
dhes3JRhYgmqwt5pjBX23wckP0avBtl7TCqPclAWWB/XRcW8fLHMwOoPKUT/
29QBO9zN5y52+mRRsBqN8wtJtOTeJy85eU4nN8YOvSI723nNh5+U/koGTMcn
4nYsvqWyhqcmWCI3Qn7n7TPARHlUMVLg7pKtjwZmh1rK2vFobWdh9YccqdJE
mgFYPXyM7Oah0cIzK0FohJtoiL7dgr9RRT+rQHBSz7ATNPHuEeC3dNA1PlOL
5QW5Dz344HcUL/aUDKglh+a39rDheaQnlDRZkpKxkijRGn84uH4D93+F5Nyx
SqKEhU1rmuPRql44FQvmO9NPtnUgQyrUwqUe0/j8G6lpXY7qnH2t6Wdp5C4i
B9w1uBsaHWO1TGgZi7c08jI35tSe5mXLhCAqx9eIsrZUmtFC0KxzIMOYso+L
y292KgidCLl0kxRrlkc3qBBoINaTnOEY0VNcuXyh2AscC8C8wC756OdlYek4
05V8RHUIK+8vv6kK0ywRmuwjNwYnfotijB7sip2sYvG+M78IZ/9OqXp3bNMg
FKMhNeKXrhoF2+NMtlISsfU6Z7KUhzqRPfqsA/a/zeYvsvquAQA=

-->

</rfc>
