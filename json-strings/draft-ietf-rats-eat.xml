<?xml version='1.0' encoding='utf-8'?>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.4.12 -->
<!DOCTYPE rfc SYSTEM "rfc2629-xhtml.ent">
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" obsoletes="" updates="" submissionType="IETF" xml:lang="en" tocInclude="true" tocDepth="4" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.7.0 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@island-resort.com</email>
      </address>
    </author>
    <author initials="M." surname="Ballesteros" fullname="Miguel Ballesteros">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 4299</phone>
        <email>mballest@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <date year="2021" month="May" day="27"/>
    <area>Internet</area>
    <workgroup>RATS Working Group</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides a signed (attested) set of
claims that describe state and characteristics of an entity, typically
a device like a phone or an IoT device.  These claims are used by a
relying party to determine how much it wishes to trust the entity.</t>
      <t>An EAT is either a CWT or JWT with some attestation-oriented 
claims. To a large degree, all this document does is extend
CWT and JWT.</t>
    </abstract>
    <note>
      <name>Contributing</name>
      <t>TBD</t>
    </note>
  </front>
  <middle>
    <section anchor="introduction" numbered="true" toc="default">
      <name>Introduction</name>
      <t>Remote device attestation is a fundamental service that allows a remote
device such as a mobile phone, an Internet-of-Things (IoT) device, or
other endpoint to prove itself to a relying party, a server or a
service.  This allows the relying party to know some characteristics
about the device and decide whether it trusts the device.</t>
      <t>Remote attestation is a fundamental service that can underlie other
protocols and services that need to know about the trustworthiness of
the device before proceeding. One good example is biometric
authentication where the biometric matching is done on the device. The
relying party needs to know that the device is one that is known to do
biometric matching correctly.  Another example is content protection
where the relying party wants to know the device will protect the
data.  This generalizes on to corporate enterprises that might want to
know that a device is trustworthy before allowing corporate data to be
accessed by it.</t>
      <t>The notion of attestation here is large and may include, but is not
limited to the following:</t>
      <ul spacing="normal">
        <li>Proof of the make and model of the device hardware (HW)</li>
        <li>Proof of the make and model of the device processor, particularly
for security-oriented chips</li>
        <li>Measurement of the software (SW) running on the device</li>
        <li>Configuration and state of the device</li>
        <li>Environmental characteristics of the device such as its GPS location</li>
      </ul>
      <section anchor="cwt-jwt-and-uccs" numbered="true" toc="default">
        <name>CWT, JWT and UCCS</name>
        <t>For flexibility and ease of imlpementation in a wide variety of environments, EATs can be either CBOR <xref target="RFC8949" format="default"/> or JSON <xref target="ECMAScript" format="default"/> format.
This specification simultaneously describes both formats.</t>
        <t>An EAT is either a CWT as defined in <xref target="RFC8392" format="default"/>, a UCCS as defined in <xref target="UCCS.Draft" format="default"/>, or a JWT as defined in <xref target="RFC7519" format="default"/>.
This specification extends those specifications with additional claims for attestation.</t>
        <t>The identification of a protocol element as an EAT, whether CBOR or JSON format, follows the general conventions used by CWT, JWT and UCCS.
Largely this depends on the protocol carrying the EAT.
In some cases it may be by content type (e.g., MIME type).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
      </section>
      <section anchor="cddl" numbered="true" toc="default">
        <name>CDDL</name>
        <t>This specification uses CDDL, <xref target="RFC8610" format="default"/>, as the primary formalism to
define each claim.  The implementor then interprets the CDDL to come
to either the CBOR <xref target="RFC8949" format="default"/> or JSON <xref target="ECMAScript" format="default"/>
representation. In the case of JSON, Appendix E of <xref target="RFC8610" format="default"/> is
followed. Additional rules are given in <xref target="jsoninterop" format="default"/> of this
document where Appendix E is insufficient.  (Note that this is not to
define a general means to translate between CBOR and JSON, but only to
define enough such that the claims defined in this document can be
rendered unambiguously in JSON).</t>
        <t>The CWT specification was authored before CDDL was available and did not use it.
This specification includes a CDDL definition of most of what is described in <xref target="RFC8392" format="default"/>.</t>
      </section>
      <section anchor="entity-overview" numbered="true" toc="default">
        <name>Entity Overview</name>
        <t>An "entity" can be any device or device subassembly ("submodule") that
can generate its own attestation in the form of an EAT.  The
attestation should be cryptographically verifiable by the EAT
consumer. An EAT at the device-level can be composed of several
submodule EAT's.</t>
        <t>Modern devices such as a mobile phone have many different execution
environments operating with different security levels. For example, it
is common for a mobile phone to have an "apps" environment that runs
an operating system (OS) that hosts a plethora of downloadable
apps. It may also have a TEE (Trusted Execution Environment) that is
distinct, isolated, and hosts security-oriented functionality like
biometric authentication. Additionally, it may have an eSE (embedded
Secure Element) - a high security chip with defenses against HW
attacks that is used to produce attestations.  This device attestation format
allows the attested data to be tagged at a security level from which
it originates.  In general, any discrete execution environment that
has an identifiable security level can be considered an entity.</t>
      </section>
      <section anchor="use-as-evidence-and-attestation-results" numbered="true" toc="default">
        <name>Use as Evidence and Attestation Results</name>
        <t>Here, normative reference is made to <xref target="RATS-Architecture" format="default"/>, particularly the definition of Evidence, the Verifier, Attestation Results and the Relying Party.
Per Figure 1 in <xref target="RATS-Architecture" format="default"/>, Evidence is a protocol message that goes from the Attester to the Verifier and Attestation Results a message that goes from the Verifier to the Relying Party.
EAT is defined such that it can be used to represent either Evidence, Attestation Results or both.
No claims defined here are considered exclusive to or are prohibited in either use.
It is useful to create EAT profiles as described in <xref target="profiles" format="default"/> for either use.</t>
        <t>It is useful to characterize the relationship of claims in Evidence to those in Attestation Results.</t>
        <t>Many claims in Evidence simply will pass through the Verifier to the Relying Party without modification.
They will be verified as authentic from the device by the Verifier just through normal verification of the Attester's signature.
They will be protected from modification when they are conveyed to the Relying Party by whatever means is used to protect Attestation Results. 
(The details of that protection are out of scope of this document.)</t>
        <t>Some claims in Evidence will be verified by the Verifier by comparison to Reference Values.
In this case the claims in Evidence will not likely be conveyed to the Relying Party.
Instead, some claim indicating they were checked may be added to the Attestation Results or it may be tacitly known that the Verifier always does this check.</t>
        <t>In some cases the Verifier may provide privacy-preserving functionality by stripping or modifying claims that do not posses sufficient privacy-preserving characteristics.</t>
      </section>
      <section anchor="eat-operating-models" numbered="true" toc="default">
        <name>EAT Operating Models</name>
        <t>TODO: Rewrite (or eliminate) this section in light of the RATS architecture draft.</t>
        <t>At least the following three participants exist in all EAT operating
models. Some operating models have additional participants.</t>
        <dl>
          <dt>
The Entity.  </dt>
          <dd>
            <t>This is the phone, the IoT device, the sensor, the sub-assembly or
such that the attestation provides information about.</t>
          </dd>
          <dt>
The Manufacturer.  </dt>
          <dd>
            <t>The company that made the entity.  This may be a chip vendor, a
circuit board module vendor or a vendor of finished consumer products.</t>
          </dd>
          <dt>
The Relying Party.  </dt>
          <dd>
            <t>The server, service or company that makes use of the information in
the EAT about the entity.</t>
          </dd>
        </dl>
        <t>In all operating models, the manufacturer provisions some secret
attestation key material (AKM) into the entity during manufacturing.
This might be during the manufacturer of a chip at a fabrication
facility (fab) or during final assembly of a consumer product or any
time in between. This attestation key material is used for signing
EATs.</t>
        <t>In all operating models, hardware and/or software on the entity create
an EAT of the format described in this document. The EAT is always
signed by the attestation key material provisioned by the
manufacturer.</t>
        <t>In all operating models, the relying party must end up knowing that
the signature on the EAT is valid and consistent with data from claims
in the EAT.  This can happen in many different ways. Here are some
examples.</t>
        <ul spacing="normal">
          <li>The EAT is transmitted to the relying party. The relying party gets
corresponding key material (e.g. a root certificate) from the
manufacturer. The relying party performs the verification.</li>
          <li>The EAT is transmitted to the relying party. The relying party
transmits the EAT to a verification service offered by the
manufacturer. The server returns the validated claims.</li>
          <li>The EAT is transmitted directly to a verification service, perhaps
operated by the manufacturer or perhaps by another party. It
verifies the EAT and makes the validated claims available to the
relying party. It may even modify the claims in some way and re-sign
the EAT (with a different signing key).</li>
        </ul>
        <t>All these operating models are supported and there is no preference
of one over the other. It is important to support this variety of
operating models to generally facilitate deployment and to allow for
some special scenarios. One special scenario has a validation service
that is monetized, most likely by the manufacturer.  In another, a
privacy proxy service processes the EAT before it is transmitted to
the relying party. In yet another, symmetric key material is used for
signing. In this case the manufacturer should perform the
verification, because any release of the key material would enable a
participant other than the entity to create valid signed EATs.</t>
      </section>
      <section anchor="what-is-not-standardized" numbered="true" toc="default">
        <name>What is Not Standardized</name>
        <t>The following is not standardized for EAT, just the same they are not
standardized for CWT or JWT.</t>
        <section anchor="transmission-protocol" numbered="true" toc="default">
          <name>Transmission Protocol</name>
          <t>EATs may be transmitted by any protocol the same as CWTs and JWTs. For
example, they might be added in extension fields of other protocols,
bundled into an HTTP header, or just transmitted as files. This
flexibility is intentional to allow broader adoption. This flexibility
is possible because EAT's are self-secured with signing (and possibly
additionally with encryption and anti-replay). The transmission
protocol is not required to fulfill any additional security
requirements.</t>
          <t>For certain devices, a direct connection may not exist between the
EAT-producing device and the Relying Party. In such cases, the EAT
should be protected against malicious access. The use of COSE and JOSE
allows for signing and encryption of the EAT. Therefore, even if the
EAT is conveyed through intermediaries between the device and Relying
Party, such intermediaries cannot easily modify the EAT payload or
alter the signature.</t>
        </section>
        <section anchor="signing-scheme" numbered="true" toc="default">
          <name>Signing Scheme</name>
          <t>The term "signing scheme" is used to refer to the system that includes
end-end process of establishing signing attestation key material in
the entity, signing the EAT, and verifying it. This might involve key
IDs and X.509 certificate chains or something similar but
different. The term "signing algorithm" refers just to the algorithm
ID in the COSE signing structure. No particular signing algorithm or
signing scheme is required by this standard.</t>
          <t>There are three main implementation issues driving this. First, secure
non-volatile storage space in the entity for the attestation key
material may be highly limited, perhaps to only a few hundred bits, on
some small IoT chips. Second, the factory cost of provisioning key
material in each chip or device may be high, with even millisecond
delays adding to the cost of a chip. Third, privacy-preserving signing
schemes like ECDAA (Elliptic Curve Direct Anonymous Attestation) are
complex and not suitable for all use cases.</t>
          <t>Over time to faciliate interoperability, some signing schemes may be
defined in EAT profiles or other documents either in the IETF or outside.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology" numbered="true" toc="default">
      <name>Terminology</name>
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in
BCP 14 <xref target="RFC2119" format="default"/> <xref target="RFC8174" format="default"/> when, and only when, they appear in all
capitals, as shown here.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519" format="default"/>, COSE
<xref target="RFC8152" format="default"/>, and CWT <xref target="RFC8392" format="default"/>.</t>
      <dl>
        <dt>
Claim Name.  </dt>
        <dd>
          <t>The human-readable name used to identify a claim.</t>
        </dd>
        <dt>
Claim Key.  </dt>
        <dd>
          <t>The CBOR map key or JSON name used to identify a claim.</t>
        </dd>
        <dt>
Claim Value.  </dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>
CWT Claims Set.  </dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
        <dt>
Attestation Key Material (AKM).  </dt>
        <dd>
          <t>The key material used to sign the EAT token. If it is done
symmetrically with HMAC, then this is a simple symmetric key.
If it is done with ECC, such as an IEEE DevID <xref target="IDevID" format="default"/>, then this
is the private part of the EC key pair. If ECDAA 
is used, (e.g., as used by Enhanced Privacy ID, i.e. EPID) then it is the key material 
needed for ECDAA.</t>
        </dd>
      </dl>
    </section>
    <section anchor="the-claims" numbered="true" toc="default">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation. It also
mentions several claims defined by CWT and JWT that are particularly
important for EAT.</t>
      <t>Note also:
* Any claim defined for CWT or JWT may be used in an EAT including 
  those in the CWT <xref target="IANA.CWT.Claims" format="default"/> and JWT IANA <xref target="IANA.JWT.Claims" format="default"/>
  claims registries.</t>
      <ul spacing="normal">
        <li>All claims are optional</li>
        <li>No claims are mandatory</li>
        <li>All claims that are not understood by implementations MUST be ignored</li>
      </ul>
      <t>There are no default values or meanings assigned to absent claims
other than they are not reported. The reason for a claim's absence may
be the implementation not supporting the claim, an inability to
determine its value, or a preference to report in a different way such
as a proprietary claim.</t>
      <t>CDDL along with text descriptions is used to define each claim
indepdent of encoding.  Each claim is defined as a CDDL group (the
group is a general aggregation and type definition feature of
CDDL). In the encoding section <xref target="encoding" format="default"/>, the CDDL groups turn into
CBOR map entries and JSON name/value pairs.</t>
      <t>Map labels are assigned both an integer and string value.
CBOR encoded tokens MUST use only integer labels.
JSON encoded tokens MUST use only string labels.</t>
      <t>TODO: add paragraph here about use for Attestation Evidence and for Results.</t>
      <section anchor="token-id-claim-cti-and-jti" numbered="true" toc="default">
        <name>Token ID Claim (cti and jti)</name>
        <t>CWT defines the "cti" claim. JWT defines the "jti" claim. These are
equivalent to each other in EAT and carry a unique token identifier as
they do in JWT and CWT.  They may be used to defend against re use of
the token but are distinct from the nonce that is used by the relying
party to guarantee freshness and defend against replay.</t>
      </section>
      <section anchor="timestamp-claim-iat" numbered="true" toc="default">
        <name>Timestamp claim (iat)</name>
        <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
        <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even 
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
        <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. No token may contain an iat claim in
float-point format. Any recipient of a token with a floating-point
format iat claim may consider it an error.  A 64-bit integer 
representation of epoch time can represent a range of +/- 500 billion
years, so the only point of a floating-point timestamp is to 
have precession greater than one second. This is not needed for EAT.</t>
      </section>
      <section anchor="nonce-claim-nonce" numbered="true" toc="default">
        <name>Nonce Claim (nonce)</name>
        <t>All EATs should have a nonce to prevent replay attacks. The nonce is
generated by the relying party, the end consumer of the token. It is
conveyed to the entity over whatever transport is in use before the
token is generated and then included in the token as the nonce claim.</t>
        <t>This documents the nonce claim for registration in the IANA CWT 
claims registry. This is equivalent to the JWT nonce claim that is
already registered.</t>
        <t>The nonce must be at least 8 bytes (64 bits) as fewer are unlikely
to be secure. A maximum of 64 bytes is set to limit the memory
a constrained implementation uses. This size range is not set
for the already-registered JWT nonce, but it should follow
this size recommendation when used in an EAT.</t>
        <t>Multiple nonces are allowed to accommodate multistage verification
and consumption.</t>
        <section anchor="nonce-cddl" numbered="true" toc="default">
          <name>nonce CDDL</name>
          <sourcecode type="CDDL">
nonce-type = bstr .size (8..64)

nonce-claim = (
    nonce =&gt; nonce-type / [ 2* nonce-type ]
)
</sourcecode>
        </section>
      </section>
      <section anchor="universal-entity-id-claim-ueid" numbered="true" toc="default">
        <name>Universal Entity ID Claim (ueid)</name>
        <t>UEID's identify individual manufactured entities / devices such as a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire device or a submodule or
subsystem. It does not identify types, models or classes of
devices. It is akin to a serial number, though it does not have to be
sequential.</t>
        <t>UEID's must be universally and globally unique across manufacturers
and countries. UEIDs must also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then relying parties receiving them will have
to track other characteristics of the device to keep devices distinct
between manufacturers).</t>
        <t>There are privacy considerations for UEID's. See <xref target="ueidprivacyconsiderations" format="default"/>.</t>
        <t>The UEID should be permanent. It should never change for a given
device / entity. In addition, it should not be reprogrammable.  UEID's
are variable length. All implementations MUST be able to receive
UEID's that are 33 bytes long (1 type byte and 256 bits).  The
recommended maximum sent is also 33 bytes.</t>
        <t>When the entity constructs the UEID, the first byte is a type and the
following bytes the ID for that type. Several types are allowed to
accommodate different industries and different manufacturing processes
and to give options to avoid paying fees for certain types of
manufacturer registrations.</t>
        <t>Creation of new types requires a Standards Action <xref target="RFC8126" format="default"/>.</t>
        <table anchor="ueid-types-table" align="center">
          <name>UEID Composition Types</name>
          <thead>
            <tr>
              <th align="left">Type Byte</th>
              <th align="left">Type Name</th>
              <th align="left">Specification</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">0x01</td>
              <td align="left">RAND</td>
              <td align="left">This is a 128, 192 or 256 bit random number generated once and stored in the device. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the device and stored. It may not be smaller than 128 bits.</td>
            </tr>
            <tr>
              <td align="left">0x02</td>
              <td align="left">IEEE EUI</td>
              <td align="left">This makes use of the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-device identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while devices with multiple network interfaces may have multiple MAC addresses, there is only one UEID for a device) <xref target="IEEE.802-2001" format="default"/>, <xref target="OUI.Guide" format="default"/></td>
            </tr>
            <tr>
              <td align="left">0x03</td>
              <td align="left">IMEI</td>
              <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which SHALL be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded SHALL NOT include Luhn checksum or SVN information. <xref target="ThreeGPP.IMEI" format="default"/></td>
            </tr>
          </tbody>
        </table>
        <t>UEID's are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
        <t>The consumer (the relying party) of a UEID MUST treat a UEID as a
completely opaque string of bytes and not make any use of its internal
structure. For example, they should not use the OUI part of a type
0x02 UEID to identify the manufacturer of the device. Instead they
should use the oemid claim that is defined elsewhere. The reasons for
this are:</t>
        <ul spacing="normal">
          <li>UEIDs types may vary freely from one manufacturer to the next.</li>
          <li>New types of UEIDs may be created. For example, a type 0x07 UEID may
be created based on some other manufacturer registration scheme.</li>
          <li>Device manufacturers are allowed to change from one type of UEID to
another anytime they want. For example, they may find they can
optimize their manufacturing by switching from type 0x01 to type
0x02 or vice versa.  The main requirement on the manufacturer is
that UEIDs be universally unique.</li>
        </ul>
        <section anchor="ueid-cddl" numbered="true" toc="default">
          <name>ueid CDDL</name>
          <sourcecode type="CDDL">
ueid-type = bstr .size (7..33)

ueid-claim = (
     ueid =&gt; ueid-type
)
</sourcecode>
        </section>
      </section>
      <section anchor="origination-claim-origination" numbered="true" toc="default">
        <name>Origination Claim (origination)</name>
        <t>TODO: this claim is likely to be dropped in favor of Endorsement identifier and locators.</t>
        <t>This claim describes the parts of the device or entity that are
creating the EAT. Often it will be tied back to the device or chip
manufacturer. The following table gives some examples:</t>
        <table align="center">
          <thead>
            <tr>
              <th align="left">Name</th>
              <th align="left">Description</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">Acme-TEE</td>
              <td align="left">The EATs are generated in the TEE authored and configured by "Acme"</td>
            </tr>
            <tr>
              <td align="left">Acme-TPM</td>
              <td align="left">The EATs are generated in a TPM manufactured by "Acme"</td>
            </tr>
            <tr>
              <td align="left">Acme-Linux-Kernel</td>
              <td align="left">The EATs are generated in a Linux kernel configured and shipped by "Acme"</td>
            </tr>
            <tr>
              <td align="left">Acme-TA</td>
              <td align="left">The EATs are generated in a Trusted Application (TA) authored by "Acme"</td>
            </tr>
          </tbody>
        </table>
        <t>TODO: consider a more structure approach where the name and the URI
and other are in separate fields.</t>
        <t>TODO: This needs refinement. It is somewhat parallel to issuer claim
in CWT in that it describes the authority that created the token.</t>
        <section anchor="origination-cddl" numbered="true" toc="default">
          <name>origination CDDL</name>
          <sourcecode type="CDDL">
origination-claim = (
    origination =&gt; string-or-uri
)
</sourcecode>
        </section>
      </section>
      <section anchor="oemid" numbered="true" toc="default">
        <name>OEM Identification by IEEE (oemid)</name>
        <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE.RA" format="default"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide" format="default"/> and provides a lookup
services <xref target="OUI.Lookup" format="default"/></t>
        <t>Companies that have more than one of these IDs or MAC address blocks
should pick one and prefer that for all their devices.</t>
        <t>Commonly, these are expressed in Hexadecimal Representation
<xref target="IEEE.802-2001" format="default"/> also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48. For JSON encoded
tokens, this is further base64url encoded.</t>
        <section anchor="oemid-cddl" numbered="true" toc="default">
          <name>oemid CDDL</name>
          <sourcecode type="CDDL">
oemid-claim = (
    oemid =&gt; bstr
)
</sourcecode>
        </section>
      </section>
      <section anchor="hardware-version-claims-hardware-version-claims" numbered="true" toc="default">
        <name>Hardware Version Claims (hardware-version-claims)</name>
        <t>The hardware version can be claimed at three different levels, the chip, the circuit board and the final device assembly.
An EAT can include any combination these claims.</t>
        <t>The hardware version is a simple text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID" format="default"/>.</t>
        <t>The hardware version can also be given by a 13-digit European Article Number <xref target="EAN-13" format="default"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.
This claim is the ASCII text representation of actual digits often printed with a bar code.
Use of this claim must comply with the EAN allocation and assignment rules.
For example, this requires the manufacturer to obtain a manufacture code from GS1.</t>
        <t>Both the simple version string and EAN-13 versions may be included for the same hardware.</t>
        <sourcecode type="CDDL">
chip-version-claim = (
    chip-version =&gt; tstr
)

chip-version-scheme-claim = (
    chip-version-scheme =&gt; $version-scheme
)

board-version-claim = (
    board-version =&gt; tstr
)

board-version-scheme-claim = (
    board-version-scheme =&gt; $version-scheme
)

device-version-claim = (
    device-version =&gt; tstr
)

device-version-scheme-claim = (
    device-version-scheme =&gt; $version-scheme
)


ean-type = text .regexp "[0-9]{13}"

ean-chip-version-claim = (
    ean-chip-version =&gt; ean-type
)

ean-board-version-claim = (
    ean-board-version =&gt; ean-type
)

ean-device-version-claim = (
    ean-device-version =&gt; ean-type
)

hardware-version-claims = (
    ? chip-version-claim,
    ? board-version-claim,
    ? device-version-claim,
    ? chip-version-scheme-claim,
    ? board-version-scheme-claim,
    ? device-version-scheme-claim,
    ? ean-chip-version-claim,
    ? ean-board-version-claim,
    ? ean-device-version-claim,
)

</sourcecode>
      </section>
      <section anchor="software-description-and-version" numbered="true" toc="default">
        <name>Software Description and Version</name>
        <t>TODO: Add claims that reference CoSWID.</t>
      </section>
      <section anchor="the-security-level-claim-security-level" numbered="true" toc="default">
        <name>The Security Level Claim (security-level)</name>
        <t>This claim characterizes the device/entity 
ability to defend against attacks aimed at capturing the signing
key, forging claims and at forging EATs. This is done by
defining four security levels as described below. This is similar
to the key protection types defined by the Fast Identity Online (FIDO) Alliance <xref target="FIDO.Registry" format="default"/>.</t>
        <t>These claims describe security environment and countermeasures
available on the end-entity / client device where the attestation key
reside and the claims originate.</t>
        <dl>
          <dt>
1 -- Unrestricted  </dt>
          <dd>
            <t>There is some expectation that implementor will
protect the attestation signing keys at this level. Otherwise
the EAT provides no meaningful security assurances.</t>
          </dd>
          <dt>
2-- Restricted  </dt>
          <dd>
            <t>Entities at this level should not be general-purpose
operating environments that host features such as app download
systems, web browsers and complex productivity applications.
It is akin to the Secure Restricted level (see below) without the
security orientation. Examples include a Wi-Fi subsystem,
an IoT camera, or sensor device.</t>
          </dd>
          <dt>
3 -- Secure Restricted  </dt>
          <dd>
            <t>Entities at this level must meet the criteria defined by FIDO Allowed
Restricted Operating Environments <xref target="FIDO.AROE" format="default"/>. Examples include TEE's and 
schemes using virtualization-based security. Like the FIDO security goal,
security at this level is aimed at defending well against large-scale
network / remote attacks against the device.</t>
          </dd>
          <dt>
4 -- Hardware  </dt>
          <dd>
            <t>Entities at this level must include substantial defense 
against physical or electrical attacks against the device itself.
It is assumed any potential attacker has captured the device and can 
disassemble it. Example include TPMs and Secure Elements.</t>
          </dd>
        </dl>
        <t>The entity should claim the highest security level it achieves and no higher.
This set is not extensible so as to provide a common interoperable description of security level to the relying party.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of security and its own proprietary claim as a refined indication.</t>
        <t>This claim is not intended as a replacement for a proper end-device
security certification schemes such as those based on FIPS 140 <xref target="FIPS-140" format="default"/> 
or those based on Common Criteria <xref target="Common.Criteria" format="default"/>. The 
claim made here is solely a self-claim made by the Entity Originator.</t>
        <section anchor="security-level-cddl" numbered="true" toc="default">
          <name>security-level CDDL</name>
          <sourcecode type="CDDL">
security-level-cbor-type = &amp;(
    unrestricted: 1,
    restricted: 2,
    secure-restricted: 3,
    hardware: 4
)

security-level-json-type = 
    "unrestricted" /
    "restricted" /
    "secure-restricted" /
    "hardware"

security-level-claim = (
    security-level =&gt; security-level-cbor-type / security-level-json-type
)
</sourcecode>
        </section>
      </section>
      <section anchor="secure-boot-claim-secure-boot" numbered="true" toc="default">
        <name>Secure Boot Claim (secure-boot)</name>
        <t>The value of true indicates secure boot is enabled. Secure boot is
considered enabled when base software, the firmware and operating
system, are under control of the entity manufacturer identified in the
oemid claimd described in <xref target="oemid" format="default"/>. This may because the software is
in ROM or because it is cryptographically authenticated or some
combination of the two or other.</t>
        <section anchor="secure-boot-cddl" numbered="true" toc="default">
          <name>secure-boot CDDL</name>
          <sourcecode type="CDDL">
secure-boot-claim = (
    secure-boot =&gt; bool
)
</sourcecode>
        </section>
      </section>
      <section anchor="debug-status-claim-debug-status" numbered="true" toc="default">
        <name>Debug Status Claim (debug-status)</name>
        <t>This applies to system-wide or submodule-wide debug facilities of the
target device / submodule like JTAG and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
        <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-device
public keys.</t>
        <t>As with all claims, the absence of the debug level claim means
it is not reported. A conservative interpretation might assume
the Not Disabled state. It could however be that it is reported
in a proprietary claim.</t>
        <t>This claim is not extensible so as to provide a common interoperable description of debug status to the relying party.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
        <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
        <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The verifier or relying party receiving an EAT cannot
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
        <t>An individual target device / submodule may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
        <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the relying party can know the debug status
of the submodules since there is no inheritance.</t>
        <section anchor="enabled" numbered="true" toc="default">
          <name>Enabled</name>
          <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
        </section>
        <section anchor="disabled" numbered="true" toc="default">
          <name>Disabled</name>
          <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future, and it may also be
possible that they were enabled in the past after the
target device/sub-system booted/started, but they are currently disabled.</t>
        </section>
        <section anchor="disabled-since-boot" numbered="true" toc="default">
          <name>Disabled Since Boot</name>
          <t>This level indicates all debug facilities are currently disabled and
have been so since the target device/sub-system booted/started.</t>
        </section>
        <section anchor="disabled-permanently" numbered="true" toc="default">
          <name>Disabled Permanently</name>
          <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer cannot enable them. Only
the manufacturer indicated in the OEMID claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
        </section>
        <section anchor="disabled-fully-and-permanently" numbered="true" toc="default">
          <name>Disabled Fully and Permanently</name>
          <t>This level indicates that all debug capabilities for the target
device/sub-module are permanently disabled.</t>
        </section>
        <section anchor="debug-status-cddl" numbered="true" toc="default">
          <name>debug-status CDDL</name>
          <sourcecode type="CDDL">
debug-status-cbor-type = &amp;(
    enabled: 0,
    disabled: 1,
    disabled-since-boot: 2,
    disabled-permanently: 3,
    disabled-fully-and-permanently: 4
)

debug-status-json-type = 
    "enabled" /
    "disabled" /
    "disabled-since-boot" /
    "disabled-permanently" /
    "disabled-fully-and-permanently"

debug-status-claim = (
    debug-status =&gt; debug-status-cbor-type / debug-status-json-type
)
</sourcecode>
        </section>
      </section>
      <section anchor="including-keys" numbered="true" toc="default">
        <name>Including Keys</name>
        <t>An EAT may include a cryptographic key such as a public key.
The signing of the EAT binds the key to all the other claims in the token.</t>
        <t>The purpose for inclusion of the key may vary by use case.
For example, the key may be included as part of an IoT device onboarding protocol.
When the FIDO protocol includes a pubic key in its attestation message, the key represents the binding of a user, device and relying party.
This document describes how claims containing keys should be defined for the various use cases.
It does not define specific claims for specific use cases.</t>
        <t>Keys in CBOR format tokens SHOULD be the COSE_Key format <xref target="RFC8152" format="default"/> and keys in JSON format tokens SHOULD be the JSON Web Key format <xref target="RFC7517" format="default"/>.
These two formats support many common key types.
Their use avoids the need to decode other serialization formats.
These two formats can be extended to support further key types through their IANA registries.</t>
        <t>The general confirmation claim format <xref target="RFC8747" format="default"/>, <xref target="RFC7800" format="default"/> may also be used.
It provides key encryption. 
It also allows for inclusion by reference through a key ID.
The confirmation claim format may employed in the definition of some new claim for a a particular use case.</t>
        <t>When the actual confirmation claim is included in an EAT, this document associates no use case semantics other than proof of posession.
Different EAT use cases may choose to associate further semantics.
The key in the confirmation claim MUST be protected the same as the key used to sign the EAT. 
That is, the same, equivalent or better hardware defenses, access controls, key generation and such must be used.</t>
      </section>
      <section anchor="the-location-claim-location" numbered="true" toc="default">
        <name>The Location Claim (location)</name>
        <t>The location claim gives the location of the device entity from which the attestation originates.
It is derived from the W3C Geolocation API <xref target="W3C.GeoLoc" format="default"/>.
The latitude, longitude, altitude and accuracy must conform to <xref target="WGS84" format="default"/>.
The altitude is in meters above the <xref target="WGS84" format="default"/> ellipsoid.
The two accuracy values are positive numbers in meters.
The heading is in degrees relative to true north.
If the device is stationary, the heading is NaN (floating-point not-a-number).
The speed is the horizontal component of the device velocity in meters per second.</t>
        <t>When encoding floating-point numbers half-precision should not be used.
It usually does not provide enough precision for a geographic location.
It is not a requirement that the receiver of an EAT implement half-precision, so the receiver may not be able to decode the location.</t>
        <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.</t>
        <t>The age data item can be used when the entity doesn't know what time
it is either because it doesn't have a clock or it isn't set. The
entity must still have a "ticker" that can measure a time
interval. The age is the interval between acquisition of the location
data and token creation.</t>
        <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations" format="default"/> below.</t>
        <section anchor="location-cddl" numbered="true" toc="default">
          <name>location CDDL</name>
          <sourcecode type="CDDL">
location-type = {
    latitude =&gt; number,
    longitude =&gt; number,
    ? altitude =&gt; number,
    ? accuracy =&gt; number,
    ? altitude-accuracy =&gt; number,
    ? heading =&gt; number,
    ? speed =&gt; number,
    ? timestamp =&gt; ~time-int,
    ? age =&gt; uint
}

latitude = 1 / "latitude"
longitude = 2 / "longitude"
altitude = 3 / "altitude"
accuracy = 4 / "accuracy"
altitude-accuracy = 5 / "altitude-accuracy"
heading = 6 / "heading"
speed = 7 / "speed"
timestamp = 8 / "timestamp"
age = 9 / "age"

location-claim = (
    location =&gt; location-type
)
</sourcecode>
        </section>
      </section>
      <section anchor="the-uptime-claim-uptime" numbered="true" toc="default">
        <name>The Uptime Claim (uptime)</name>
        <t>The "uptime" claim contains a value that represents the number of
seconds that have elapsed since the entity or submod was last booted.</t>
        <section anchor="uptime-cddl" numbered="true" toc="default">
          <name>uptime CDDL</name>
          <sourcecode type="CDDL">
uptime-claim = (
    uptime =&gt; uint
)
</sourcecode>
        </section>
      </section>
      <section anchor="the-boot-seed-claim-boot-seed" numbered="true" toc="default">
        <name>The Boot Seed Claim (boot-seed)</name>
        <t>The Boot Seed claim is a random value created at system boot time that will allow differentiation of reports from different boot sessions.
This value is usually public and not protected.
It is not the same as a seed for a random number generator which must be kept secret.</t>
        <sourcecode type="CDDL">
boot-seed-claim = (
    boot-seed =&gt; bytes
)
</sourcecode>
      </section>
      <section anchor="the-intended-use-claim-intended-use" numbered="true" toc="default">
        <name>The Intended Use Claim (intended-use)</name>
        <t>EAT's may be used in the context of several different applications.  The intended-use
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it uses EAT.</t>
        <dl>
          <dt>
1 -- Generic  </dt>
          <dd>
            <t>Generic attestation describes an application where the EAT consumer
requres the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
          </dd>
          <dt>
2-- Registration  </dt>
          <dd>
            <t>Entities that are registering for a new service may be expected to 
provide an attestation as part of the registration process.  This intended-use
setting indicates that the attestation is not intended for any use but registration.</t>
          </dd>
          <dt>
3 -- Provisioning  </dt>
          <dd>
            <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess device security state of the entity prior to provisioning.</t>
          </dd>
          <dt>
4 -- Certificate Issuance (Certificate Signing Request)  </dt>
          <dd>
            <t>Certifying authorities (CA's) may require attestations prior to
the issuance of certificates related to keypairs hosted at the entity.  An
EAT may be used as part of the certificate signing request (CSR).</t>
          </dd>
          <dt>
5 -- Proof-of-Possession  </dt>
          <dd>
            <t>An EAT consumer may require an attestation as part of an accompanying 
proof-of-possession (PoP) appication. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has posession
of a key.  This kind of attestation may be neceesary to verify the
security state of the entity storing the private key used in a PoP application.</t>
          </dd>
        </dl>
        <section anchor="intended-use-cddl" numbered="true" toc="default">
          <name>intended-use CDDL</name>
          <sourcecode type="CDDL">
intended-use-cbor-type = &amp;(
    generic: 1,
    registration: 2,
    provisioning: 3,
    csr: 4,
    pop:  5
)

intended-use-json-type = 
    "generic" /
    "registration" /
    "provisioning" /
    "csr" /
    "pop" 

intended-use-claim = (
    intended-use =&gt; intended-use-cbor-type / intended-use-json-type
)
</sourcecode>
        </section>
      </section>
      <section anchor="profile-claim" numbered="true" toc="default">
        <name>The Profile Claim (profile)</name>
        <t>See <xref target="profiles" format="default"/> for the detailed description of a profile.</t>
        <t>A profile is identified by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the profile claim is to uniquely identify the profile even if it is a private profile.</t>
        <t>The OID is encoded in CBOR according to <xref target="CBOR-OID" format="default"/> and the URI according to <xref target="RFC8949" format="default"/>.
Both are unwrapped and thus not tags.
The OID is always absolute and never relative.
If the claims CBOR type is a text string it is a URI and if a byte string it is an OID.</t>
        <t>Note that this named "eat_profile" for JWT and is distinct from the already registered "profile" claim in the JWT claims registry.</t>
        <sourcecode type="CDDL">
oid = #6.4000(bstr) ; TODO: fill this in with correct CDDL from OID RFC

profile-claim = (
    profile =&gt; ~uri / ~oid
)
</sourcecode>
      </section>
      <section anchor="the-submodules-part-of-a-token-submods" numbered="true" toc="default">
        <name>The Submodules Part of a Token (submods)</name>
        <t>Some devices are complex, having many subsystems or submodules.  A
mobile phone is a good example. It may have several connectivity
submodules for communications (e.g., Wi-Fi and cellular). It may have
subsystems for low-power audio and video playback. It may have one or
more security-oriented subsystems like a TEE or a Secure Element.</t>
        <t>The claims for each these can be grouped together in a submodule.</t>
        <t>The submods part of a token are in a single map/object with many entries, one
per submodule.  There is only one submods map in a token. It is
identified by its specific label. It is a peer to other claims, but it
is not called a claim because it is a container for a claim set rather
than an individual claim. This submods part of a token allows what
might be called recursion. It allows claim sets inside of claim sets
inside of claims sets...</t>
        <section anchor="two-types-of-submodules" numbered="true" toc="default">
          <name>Two Types of Submodules</name>
          <t>Each entry in the submod map is one of two types:</t>
          <ul spacing="normal">
            <li>A non-token submodule that is a map or object directly containing claims for the submodule.</li>
            <li>A nested EAT that is a fully formed, independently signed EAT token</li>
          </ul>
          <section anchor="non-token-submodules" numbered="true" toc="default">
            <name>Non-token Submodules</name>
            <t>This is simply a map or object containing claims about the submodule.</t>
            <t>It may contain claims that are the same as its surrounding token or superior submodules. 
For example, the top-level of the token may have a UEID, a submod may have a different UEID and a further subordinate submodule may also have a UEID.</t>
            <t>It is signed/encrypted along with the rest of the token and thus the claims are secured by the same Attester with the same signing key as the rest of the token.</t>
            <t>If a token is in CBOR format (a CWT or a UCCS), all non-token submodules must be CBOR format.
If a token in in JSON format (a JWT), all non-token submodules must be in JSON format.</t>
            <t>When decoding, this type of submodule is recognized from the other type by being a data item of type map for CBOR or type object for JSON.</t>
          </section>
          <section anchor="nested-eats" numbered="true" toc="default">
            <name>Nested EATs</name>
            <t>This type of submodule is a fully formed secured EAT as defined in this document except that it MUST NOT be a UCCS or an unsecured JWT.
A nested token that is one that is always secured using COSE or JOSE, usually by an independent Attester.
When the surrounding EAT is a CWT or secured JWT, the nested token becomes securely bound with the other claims in the surrounding token.</t>
            <t>It is allowed to have a CWT as a submodule in a JWT and vice versa, but this SHOULD be avoided unless necessary.</t>
            <section anchor="surrounding-eat-is-cbor-format" numbered="true" toc="default">
              <name>Surrounding EAT is CBOR format</name>
              <t>They type of an EAT nested in a CWT is determined by whether the CBOR type is a text string or a byte string.
If a text string, then it is a JWT.
If a byte string, then it is a CWT.</t>
              <t>A CWT nested in a CBOR-format token is always wrapped by a byte string for easier handling with standard CBOR decoders and token processing APIs that will typically take a byte buffer as input.</t>
              <t>Nested CWTs may be either a CWT CBOR tag or a CWT Protocol Message.
COSE layers in nested CWT EATs MUST be a COSE_Tagged_Message, never a COSE_Untagged_Message.
If a nested EAT has more than one level of COSE, for example one that is both encrypted and signed, a COSE_Tagged_message must be used at every level.</t>
            </section>
            <section anchor="surrounding-eat-is-json-format" numbered="true" toc="default">
              <name>Surrounding EAT is JSON format</name>
              <t>When a CWT is nested in a JWT, it must be as a 55799 tag in order to distinguish it from a nested JWT.</t>
              <t>When a nested EAT in a JWT is decoded, first remove the base64url encoding.
Next, check to see if it starts with the bytes 0xd9d9f7.
If so, then it is a CWT as a JWT will never start with these four bytes. 
If not if it is a JWT.</t>
              <t>Other than the 55799 tag requirement, tag usage for CWT's nested in a JSON format token follow the same rules as for CWTs nested in CBOR-format tokens.
It may be a CWT CBOR tag or a CWT Protocol Message and COSE_Tagged_Message MUST be used at all COSE layers.</t>
            </section>
          </section>
          <section anchor="unsecured-jwts-and-uccs-tokens-as-submodules" numbered="true" toc="default">
            <name>Unsecured JWTs and UCCS Tokens as Submodules</name>
            <t>To incorporate a UCCS token as a submodule, it MUST be as a non-token submodule. 
This can be accomplished inserting the content of the UCCS Tag into the submodule map.
The content of a UCCS tag is exactly a map of claims as required for a non-token submodule.
If the UCCS is not a UCCS tag, then it can just be inserted into the submodule map directly.</t>
            <t>The definition of a nested EAT type of submodule is that it is one that is secured (signed) by an Attester.
Since UCCS tokens are unsecured, they do not fulfill this definition and must be non-token submodules.</t>
            <t>To incorporate an Unsecured JWT as a submodule, the null-security JOSE wrapping should be removed.
The resulting claims set should be inserted as a non-token submodule.</t>
            <t>To incorporate a UCCS token in a surrounding JSON token, the UCCS token claims should be translated from CBOR to JSON.
To incorporate an Unsecured JWT into a surrounding CBOR-format token, the null-security JOSE should be removed and the claims translated from JSON to CBOR.</t>
          </section>
        </section>
        <section anchor="no-inheritance" numbered="true" toc="default">
          <name>No Inheritance</name>
          <t>The subordinate modules do not inherit anything from the containing
token.  The subordinate modules must explicitly include all of their
claims. This is the case even for claims like the nonce and age.</t>
          <t>This rule is in place for simplicity. It avoids complex inheritance
rules that might vary from one type of claim to another.</t>
        </section>
        <section anchor="security-levels" numbered="true" toc="default">
          <name>Security Levels</name>
          <t>The security level of the non-token subordinate modules should always
be less than or equal to that of the containing modules in the case of non-token
submodules. It makes no sense for a module of lesser security to be
signing claims of a module of higher security. An example of this is a
TEE signing claims made by the non-TEE parts (e.g. the high-level OS)
of the device.</t>
          <t>The opposite may be true for the nested tokens. They usually have
their own more secure key material. An example of this is an embedded
secure element.</t>
        </section>
        <section anchor="submodule-names" numbered="true" toc="default">
          <name>Submodule Names</name>
          <t>The label or name for each submodule in the submods map is a text
string naming the submodule. No submodules may have the same name.</t>
        </section>
        <section anchor="submods-cddl" numbered="true" toc="default">
          <name>submods CDDL</name>
          <sourcecode type="CDDL">
; The part of a token that contains all the submodules.  It is a peer
; with the claims in the token, but not a claim, only a map/object to
; hold all the submodules.

submods-part = (
    submods =&gt; submods-type
)

submods-type = { + submod-type }


; The type of a submodule which can either be a nested claim set or a
; nested separately signed token. Nested tokens are wrapped in a bstr
; or a tstr.

submod-type = (
    submod-name =&gt; eat-claim-set / nested-token
)


; When this is a bstr, the contents are an eat-token in CWT or UCCS
; format.  When this is a tstr, the contents are an eat-token in JWT
; format.

nested-token = bstr / tstr; 


; Each submodule has a unique text string name.

submod-name = tstr 


</sourcecode>
        </section>
      </section>
    </section>
    <section anchor="keyid" numbered="true" toc="default">
      <name>Endorsements and Verification Keys</name>
      <t>TODO: fill this section in. It will discuss key IDs, endorsement ID and such that
are needed as input needed to by the Verifier to verify the signature. This will
NOT discuss the contents of an Endorsement, just and ID/locator.</t>
    </section>
    <section anchor="profiles" numbered="true" toc="default">
      <name>Profiles</name>
      <t>This EAT specification does not gaurantee that implementations of it will interoperate.
The variability in this specification is necessary to accommodate the widely varying use cases.
An EAT profile narrows the specification for a specific use case.
An ideal EAT profile will gauarantee interoperability.</t>
      <t>The profile can be named in the token using the profile claim described in <xref target="profile-claim" format="default"/>.</t>
      <section anchor="format-of-a-profile-document" numbered="true" toc="default">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>In some cases CDDL may be created that replaces CDDL in this or other document to express some profile requirements.
For example, to require the altitude data item in the location claim, CDDL can be written that replicates the location claim with the altitude no longer optional.</t>
      </section>
      <section anchor="list-of-profile-issues" numbered="true" toc="default">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, UCCS, JWS, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both" numbered="true" toc="default">
          <name>Use of JSON, CBOR or both</name>
          <t>The profile should indicate whether the token format should be CBOR, JSON, both or even some other encoding.
If some other encoding, a specification for how the CDDL described here is serialized in that encoding is necessary.</t>
          <t>This should be addressed for the top-level token and for any nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding" numbered="true" toc="default">
          <name>CBOR Map and Array Encoding</name>
          <t>The profile should indicate whether definite-length arrays/maps, indefinite-length arrays/maps or both are allowed.
A good default is to allow only definite-length arrays/maps.</t>
          <t>An alternate is to allow both definite and indefinite-length arrays/maps.
The decoder should accept either.
Encoders that need to fit on very small hardware or be actually implement in hardware can use indefinite-length encoding.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
        </section>
        <section anchor="cbor-string-encoding" numbered="true" toc="default">
          <name>CBOR String Encoding</name>
          <t>The profile should indicate whether definite-length strings, indefinite-length strings or both are allowed.
A good default is to allow only definite-length strings.
As with map and array encoding, allowing indefinite-length strings can be beneficial for some smaller implementations.</t>
        </section>
        <section anchor="cbor-preferred-serialization" numbered="true" toc="default">
          <name>CBOR Preferred Serialization</name>
          <t>The profile should indicate whether encoders must use preferred serialization.
The profile should indicate whether decoders must accept non-preferred serialization.</t>
        </section>
        <section anchor="cosejose-protection" numbered="true" toc="default">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
EAT/CWT has the option to have no protection using UCCS and JOSE has a NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, CWT and UCCS are allowed by EAT.</t>
          <t>The profile should list the protections that must be supported by all decoders implementing the profile.
The encoders them must implement a subset of what is listed for the decoders, perhaps only one.</t>
          <t>Implementations may choose to sign or MAC before encryption so that the implementation layer doing the signing or MACing can be the smallest.
It is often easier to make smaller implementations more secure, perhaps even implementing in solely in hardware.
The key material for a signature or MAC is a private key, while for encryption it is likely to be a public key.
The key for encryption requires less protection.</t>
        </section>
        <section anchor="cosejose-algorithms" numbered="true" toc="default">
          <name>COSE/JOSE Algorithms</name>
          <t>The profile document should list the COSE algorithms that a Verifier must implement.
The Attester will select one of them. 
Since there is no negotiation, the Verifier should implement all algorithms listed in the profile.</t>
        </section>
        <section anchor="verification-key-identification" numbered="true" toc="default">
          <name>Verification Key Identification</name>
          <t>Section <xref target="keyid" format="default"/> describes a number of methods for identifying a verification key.
The profile document should specify one of these or one that is not described.
The ones described in this document are only roughly described.
The profile document should go into the full detail.</t>
        </section>
        <section anchor="endorsement-identification" numbered="true" toc="default">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as Verification Key Identification, the profile may wish to specify how Endorsements are to be identified.
However note that Endorsement Identification is optional, where as key identification is not.</t>
        </section>
        <section anchor="freshness" numbered="true" toc="default">
          <name>Freshness</name>
          <t>Just about every use case will require some means of knowing the EAT is recent enough and not a replay of an old token.
The profile should describe how freshness is achieved.
The section on Freshness in <xref target="RATS-Architecture" format="default"/> describes some of the possible solutions to achieve this.</t>
        </section>
        <section anchor="required-claims" numbered="true" toc="default">
          <name>Required Claims</name>
          <t>The profile can list claims whose absence results in Verification failure.</t>
        </section>
        <section anchor="prohibited-claims" numbered="true" toc="default">
          <name>Prohibited Claims</name>
          <t>The profile can list claims whose presence results in Verification failure.</t>
        </section>
        <section anchor="additional-claims" numbered="true" toc="default">
          <name>Additional Claims</name>
          <t>The profile may describe entirely new claims.
These claims can be required or optional.</t>
        </section>
        <section anchor="refined-claim-definition" numbered="true" toc="default">
          <name>Refined Claim Definition</name>
          <t>The profile may lock down optional aspects of individual claims.
For example, it may require altitude in the location claim, or it may require that HW Versions always be described using EAN-13.</t>
        </section>
        <section anchor="cbor-tags" numbered="true" toc="default">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.
Similarly, the profile should specify whether the token should be a UCCS tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unncessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
      </section>
    </section>
    <section anchor="encoding" numbered="true" toc="default">
      <name>Encoding</name>
      <t>This makes use of the types defined in CDDL Appendix D, Standard Prelude.</t>
      <t>Some of the CDDL included here is for claims that are defined in CWT <xref target="RFC8392" format="default"/> or JWT <xref target="RFC7519" format="default"/> or are in the IANA CWT or JWT registries.
CDDL was not in use when these claims where defined.</t>
      <section anchor="common-cddl-types" numbered="true" toc="default">
        <name>Common CDDL Types</name>
        <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
        <sourcecode type="CDDL">
string-or-uri = tstr 

time-int = #6.1(int)
</sourcecode>
      </section>
      <section anchor="cddl-for-cwt-defined-claims" numbered="true" toc="default">
        <name>CDDL for CWT-defined Claims</name>
        <t>This section provides CDDL for the claims defined in CWT. It is
non-normative as <xref target="RFC8392" format="default"/> is the authoritative definition of these
claims.</t>
        <sourcecode type="CDDL">
$$eat-extension //= (
    ? issuer =&gt; text,
    ? subject =&gt; text,
    ? audience =&gt; text,
    ? expiration =&gt; time,
    ? not-before =&gt; time,
    ? issued-at =&gt; time,
    ? cwt-id =&gt; bytes,
)

issuer = 1
subject = 2
audience = 3
expiration = 4
not-before = 5
issued-at = 6
cwt-id = 7

</sourcecode>
      </section>
      <section anchor="json" numbered="true" toc="default">
        <name>JSON</name>
        <section anchor="json-labels" numbered="true" toc="default">
          <name>JSON Labels</name>
          <sourcecode type="JSON">
; The following are Claim Keys (labels) assigned for JSON-encoded tokens.

ueid /= "ueid"
nonce /= "nonce"
origination /= "origination"
oemid /= "oemid"
security-level /= "seclevel"
secure-boot /= "secboot"
debug-status /= "dbgstat"
location /= "location"
uptime /= "uptime"
profile /= "eat-profile"
intended-use /= "intuse"
boot-seed /= "bootseed"
submods /= "submods"
timestamp /= "timestamp"

latitude /= "lat"
longitude /= "long"
altitude /= "alt"
accuracy /= "accry"
altitude-accuracy /= "alt-accry"
heading /= "heading"
speed /= "speed"
</sourcecode>
        </section>
        <section anchor="jsoninterop" numbered="true" toc="default">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per RFC 8610 Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- must be base64url encoded</li>
            <li>time -- must be encoded as NumericDate as described section 2 of <xref target="RFC7519" format="default"/>.</li>
            <li>string-or-uri -- must be encoded as StringOrURI as described section 2 of <xref target="RFC7519" format="default"/>.</li>
            <li>uri -- must be a URI <xref target="RFC3986" format="default"/>.</li>
            <li>oid -- encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1").</li>
          </ul>
        </section>
      </section>
      <section anchor="cbor" numbered="true" toc="default">
        <name>CBOR</name>
        <section anchor="cbor-interoperability" numbered="true" toc="default">
          <name>CBOR Interoperability</name>
          <t>CBOR allows data items to be serialized in more than one form.
If the sender uses a form that the receiver can't decode, there will not be interoperability.</t>
          <t>This specification gives no blanket requirements to narrow CBOR serialization for all uses of EAT.
This allows individual uses to tailor serialization to the environment.
It also may result in EAT implementations that don't interoperate.</t>
          <t>One way to guarantee interoperability is to clearly specify CBOR serialization in a profile document.
See <xref target="profiles" format="default"/> for a list of serialization issues that should be addressed.</t>
          <t>EAT will be commonly used where the device generating the attestation is constrained and the receiver/verifier of the attestation is a capacious server.
Following is a set of serialization requirements that work well for that use case and are guaranteed to interoperate.
Use of this serialization is recommended where possible, but not required.
An EAT profile may just reference the following section rather than spell out serialization details.</t>
          <section anchor="eat-constrained-device-serialization" numbered="true" toc="default">
            <name>EAT Constrained Device Serialization</name>
            <ul spacing="normal">
              <li>Preferred serialization described in section 4.1 of <xref target="RFC8949" format="default"/> is not required.
The EAT decoder must accept all forms of number serialization.
The EAT encoder may use any form it wishes.</li>
              <li>The EAT decoder must accept indefinite length arrays and maps as described in section 3.2.2 of <xref target="RFC8949" format="default"/>.
The EAT encoder may use indefinite length arrays and maps if it wishes.</li>
              <li>The EAT decoder must accept indefinite length strings as described in section 3.2.3 of <xref target="RFC8949" format="default"/>.
The EAT encoder may use indefinite length strings if it wishes.</li>
              <li>Sorting of maps by key is not required.
The EAT decoder must not rely on sorting.</li>
              <li>Deterministic encoding described in Section 4.2 of <xref target="RFC8949" format="default"/> is not required.</li>
              <li>Basic validity described in section 5.3.1 of <xref target="RFC8949" format="default"/> must be followed.
The EAT encoder must not send duplicate map keys/labels or invalid UTF-8 strings.</li>
            </ul>
          </section>
        </section>
      </section>
      <section anchor="collected-cddl" numbered="true" toc="default">
        <name>Collected CDDL</name>
        <sourcecode type="CDDL">
; This is the top-level definition of the claims in EAT tokens.  To
; form an actual EAT Token, this claim set is enclosed in a COSE, JOSE
; or UCCS message.

eat-claim-set = {
    ? ueid-claim,
    ? nonce-claim,
    ? origination-claim,
    ? oemid-claim,
    ? hardware-version-claims,
    ? security-level-claim,
    ? secure-boot-claim,
    ? debug-status-claim,
    ? location-claim,
    ? intended-use-claim,
    ? profile-claim,
    ? uptime-claim,
    ? submods-part,
    * $$eat-extension,
}


; This is the top-level definition of an EAT Token.  It is a CWT, JWT
; or UCSS where the payload is an eat-claim-set. A JWT_Message is what
; is defined by JWT in RFC 7519. (RFC 7519 doesn't use CDDL so a there
; is no actual CDDL definition of JWT_Message).

eat-token = EAT_Tagged_Message / EAT_Untagged_Message / JWT_Message


; This is CBOR-format EAT token in the CWT or UCCS format that is a
; tag.  COSE_Tagged_message is defined in RFC 8152.  Tag 601 is
; proposed by the UCCS draft, but not yet assigned.

EAT_Tagged_Message = #6.61(COSE_Tagged_Message) / #6.601(eat-claim-set)


; This is a CBOR-format EAT token that is a CWT or UCSS that is not a
; tag COSE_Tagged_message and COSE_Untagged_Message are defined in RFC
; 8152.

EAT_Untagged_Message = COSE_Tagged_Message / COSE_Untagged_Message / UCCS_Untagged_Message


; This is an "unwrapped" UCCS tag. Unwrapping a tag means to use the
; definition of its content without the preceding type 6 tag
; integer. Since a UCCS is nothing but a tag for an unsecured CWT
; claim set, unwrapping reduces to a bare eat-claim-set.

UCCS_Untagged_Message = eat-claim-set


string-or-uri = tstr 

time-int = #6.1(int)

$$eat-extension //= (
    ? issuer =&gt; text,
    ? subject =&gt; text,
    ? audience =&gt; text,
    ? expiration =&gt; time,
    ? not-before =&gt; time,
    ? issued-at =&gt; time,
    ? cwt-id =&gt; bytes,
)

issuer = 1
subject = 2
audience = 3
expiration = 4
not-before = 5
issued-at = 6
cwt-id = 7


debug-status-cbor-type = &amp;(
    enabled: 0,
    disabled: 1,
    disabled-since-boot: 2,
    disabled-permanently: 3,
    disabled-fully-and-permanently: 4
)

debug-status-json-type = 
    "enabled" /
    "disabled" /
    "disabled-since-boot" /
    "disabled-permanently" /
    "disabled-fully-and-permanently"

debug-status-claim = (
    debug-status =&gt; debug-status-cbor-type / debug-status-json-type
)

location-type = {
    latitude =&gt; number,
    longitude =&gt; number,
    ? altitude =&gt; number,
    ? accuracy =&gt; number,
    ? altitude-accuracy =&gt; number,
    ? heading =&gt; number,
    ? speed =&gt; number,
    ? timestamp =&gt; ~time-int,
    ? age =&gt; uint
}

latitude = 1 / "latitude"
longitude = 2 / "longitude"
altitude = 3 / "altitude"
accuracy = 4 / "accuracy"
altitude-accuracy = 5 / "altitude-accuracy"
heading = 6 / "heading"
speed = 7 / "speed"
timestamp = 8 / "timestamp"
age = 9 / "age"

location-claim = (
    location =&gt; location-type
)

nonce-type = bstr .size (8..64)

nonce-claim = (
    nonce =&gt; nonce-type / [ 2* nonce-type ]
)

oemid-claim = (
    oemid =&gt; bstr
)

; copied from CoSWID
; TODO: how to properly make reference to CoSWID and have tool validate

  $version-scheme /= multipartnumeric
  $version-scheme /= multipartnumeric-suffix
  $version-scheme /= alphanumeric
  $version-scheme /= decimal
  $version-scheme /= semver
  $version-scheme /= uint / text
  multipartnumeric = 1
  multipartnumeric-suffix = 2
  alphanumeric = 3
  decimal = 4
  semver = 16384


chip-version-claim = (
    chip-version =&gt; tstr
)

chip-version-scheme-claim = (
    chip-version-scheme =&gt; $version-scheme
)

board-version-claim = (
    board-version =&gt; tstr
)

board-version-scheme-claim = (
    board-version-scheme =&gt; $version-scheme
)

device-version-claim = (
    device-version =&gt; tstr
)

device-version-scheme-claim = (
    device-version-scheme =&gt; $version-scheme
)


ean-type = text .regexp "[0-9]{13}"

ean-chip-version-claim = (
    ean-chip-version =&gt; ean-type
)

ean-board-version-claim = (
    ean-board-version =&gt; ean-type
)

ean-device-version-claim = (
    ean-device-version =&gt; ean-type
)

hardware-version-claims = (
    ? chip-version-claim,
    ? board-version-claim,
    ? device-version-claim,
    ? chip-version-scheme-claim,
    ? board-version-scheme-claim,
    ? device-version-scheme-claim,
    ? ean-chip-version-claim,
    ? ean-board-version-claim,
    ? ean-device-version-claim,
)


origination-claim = (
    origination =&gt; string-or-uri
)

secure-boot-claim = (
    secure-boot =&gt; bool
)

security-level-cbor-type = &amp;(
    unrestricted: 1,
    restricted: 2,
    secure-restricted: 3,
    hardware: 4
)

security-level-json-type = 
    "unrestricted" /
    "restricted" /
    "secure-restricted" /
    "hardware"

security-level-claim = (
    security-level =&gt; security-level-cbor-type / security-level-json-type
)

; The part of a token that contains all the submodules.  It is a peer
; with the claims in the token, but not a claim, only a map/object to
; hold all the submodules.

submods-part = (
    submods =&gt; submods-type
)

submods-type = { + submod-type }


; The type of a submodule which can either be a nested claim set or a
; nested separately signed token. Nested tokens are wrapped in a bstr
; or a tstr.

submod-type = (
    submod-name =&gt; eat-claim-set / nested-token
)


; When this is a bstr, the contents are an eat-token in CWT or UCCS
; format.  When this is a tstr, the contents are an eat-token in JWT
; format.

nested-token = bstr / tstr; 


; Each submodule has a unique text string name.

submod-name = tstr 



ueid-type = bstr .size (7..33)

ueid-claim = (
     ueid =&gt; ueid-type
)

intended-use-cbor-type = &amp;(
    generic: 1,
    registration: 2,
    provisioning: 3,
    csr: 4,
    pop:  5
)

intended-use-json-type = 
    "generic" /
    "registration" /
    "provisioning" /
    "csr" /
    "pop" 

intended-use-claim = (
    intended-use =&gt; intended-use-cbor-type / intended-use-json-type
)

oid = #6.4000(bstr) ; TODO: fill this in with correct CDDL from OID RFC

profile-claim = (
    profile =&gt; ~uri / ~oid
)

uptime-claim = (
    uptime =&gt; uint
)

; The following Claim Keys (labels) are pre-assigned by IANA.
; They are for CBOR-based tokens (CWT and UCCS).
; They are not expected to change in the final publication as an RFC.

nonce = 10
ueid = 11
oemid = 13
security-level = 14
secure-boot = 15
debug-status = 16
location = 17
profile = 18
submods = 20


boot-seed-claim = (
    boot-seed =&gt; bytes
)

; The following are Claim Keys (labels) assigned for JSON-encoded tokens.

ueid /= "ueid"
nonce /= "nonce"
origination /= "origination"
oemid /= "oemid"
security-level /= "seclevel"
secure-boot /= "secboot"
debug-status /= "dbgstat"
location /= "location"
uptime /= "uptime"
profile /= "eat-profile"
intended-use /= "intuse"
boot-seed /= "bootseed"
submods /= "submods"
timestamp /= "timestamp"

latitude /= "lat"
longitude /= "long"
altitude /= "alt"
accuracy /= "accry"
altitude-accuracy /= "alt-accry"
heading /= "heading"
speed /= "speed"

</sourcecode>
      </section>
    </section>
    <section anchor="iana-considerations" numbered="true" toc="default">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-web-token-cwt-claims-registry" numbered="true" toc="default">
        <name>Reuse of CBOR Web Token (CWT) Claims Registry</name>
        <t>Claims defined for EAT are compatible with those of CWT
so the CWT Claims Registry is re used. No new IANA registry
is created. All EAT claims should be registered in the
CWT and JWT Claims Registries.</t>
      </section>
      <section anchor="claim-characteristics" numbered="true" toc="default">
        <name>Claim Characteristics</name>
        <t>The following is design guidance for creating new EAT claims, particularly those to be registered with IANA.</t>
        <t>Much of this guidance is generic and could also be considered when designing new CWT or JWT claims.</t>
        <section anchor="interoperability-and-relying-party-orientation" numbered="true" toc="default">
          <name>Interoperability and Relying Party Orientation</name>
          <t>It is a broad goal that EATs can be processed by relying parties in a general way regardless of the type, manufacturer or technology of the device from which they originate. 
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
          <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
        </section>
        <section anchor="operating-system-and-technology-neutral" numbered="true" toc="default">
          <name>Operating System and Technology Neutral</name>
          <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
          <t>Claims should not be defined such that they are specific to a SW environment or programming language.</t>
          <t>Claims should not be defined such that they are specific to a chip or particular hardware. 
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
          <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
        </section>
        <section anchor="security-level-neutral" numbered="true" toc="default">
          <name>Security Level Neutral</name>
          <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists. 
Secure Elements and smart cards are examples of this. 
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
          <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
        </section>
        <section anchor="reuse-of-extant-data-formats" numbered="true" toc="default">
          <name>Reuse of Extant Data Formats</name>
          <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
          <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON format for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
          <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
        </section>
        <section anchor="proprietary-claims" numbered="true" toc="default">
          <name>Proprietary Claims</name>
          <t>EAT allows the definition and use of proprietary claims.</t>
          <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer. 
This is a supported use case.</t>
          <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
        </section>
      </section>
      <section anchor="claims-registered-by-this-document" numbered="true" toc="default">
        <name>Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519" format="default"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392" format="default"/>. Each entry below is an addition to both registries (except
for the nonce claim which is already registered for JWT, but not registered for CWT).</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <section anchor="claims-for-early-assignment" numbered="true" toc="default">
          <name>Claims for Early Assignment</name>
          <t>RFC Editor: in the final publication this section should be combined with the following
section as it will no longer be necessary to distinguish claims with early assignment.
Also, the following paragraph should be removed.</t>
          <t>The claims in this section have been (requested for / given) early assignment according to <xref target="RFC7120" format="default"/>.
They have been assigned values and registered before final publication of this document.
While their semantics is not expected to change in final publication, it is possible that they will.
The JWT Claim Names and CWT Claim Keys are not expected to change.</t>
          <ul spacing="normal">
            <li>Claim Name: Nonce</li>
            <li>Claim Description: Nonce</li>
            <li>JWT Claim Name: "nonce" (already registered for JWT)</li>
            <li>Claim Key: 10</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <xref target="OpenIDConnectCore" format="default"/>, <strong>this document</strong></li>
          </ul>
          <t>&nbsp;</t>
          <ul spacing="normal">
            <li>Claim Name: UEID</li>
            <li>Claim Description: The Universal Entity ID</li>
            <li>JWT Claim Name: "ueid"</li>
            <li>CWT Claim Key: 11</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t>&nbsp;</t>
          <ul spacing="normal">
            <li>Claim Name: OEMID</li>
            <li>Claim Description: IEEE-based OEM ID</li>
            <li>JWT Claim Name: "oemid"</li>
            <li>Claim Key: 13</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t>&nbsp;</t>
          <ul spacing="normal">
            <li>Claim Name: Security Level</li>
            <li>Claim Description: Characterization of the security of an Attester or submodule</li>
            <li>JWT Claim Name: "seclevel"</li>
            <li>Claim Key: 14</li>
            <li>Claim Value Type(s): integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t>&nbsp;</t>
          <ul spacing="normal">
            <li>Claim Name: Secure Boot</li>
            <li>Claim Description: Indicate whether the boot was secure</li>
            <li>JWT Claim Name: "secboot"</li>
            <li>Claim Key: 15</li>
            <li>Claim Value Type(s): Boolean</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t>&nbsp;</t>
          <ul spacing="normal">
            <li>Claim Name: Debug Status</li>
            <li>Claim Description: Indicate status of debug facilities</li>
            <li>JWT Claim Name: "dbgstat"</li>
            <li>Claim Key: 16</li>
            <li>Claim Value Type(s): integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t>&nbsp;</t>
          <ul spacing="normal">
            <li>Claim Name: Location</li>
            <li>Claim Description: The geographic location</li>
            <li>JWT Claim Name: "location"</li>
            <li>Claim Key: 17</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t>&nbsp;</t>
          <ul spacing="normal">
            <li>Claim Name: Profile</li>
            <li>Claim Description: Indicates the EAT profile followed</li>
            <li>JWT Claim Name: "eat_profile"</li>
            <li>Claim Key: 18</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t>&nbsp;</t>
          <ul spacing="normal">
            <li>Claim Name: Submodules Section</li>
            <li>Claim Description: The section containing submodules (not actually a claim)</li>
            <li>JWT Claim Name: "submods"</li>
            <li>Claim Key: 20</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="to-be-assigned-claims" numbered="true" toc="default">
          <name>To be Assigned Claims</name>
          <t>TODO: add the rest of the claims in here</t>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations" numbered="true" toc="default">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations" numbered="true" toc="default">
        <name>UEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Any set of relying parties
that receives tokens that happen to be from a single device will be
able to know the tokens are all from the same device and be able to
track the device. Thus, in many usage situations ueid violates
governmental privacy regulation. In other usage situations UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>There are several strategies that can be used to still be able to put
UEID's in tokens:</t>
        <ul spacing="normal">
          <li>The device obtains explicit permission from the user of the device
to use the UEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID.</li>
          <li>The UEID is used only in a particular context or particular use
case. It is used only by one relying party.</li>
          <li>The device authenticates the relying party and generates a derived
UEID just for that particular relying party.  For example, the relying
party could prove their identity cryptographically to the device, then
the device generates a UEID just for that relying party by hashing a
proofed relying party ID with the main device UEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in multiple UEIDs
per device. Each UEID is used in a different context, use case or system 
on the device. However, from the view of the relying party, there is just
one UEID and it is still globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations" numbered="true" toc="default">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the device generating the attestation.
For example, many mobile phones prompt the user for permission when before sending location data.</t>
      </section>
    </section>
    <section anchor="securitycons" numbered="true" toc="default">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392" format="default"/> and Section 11
of <xref target="RFC7519" format="default"/> apply to EAT in its CWT and JWT form, respectively.  In addition, 
implementors should consider the following.</t>
      <section anchor="key-provisioning" numbered="true" toc="default">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manfuacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949" format="default"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material" numbered="true" toc="default">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="transport-security" numbered="true" toc="default">
        <name>Transport Security</name>
        <t>As stated in Section 8 of <xref target="RFC8392" format="default"/>, "The security of the CWT relies
upon on the protections offered by COSE".  Similar considerations
apply to EAT when sent as a CWT.  However, EAT introduces the concept
of a nonce to protect against replay.  Since an EAT may be created by
an entity that may not support the same type of transport security as
the consumer of the EAT, intermediaries may be required to bridge
communications between the entity and consumer.  As a result, it is
RECOMMENDED that both the consumer create a nonce, and the entity
leverage the nonce along with COSE mechanisms for encryption and/or
signing to create the EAT.</t>
        <t>Similar considerations apply to the use of EAT as a JWT.  Although the
security of a JWT leverages the JSON Web Encryption (JWE) and JSON Web
Signature (JWS) specifications, it is still recommended to make use of
the EAT nonce.</t>
      </section>
      <section anchor="multiple-eat-consumers" numbered="true" toc="default">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer should leverage a secure protocol (e.g.one that
uses transport-layer security, i.e. TLS),</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then transport security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner">
              <organization/>
            </author>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC8949" target="https://www.rfc-editor.org/info/rfc8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman">
              <organization/>
            </author>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7517" target="https://www.rfc-editor.org/info/rfc7517">
          <front>
            <title>JSON Web Key (JWK)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key.  This specification also defines a JWK Set JSON data structure that represents a set of JWKs.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries established by that specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7517"/>
          <seriesInfo name="DOI" value="10.17487/RFC7517"/>
        </reference>
        <reference anchor="RFC7519" target="https://www.rfc-editor.org/info/rfc7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC7800" target="https://www.rfc-editor.org/info/rfc7800">
          <front>
            <title>Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="April" year="2016"/>
            <abstract>
              <t>This specification describes how to declare in a JSON Web Token (JWT) that the presenter of the JWT possesses a particular proof-of- possession key and how the recipient can cryptographically confirm proof of possession of the key by the presenter.  Being able to prove possession of a key is also sometimes described as the presenter being a holder-of-key.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7800"/>
          <seriesInfo name="DOI" value="10.17487/RFC7800"/>
        </reference>
        <reference anchor="RFC8126" target="https://www.rfc-editor.org/info/rfc8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <author fullname="T. Narten" initials="T." surname="Narten">
              <organization/>
            </author>
            <date month="June" year="2017"/>
            <abstract>
              <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="RFC8152" target="https://www.rfc-editor.org/info/rfc8152">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad">
              <organization/>
            </author>
            <date month="July" year="2017"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8152"/>
          <seriesInfo name="DOI" value="10.17487/RFC8152"/>
        </reference>
        <reference anchor="RFC8392" target="https://www.rfc-editor.org/info/rfc8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610" target="https://www.rfc-editor.org/info/rfc8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz">
              <organization/>
            </author>
            <author fullname="C. Vigano" initials="C." surname="Vigano">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8747" target="https://www.rfc-editor.org/info/rfc8747">
          <front>
            <title>Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="L. Seitz" initials="L." surname="Seitz">
              <organization/>
            </author>
            <author fullname="G. Selander" initials="G." surname="Selander">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="March" year="2020"/>
            <abstract>
              <t>This specification describes how to declare in a CBOR Web Token (CWT) (which is defined by RFC 8392) that the presenter of the CWT possesses a particular proof-of-possession key. Being able to prove possession of a key is also sometimes described as being the holder-of-key. This specification provides equivalent functionality to "Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)" (RFC 7800) but using Concise Binary Object Representation (CBOR) and CWTs rather than JavaScript Object Notation (JSON) and JSON Web Tokens (JWTs).</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8747"/>
          <seriesInfo name="DOI" value="10.17487/RFC8747"/>
        </reference>
        <reference anchor="RFC3986" target="https://www.rfc-editor.org/info/rfc3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee">
              <organization/>
            </author>
            <author fullname="R. Fielding" initials="R." surname="Fielding">
              <organization/>
            </author>
            <author fullname="L. Masinter" initials="L." surname="Masinter">
              <organization/>
            </author>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="WGS84" target="http://earth-info.nga.mil/GandG/publications/tr8350.2/wgs84fin.pdf">
          <front>
            <title>National Imagery and Mapping Agency Technical Report 8350.2, Third Edition</title>
            <author>
              <organization>National Imagery and Mapping Agency</organization>
            </author>
            <date year="2000"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="UCCS.Draft" target="https://tools.ietf.org/html/draft-birkholz-rats-uccs-01">
          <front>
            <title>A CBOR Tag for Unprotected CWT Claims Sets</title>
            <author fullname="Henk Birkholz">
              <organization/>
            </author>
            <date year="2020"/>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="FIDO.AROE" target="https://fidoalliance.org/specs/fido-uaf-v1.0-fd-20191115/fido-allowed-AROE-v1.0-fd-20191115.html">
          <front>
            <title>FIDO Authenticator Allowed Restricted Operating Environments List</title>
            <author>
              <organization>The FIDO Alliance</organization>
            </author>
            <date year="2019" month="November"/>
          </front>
        </reference>
        <reference anchor="EAN-13" target="https://www.gs1.org/standards/barcodes/ean-upc">
          <front>
            <title>International Article Number - EAN/UPC barcodes</title>
            <author>
              <organization>GS1</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID" target="https://tools.ietf.org/html/draft-ietf-sacm-coswid-16">
          <front>
            <title>Concise Software Identification Tags</title>
            <author>
              <organization/>
            </author>
            <date year="2020" month="November"/>
          </front>
        </reference>
        <reference anchor="OpenIDConnectCore" target="https://openid.net/specs/openid-connect-core-1_0.html">
          <front>
            <title>OpenID Connect Core 1.0 incorporating errata set 1</title>
            <author fullname="N. Sakimura">
              <organization/>
            </author>
            <author fullname="J. Bradley">
              <organization/>
            </author>
            <author fullname="M. Jones">
              <organization/>
            </author>
            <author fullname="B. de Medeiros">
              <organization/>
            </author>
            <author fullname="C. Mortimore">
              <organization/>
            </author>
            <date year="2014" month="November"/>
          </front>
        </reference>
        <reference anchor="CBOR-OID" target="https://www.ietf.org/archive/id/draft-ietf-cbor-tags-oid-08.txt">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="Carsten Bormann">
              <organization>Universität Bremen TZI</organization>
            </author>
            <date day="21" month="May" year="2021"/>
            <abstract>
              <t>   The Concise Binary Object Representation (CBOR, RFC 8949) is a data
   format whose design goals include the possibility of extremely small
   code size, fairly small message size, and extensibility without the
   need for version negotiation.

   The present document defines CBOR tags for object identifiers (OIDs).
   It is intended as the reference document for the IANA registration of
   the CBOR tags so defined.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cbor-tags-oid-08"/>
        </reference>
        <reference anchor="RATS-Architecture" target="https://www.ietf.org/archive/id/draft-ietf-rats-architecture-12.txt">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="23" month="April" year="2021"/>
            <abstract>
              <t>   In network protocol exchanges it is often useful for one end of a
   communication to know whether the other end is in an intended
   operating state.  This document provides an architectural overview of
   the entities involved that make such tests possible through the
   process of generating, conveying, and evaluating evidentiary claims.
   An attempt is made to provide for a model that is neutral toward
   processor architectures, the content of claims, and protocols.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-12"/>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122" target="https://www.rfc-editor.org/info/rfc4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach">
              <organization/>
            </author>
            <author fullname="M. Mealling" initials="M." surname="Mealling">
              <organization/>
            </author>
            <author fullname="R. Salz" initials="R." surname="Salz">
              <organization/>
            </author>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4949" target="https://www.rfc-editor.org/info/rfc4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey">
              <organization/>
            </author>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120" target="https://www.rfc-editor.org/info/rfc7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC                        Required", "IETF Review", or "Standards Action" policies apply.  This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation.  The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IDevID" target="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">
          <front>
            <title>IEEE Standard, "IEEE 802.1AR Secure Device Identifier"</title>
            <author>
              <organization/>
            </author>
            <date year="2009" month="December"/>
          </front>
        </reference>
        <reference anchor="ECMAScript" target="http://www.ecma-international.org/ecma-262/5.1/ECMA-262.pdf">
          <front>
            <title>Ecma International, "ECMAScript Language Specification, 5.1 Edition", ECMA Standard 262</title>
            <author>
              <organization/>
            </author>
            <date year="2011" month="June"/>
          </front>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/geolocation-API/#coordinates_interface">
          <front>
            <title>Geolocation API Specification 2nd Edition</title>
            <author>
              <organization>Worldwide Web Consortium</organization>
            </author>
            <date year="2018" month="January"/>
          </front>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://webstore.ansi.org/standards/ieee/ieee8022001r2007">
          <front>
            <title>IEEE Standard For Local And Metropolitan Area Networks Overview And Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2007"/>
          </front>
        </reference>
        <reference anchor="FIDO.Registry" target="https://fidoalliance.org/specs/common-specs/fido-registry-v2.1-ps-20191217.html">
          <front>
            <title>FIDO Registry of Predefined Values</title>
            <author>
              <organization>The FIDO Alliance</organization>
            </author>
            <date year="2019" month="December"/>
          </front>
        </reference>
        <reference anchor="FIPS-140" target="https://csrc.nist.gov/publications/detail/fips/140/2/final">
          <front>
            <title>Security Requirements for Cryptographic Modules</title>
            <author>
              <organization>National Institue of Standards</organization>
            </author>
            <date year="2001" month="May"/>
          </front>
        </reference>
        <reference anchor="Common.Criteria" target="https://www.commoncriteriaportal.org/cc/">
          <front>
            <title>Common Criteria for Information Technology Security Evaluation</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="April"/>
          </front>
        </reference>
      </references>
    </references>
    <section anchor="examples" numbered="true" toc="default">
      <name>Examples</name>
      <section anchor="very-simple-eat" numbered="true" toc="default">
        <name>Very Simple EAT</name>
        <t>This is shown in CBOR diagnostic form. Only the payload signed by COSE
is shown.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
{
    / issuer /           1: "joe",
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /            11: h'0198f50a4ff6c05861c8860d13a638ea',
    / secure-boot /     15: true,
    / debug-disable /   16: 3, / permanent-disable /
    / timestamp (iat) /  6: 1(1526542894)
}
]]></artwork>
      </section>
      <section anchor="example-with-submodules-nesting-and-security-levels" numbered="true" toc="default">
        <name>Example with Submodules, Nesting and Security Levels</name>
        <artwork name="" type="" align="left" alt=""><![CDATA[
{
    / nonce /                 10: h'948f8860d13a463e8e',
    / UEID /                  11: h'0198f50a4ff6c05861c8860d13a638ea',
    / secure-boot /           15: true,
    / debug-disable /         16: 3, / permanent-disable  /
    / timestamp (iat) /        6: 1(1526542894),
    / security-level /        14: 3, / secure restricted OS /
    / submods / 20: {
        / first submod, an Android Application /
        "Android App Foo" :  {
            / security-level /  14: 1 / unrestricted /
        },

        / 2nd submod, A nested EAT from a secure element /
        "Secure Element Eat" :
            / an embedded EAT, bytes of which are not shown /
            h'420123',

        / 3rd submod, information about Linux Android /
        "Linux Android": {
            / security-level /  14: 1 / unrestricted /
        }
    }
}
]]></artwork>
      </section>
    </section>
    <section anchor="ueid-design-rationale" numbered="true" toc="default">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability" numbered="true" toc="default">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion datadbase is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table align="center">
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and SW so this
simple approximation is used. See <xref target="BirthdayAttack" format="default"/>.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
    p = k^2 / 2n 
]]></artwork>
        <t>For this calculation:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
    p  Collision Probability
    n  Total population based on number of bits in UEID
    k  Population in a database
]]></artwork>
        <table align="center">
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's 
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of 
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
  t = 1 / ((k / 10) * p)
  
  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table align="center">
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid" numbered="true" toc="default">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122" format="default"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this 
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality 
random numbers, but do so by mapping into the overall UUID 
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>UUIDs seem to have been designed for scenarios where the implementor
does not have full control over the environment and uniqueness has to
be constructed from identifiers at hand. UEID takes the view that
hardware, software and/or manufacturing process directly implement
UEID in a simple and direct way. It takes the view that cryptographic
quality random number generators are readily available as they are
implemented in commonly used CPU hardware.</t>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts" numbered="true" toc="default">
      <name>Changes from Previous Drafts</name>
      <t>The following is a list of known changes from the previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences.</t>
      <section anchor="from-draft-rats-eat-01" numbered="true" toc="default">
        <name>From draft-rats-eat-01</name>
        <ul spacing="normal">
          <li>Added UEID design rationale appendix</li>
        </ul>
      </section>
      <section anchor="from-draft-mandyam-rats-eat-00" numbered="true" toc="default">
        <name>From draft-mandyam-rats-eat-00</name>
        <t>This is a fairly large change in the orientation of the document, but
no new claims have been added.</t>
        <ul spacing="normal">
          <li>Separate information and data model using CDDL.</li>
          <li>Say an EAT is a CWT or JWT</li>
          <li>Use a map to structure the boot_state and location claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-01" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-01</name>
        <ul spacing="normal">
          <li>Clarifications and corrections for OEMID claim</li>
          <li>Minor spelling and other fixes</li>
          <li>Add the nonce claim, clarify jti claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-02" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-02</name>
        <ul spacing="normal">
          <li>Roll all EUIs back into one UEID type</li>
          <li>UEIDs can be one of three lengths, 128, 192 and 256.</li>
          <li>Added appendix justifying UEID design and size.</li>
          <li>Submods part now includes nested eat tokens so they can be named and
there can be more tha one of them</li>
          <li>Lots of fixes to the CDDL</li>
          <li>Added security considerations</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-03" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-03</name>
        <ul spacing="normal">
          <li>Split boot_state into secure-boot and debug-disable claims</li>
          <li>Debug disable is an enumerated type rather than Booleans</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-04" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-04</name>
        <ul spacing="normal">
          <li>Change IMEI-based UEIDs to be encoded as a 14-byte string</li>
          <li>CDDL cleaned up some more</li>
          <li>CDDL allows for JWTs and UCCSs</li>
          <li>CWT format submodules are byte string wrapped</li>
          <li>Allows for JWT nested in CWT and vice versa</li>
          <li>Allows UCCS (unsigned CWTs) and JWT unsecured tokens</li>
          <li>Clarify tag usage when nesting tokens</li>
          <li>Add section on key inclusion</li>
          <li>Add hardware version claims</li>
          <li>Collected CDDL is now filled in. Other CDDL corrections.</li>
          <li>Rename debug-disable to debug-status; clarify that it is not extensible</li>
          <li>Security level claim is not extensible</li>
          <li>Improve specification of location claim and added a location privacy section</li>
          <li>Add intended use claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-05" numbered="true" toc="default">
        <name>From draft-ietf-rats-05</name>
        <ul spacing="normal">
          <li>CDDL format issues resolved</li>
          <li>Corrected reference to Location Privacy section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-06" numbered="true" toc="default">
        <name>From draft-ietf-rats-06</name>
        <ul spacing="normal">
          <li>Added boot-seed claim</li>
          <li>Rework CBOR interoperability section</li>
          <li>Added profiles claim and section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-07" numbered="true" toc="default">
        <name>From draft-ietf-rats-07</name>
        <ul spacing="normal">
          <li>Filled in IANA and other sections for possible preassignment of claim keys for well understood claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-08" numbered="true" toc="default">
        <name>From draft-ietf-rats-08</name>
        <ul spacing="normal">
          <li>Change profile claim to be either a URL or an OID rather than a test string</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-09" numbered="true" toc="default">
        <name>From draft-ietf-rats-09</name>
        <ul spacing="normal">
          <li>Added section on use for Evidence and Attestation Results</li>
          <li>Add string labels non-claim labels for use with JSON (e.g. labels for members of location claim)</li>
        </ul>
      </section>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIABrXr2AAA+y9e3PjVpIn+j8+BUKeu5Y8JPWsp6NnVpZkW+56bUnVtTcm
ZhwgCUpwgQAbAKVil2tivsZG3Pvl5pPczF9mngdIytXTPTs3Ntqx21MigHPy
5MmTJ985HA6Ttsuq6c9ZWVf587RrlnlSLBr8q+2ODg6eHRwlk6x7nrbdNEmm
9aTK5vTitMlm3bDIu9mwybp2mGfdsMy6vO2S5P7mefr29PoqfV83H4rqJv2h
qZeL5Kt0UldtXrXL9nn69Spvv6af2uV4XrRtUVfdakHjXl5cf58siudJmnb1
xN7DH9N80d3SLyf8d1s3XZPPWv9Gu5rHP0zq+SKbdMEby7H/rar5p2Y2yadt
typze60rOv7j+jZPLyr6Y5WedrysrCMY0+v6Q16luxen13tJNh43+d3zlP5I
sibPCPiqy5sq75IP94Sv4qbixWfB55Nx3dCip4So5+nRweHx8PAgyZbdbd08
T4ZpURH4P4zSl7Qjq2xO8AmyfyiaYnqbNcGDuiEk/49lVtKK5ul1Prmt6rK+
KfKWoJiMeLWEn5xW+ujJk0fpy7rJb+tlm6fnTXGXM3Zoac/Tq6xKz4v8pmZc
5DcE4/P0LCuLWd1URQYkLquuoTffXZ3Sn4tbkMnO3x+mTx89TR8/OkyfEJHs
0KN8nhXl83QuIP73P3bF6I8K34j+x5b3YpS+WFbTcZlNc7fAF9myyatJHj3C
Eq/yybLhXaANqZtV+uLFmZ+rvCn/e9GWNOOwyZkiwolejtLvsrIk3OdN3bqp
XhY3y7zsPfqvxWaAzJOjZ88CXI4Fyq3I/GmUvv76vK7qm9ulx+ZPeZPPV/GT
L1/h0ZNn6fdZUxGp1sub2/RtnU3dCoMHWM6UqfPd4Un65MVVtL6q6PJp+ns6
ANN6Hiz15CQ9PHp0lB4/Pj58Giz1l3oKYNeXmlR1M6fjc5czU3j7/dnR4eEz
/efTZyf2zyePDp/4f7pfnx4c2LuHR4/dP5+cuH8+OrJ/Hj9z/3x86D57cmLj
Hj97SiPQv9//cPUUAxBfypobxtpt1y2e7+/nWdPdDotqVo+qm2w0L8r9H4g8
f9hfLMdlMQEXaPe75unxo4PR0f79Tfv0ZFZUo8V0JsMJ93mFF7MyvZxnNzmR
PY1Bh3+xYIZyekNHZSV7SEOW6dt8QbSfypgDOilFM00vpgWPgVGNw/C/h0IK
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
Wc5CVLJceezEkBIATHa1bZfWG3Ykixsf+0PzFcPEhgDStjuz6OeK2vy9LVUL
7+4urTdCHoDQ8OKvCksanwJpdy8APRHxe3hq64ecsp0zkzPEHAXI0pebfNmQ
uq/IcaLhBijx6Z4jaBoar3CSGbgBevioDx0+Tr3NYLFKZk3B3NjNmDXgi0bG
eVlMFlef7zol3ze6I844Tq0DRImDJ2Z+QXQ6Sjsg/C79z9lJ8WmLKIpIg1i3
1PD7lSAYiO4XfJPsKtILi1wB3HUjRxoaGwGkmxq2nsM39U540NPYu4sq4+Zh
LYdtagVdiPepq7p2s8JOW6aGeqWUOqo0X05K6bFZK7kLzvuDaQJl77Z70Te8
Cm63cNp7HDeICA6pYbhHYrbBXNyryNQgGB2YJGjEOQ5bpA3aOfmLwufTtAWf
y2kJpZjAEiHT/HdQypSm+dnxOJBXdY6GCVtI1bcSp2RaPLp++ewe3FVpB5pq
n7PPhcbNEJcPVZP6uO2CalfAjBbQ2MonOAAjEN29aueln6JFvi/SlvD+r4Gz
cAlFfJf3tAlP9Bh75CTwRAaxsPU4FJxRwpztKNNGKUg0A0BVxp5e6ggsb4zk
BnALYtss0uqRlxfsVzD5jlf3HafYOWANstw6FGI6q3v7vmnnl6A54kn87sua
pvGdhzaIRzQPTofDZ1vpvYOc1y66zKy1ilSkxpd524tFKoJ1dhLGX6lIe0+E
3bnQIVnF2P5UzZclSqm+EVVRid8QAwTQRzK2HdU/GNvne3Ld4Y3HyVDdMbhh
R2OkfVzyuoa9owyDK7vOKKeqDT0sInX67Hm6CEWNInfi47QGN4Ns6/v8w20m
2fSVtiYLCoSiERZUxUoE0gZUU5QoFTvcvxBqlJCKx88KiwfdM8SZv2Bqb4ya
bBpIQtNDzGNkipdEJYsUqBmuKf/MG6RBrt3QKHW1fhwa9yrZIKObFE5GLura
KDGZqC9Fph98rBuEBQi72o2ugEUe6+9MWb7UbMlA+ULGLkJS/lrXWtLrdTtF
3W6T2zI37vrupiMUQAKt53WQaxsW4rWToh4JaUXH4UZIREM7ruKOsDyWKe7s
/CR7lvkQk0ZSJdGs6G0C5/lXWCq+6GUqafiRyqcH4p3dVVY5XU0WNs9WMbC0
ExyU1voyB+oDu93IVa8W2F+8KT+0cjlD29p5nahyWu1fSC8o9hj4LRuzTKEq
OhHNG6/AnV3Qb7HNtd5ojrv9XSUcqWkjaFVgI6MYsObe763apMjJvTcfr2+U
CUI6WTIteyrm48lxZHfAj8GiDolqzGKbpay4YGV/qJxaSgzSOVM5G3alqRPT
dUxnRtwO7zENA/ZErzTzBNUSQNE842emUfg6BfgONo3lHKd6HHrqRhbfE2fK
Y/WZGn2SoUmYbKPgivxFDEHLzU7/UQa3Ud4+e+7rQVN/yR3bF4CVNfM3ktaz
VSflJ3aqWDkHC46P26qR/NXoM7xFztThv3k4kCwIl3VUZrX7eSVhNJITKmJq
5zdvhHlvQKy1lXwsCtoy5vMjS3lTg5l9QuZztS9kjc7csdRvVLh8VXU8Khar
0lLM1AtyWVvpZV6PF992nkd/5kbXKqIHeJ9M2NMWiZ0VXnoJpsQeTLS/Br/g
Re/NIYQRPM8EXZw98hE89k7OheR4Pib44ItUPd80YBJct+1s7xw2ughxwhgX
lNFUgoRIl6S93u2HUiQtIaoQQxLYjru1R44XX/VrL97auNoIAWR5DXRbo+na
l0Ea/pZA7DwkJXCoCHPjEkH6B9uQcJlOOLLkH4THi8rJrfuufVj8B9u2jqzK
awEA

-->

</rfc>
