<?xml version='1.0' encoding='utf-8'?>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.4.12 -->
<!DOCTYPE rfc SYSTEM "rfc2629-xhtml.ent">
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" obsoletes="" updates="" submissionType="IETF" xml:lang="en" tocInclude="true" tocDepth="4" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.7.0 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@island-resort.com</email>
      </address>
    </author>
    <author initials="M." surname="Ballesteros" fullname="Miguel Ballesteros">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 4299</phone>
        <email>mballest@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <date year="2021" month="May" day="25"/>
    <area>Internet</area>
    <workgroup>RATS Working Group</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides a signed (attested) set of
claims that describe state and characteristics of an entity, typically
a device like a phone or an IoT device.  These claims are used by a
relying party to determine how much it wishes to trust the entity.</t>
      <t>An EAT is either a CWT or JWT with some attestation-oriented 
claims. To a large degree, all this document does is extend
CWT and JWT.</t>
    </abstract>
    <note>
      <name>Contributing</name>
      <t>TBD</t>
    </note>
  </front>
  <middle>
    <section anchor="introduction" numbered="true" toc="default">
      <name>Introduction</name>
      <t>Remote device attestation is a fundamental service that allows a remote
device such as a mobile phone, an Internet-of-Things (IoT) device, or
other endpoint to prove itself to a relying party, a server or a
service.  This allows the relying party to know some characteristics
about the device and decide whether it trusts the device.</t>
      <t>Remote attestation is a fundamental service that can underlie other
protocols and services that need to know about the trustworthiness of
the device before proceeding. One good example is biometric
authentication where the biometric matching is done on the device. The
relying party needs to know that the device is one that is known to do
biometric matching correctly.  Another example is content protection
where the relying party wants to know the device will protect the
data.  This generalizes on to corporate enterprises that might want to
know that a device is trustworthy before allowing corporate data to be
accessed by it.</t>
      <t>The notion of attestation here is large and may include, but is not
limited to the following:</t>
      <ul spacing="normal">
        <li>Proof of the make and model of the device hardware (HW)</li>
        <li>Proof of the make and model of the device processor, particularly
for security-oriented chips</li>
        <li>Measurement of the software (SW) running on the device</li>
        <li>Configuration and state of the device</li>
        <li>Environmental characteristics of the device such as its GPS location</li>
      </ul>
      <section anchor="cwt-jwt-and-uccs" numbered="true" toc="default">
        <name>CWT, JWT and UCCS</name>
        <t>For flexibility and ease of imlpementation in a wide variety of environments, EATs can be either CBOR <xref target="RFC8949" format="default"/> or JSON <xref target="ECMAScript" format="default"/> format.
This specification simultaneously describes both formats.</t>
        <t>An EAT is either a CWT as defined in <xref target="RFC8392" format="default"/>, a UCCS as defined in <xref target="UCCS.Draft" format="default"/>, or a JWT as defined in <xref target="RFC7519" format="default"/>.
This specification extends those specifications with additional claims for attestation.</t>
        <t>The identification of a protocol element as an EAT, whether CBOR or JSON format, follows the general conventions used by CWT, JWT and UCCS.
Largely this depends on the protocol carrying the EAT.
In some cases it may be by content type (e.g., MIME type).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
      </section>
      <section anchor="cddl" numbered="true" toc="default">
        <name>CDDL</name>
        <t>This specification uses CDDL, <xref target="RFC8610" format="default"/>, as the primary formalism to
define each claim.  The implementor then interprets the CDDL to come
to either the CBOR <xref target="RFC8949" format="default"/> or JSON <xref target="ECMAScript" format="default"/>
representation. In the case of JSON, Appendix E of <xref target="RFC8610" format="default"/> is
followed. Additional rules are given in <xref target="jsoninterop" format="default"/> of this
document where Appendix E is insufficient.  (Note that this is not to
define a general means to translate between CBOR and JSON, but only to
define enough such that the claims defined in this document can be
rendered unambiguously in JSON).</t>
        <t>The CWT specification was authored before CDDL was available and did not use it.
This specification includes a CDDL definition of most of what is described in <xref target="RFC8392" format="default"/>.</t>
      </section>
      <section anchor="entity-overview" numbered="true" toc="default">
        <name>Entity Overview</name>
        <t>An "entity" can be any device or device subassembly ("submodule") that
can generate its own attestation in the form of an EAT.  The
attestation should be cryptographically verifiable by the EAT
consumer. An EAT at the device-level can be composed of several
submodule EAT's.</t>
        <t>Modern devices such as a mobile phone have many different execution
environments operating with different security levels. For example, it
is common for a mobile phone to have an "apps" environment that runs
an operating system (OS) that hosts a plethora of downloadable
apps. It may also have a TEE (Trusted Execution Environment) that is
distinct, isolated, and hosts security-oriented functionality like
biometric authentication. Additionally, it may have an eSE (embedded
Secure Element) - a high security chip with defenses against HW
attacks that is used to produce attestations.  This device attestation format
allows the attested data to be tagged at a security level from which
it originates.  In general, any discrete execution environment that
has an identifiable security level can be considered an entity.</t>
      </section>
      <section anchor="use-as-evidence-and-attestation-results" numbered="true" toc="default">
        <name>Use as Evidence and Attestation Results</name>
        <t>Here, normative reference is made to <xref target="RATS-Architecture" format="default"/>, particularly the definition of Evidence, the Verifier, Attestation Results and the Relying Party.
Per Figure 1 in <xref target="RATS-Architecture" format="default"/>, Evidence is a protocol message that goes from the Attester to the Verifier and Attestation Results a message that goes from the Verifier to the Relying Party.
EAT is defined such that it can be used to represent either Evidence, Attestation Results or both.
No claims defined here are considered exclusive to or are prohibited in either use.
It is useful to create EAT profiles as described in <xref target="profiles" format="default"/> for either use.</t>
        <t>It is useful to characterize the relationship of claims in Evidence to those in Attestation Results.</t>
        <t>Many claims in Evidence simply will pass through the Verifier to the Relying Party without modification.
They will be verified as authentic from the device by the Verifier just through normal verification of the Attester's signature.
They will be protected from modification when they are conveyed to the Relying Party by whatever means is used to protect Attestation Results. 
(The details of that protection are out of scope of this document.)</t>
        <t>Some claims in Evidence will be verified by the Verifier by comparison to Reference Values.
In this case the claims in Evidence will not likely be conveyed to the Relying Party.
Instead, some claim indicating they were checked may be added to the Attestation Results or it may be tacitly known that the Verifier always does this check.</t>
        <t>In some cases the Verifier may provide privacy-preserving functionality by stripping or modifying claims that do not posses sufficient privacy-preserving characteristics.</t>
      </section>
      <section anchor="eat-operating-models" numbered="true" toc="default">
        <name>EAT Operating Models</name>
        <t>TODO: Rewrite (or eliminate) this section in light of the RATS architecture draft.</t>
        <t>At least the following three participants exist in all EAT operating
models. Some operating models have additional participants.</t>
        <dl>
          <dt>
The Entity.  </dt>
          <dd>
            <t>This is the phone, the IoT device, the sensor, the sub-assembly or
such that the attestation provides information about.</t>
          </dd>
          <dt>
The Manufacturer.  </dt>
          <dd>
            <t>The company that made the entity.  This may be a chip vendor, a
circuit board module vendor or a vendor of finished consumer products.</t>
          </dd>
          <dt>
The Relying Party.  </dt>
          <dd>
            <t>The server, service or company that makes use of the information in
the EAT about the entity.</t>
          </dd>
        </dl>
        <t>In all operating models, the manufacturer provisions some secret
attestation key material (AKM) into the entity during manufacturing.
This might be during the manufacturer of a chip at a fabrication
facility (fab) or during final assembly of a consumer product or any
time in between. This attestation key material is used for signing
EATs.</t>
        <t>In all operating models, hardware and/or software on the entity create
an EAT of the format described in this document. The EAT is always
signed by the attestation key material provisioned by the
manufacturer.</t>
        <t>In all operating models, the relying party must end up knowing that
the signature on the EAT is valid and consistent with data from claims
in the EAT.  This can happen in many different ways. Here are some
examples.</t>
        <ul spacing="normal">
          <li>The EAT is transmitted to the relying party. The relying party gets
corresponding key material (e.g. a root certificate) from the
manufacturer. The relying party performs the verification.</li>
          <li>The EAT is transmitted to the relying party. The relying party
transmits the EAT to a verification service offered by the
manufacturer. The server returns the validated claims.</li>
          <li>The EAT is transmitted directly to a verification service, perhaps
operated by the manufacturer or perhaps by another party. It
verifies the EAT and makes the validated claims available to the
relying party. It may even modify the claims in some way and re-sign
the EAT (with a different signing key).</li>
        </ul>
        <t>All these operating models are supported and there is no preference
of one over the other. It is important to support this variety of
operating models to generally facilitate deployment and to allow for
some special scenarios. One special scenario has a validation service
that is monetized, most likely by the manufacturer.  In another, a
privacy proxy service processes the EAT before it is transmitted to
the relying party. In yet another, symmetric key material is used for
signing. In this case the manufacturer should perform the
verification, because any release of the key material would enable a
participant other than the entity to create valid signed EATs.</t>
      </section>
      <section anchor="what-is-not-standardized" numbered="true" toc="default">
        <name>What is Not Standardized</name>
        <t>The following is not standardized for EAT, just the same they are not
standardized for CWT or JWT.</t>
        <section anchor="transmission-protocol" numbered="true" toc="default">
          <name>Transmission Protocol</name>
          <t>EATs may be transmitted by any protocol the same as CWTs and JWTs. For
example, they might be added in extension fields of other protocols,
bundled into an HTTP header, or just transmitted as files. This
flexibility is intentional to allow broader adoption. This flexibility
is possible because EAT's are self-secured with signing (and possibly
additionally with encryption and anti-replay). The transmission
protocol is not required to fulfill any additional security
requirements.</t>
          <t>For certain devices, a direct connection may not exist between the
EAT-producing device and the Relying Party. In such cases, the EAT
should be protected against malicious access. The use of COSE and JOSE
allows for signing and encryption of the EAT. Therefore, even if the
EAT is conveyed through intermediaries between the device and Relying
Party, such intermediaries cannot easily modify the EAT payload or
alter the signature.</t>
        </section>
        <section anchor="signing-scheme" numbered="true" toc="default">
          <name>Signing Scheme</name>
          <t>The term "signing scheme" is used to refer to the system that includes
end-end process of establishing signing attestation key material in
the entity, signing the EAT, and verifying it. This might involve key
IDs and X.509 certificate chains or something similar but
different. The term "signing algorithm" refers just to the algorithm
ID in the COSE signing structure. No particular signing algorithm or
signing scheme is required by this standard.</t>
          <t>There are three main implementation issues driving this. First, secure
non-volatile storage space in the entity for the attestation key
material may be highly limited, perhaps to only a few hundred bits, on
some small IoT chips. Second, the factory cost of provisioning key
material in each chip or device may be high, with even millisecond
delays adding to the cost of a chip. Third, privacy-preserving signing
schemes like ECDAA (Elliptic Curve Direct Anonymous Attestation) are
complex and not suitable for all use cases.</t>
          <t>Over time to faciliate interoperability, some signing schemes may be
defined in EAT profiles or other documents either in the IETF or outside.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology" numbered="true" toc="default">
      <name>Terminology</name>
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in
BCP 14 <xref target="RFC2119" format="default"/> <xref target="RFC8174" format="default"/> when, and only when, they appear in all
capitals, as shown here.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519" format="default"/>, COSE
<xref target="RFC8152" format="default"/>, and CWT <xref target="RFC8392" format="default"/>.</t>
      <dl>
        <dt>
Claim Name.  </dt>
        <dd>
          <t>The human-readable name used to identify a claim.</t>
        </dd>
        <dt>
Claim Key.  </dt>
        <dd>
          <t>The CBOR map key or JSON name used to identify a claim.</t>
        </dd>
        <dt>
Claim Value.  </dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>
CWT Claims Set.  </dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
        <dt>
Attestation Key Material (AKM).  </dt>
        <dd>
          <t>The key material used to sign the EAT token. If it is done
symmetrically with HMAC, then this is a simple symmetric key.
If it is done with ECC, such as an IEEE DevID <xref target="IDevID" format="default"/>, then this
is the private part of the EC key pair. If ECDAA 
is used, (e.g., as used by Enhanced Privacy ID, i.e. EPID) then it is the key material 
needed for ECDAA.</t>
        </dd>
      </dl>
    </section>
    <section anchor="the-claims" numbered="true" toc="default">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation. It also
mentions several claims defined by CWT and JWT that are particularly
important for EAT.</t>
      <t>Note also:
* Any claim defined for CWT or JWT may be used in an EAT including 
  those in the CWT <xref target="IANA.CWT.Claims" format="default"/> and JWT IANA <xref target="IANA.JWT.Claims" format="default"/>
  claims registries.</t>
      <ul spacing="normal">
        <li>All claims are optional</li>
        <li>No claims are mandatory</li>
        <li>All claims that are not understood by implementations MUST be ignored</li>
      </ul>
      <t>There are no default values or meanings assigned to absent claims
other than they are not reported. The reason for a claim's absence may
be the implementation not supporting the claim, an inability to
determine its value, or a preference to report in a different way such
as a proprietary claim.</t>
      <t>CDDL along with text descriptions is used to define each claim
indepdent of encoding.  Each claim is defined as a CDDL group (the
group is a general aggregation and type definition feature of
CDDL). In the encoding section <xref target="encoding" format="default"/>, the CDDL groups turn into
CBOR map entries and JSON name/value pairs.</t>
      <t>TODO: add paragraph here about use for Attestation Evidence and for Results.</t>
      <section anchor="token-id-claim-cti-and-jti" numbered="true" toc="default">
        <name>Token ID Claim (cti and jti)</name>
        <t>CWT defines the "cti" claim. JWT defines the "jti" claim. These are
equivalent to each other in EAT and carry a unique token identifier as
they do in JWT and CWT.  They may be used to defend against re use of
the token but are distinct from the nonce that is used by the relying
party to guarantee freshness and defend against replay.</t>
      </section>
      <section anchor="timestamp-claim-iat" numbered="true" toc="default">
        <name>Timestamp claim (iat)</name>
        <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
        <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even 
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
        <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. No token may contain an iat claim in
float-point format. Any recipient of a token with a floating-point
format iat claim may consider it an error.  A 64-bit integer 
representation of epoch time can represent a range of +/- 500 billion
years, so the only point of a floating-point timestamp is to 
have precession greater than one second. This is not needed for EAT.</t>
      </section>
      <section anchor="nonce-claim-nonce" numbered="true" toc="default">
        <name>Nonce Claim (nonce)</name>
        <t>All EATs should have a nonce to prevent replay attacks. The nonce is
generated by the relying party, the end consumer of the token. It is
conveyed to the entity over whatever transport is in use before the
token is generated and then included in the token as the nonce claim.</t>
        <t>This documents the nonce claim for registration in the IANA CWT 
claims registry. This is equivalent to the JWT nonce claim that is
already registered.</t>
        <t>The nonce must be at least 8 bytes (64 bits) as fewer are unlikely
to be secure. A maximum of 64 bytes is set to limit the memory
a constrained implementation uses. This size range is not set
for the already-registered JWT nonce, but it should follow
this size recommendation when used in an EAT.</t>
        <t>Multiple nonces are allowed to accommodate multistage verification
and consumption.</t>
        <section anchor="nonce-cddl" numbered="true" toc="default">
          <name>nonce CDDL</name>
          <sourcecode type="CDDL">
nonce-type = bstr .size (8..64)

nonce-claim = (
    nonce =&gt; nonce-type / [ 2* nonce-type ]
)
</sourcecode>
        </section>
      </section>
      <section anchor="universal-entity-id-claim-ueid" numbered="true" toc="default">
        <name>Universal Entity ID Claim (ueid)</name>
        <t>UEID's identify individual manufactured entities / devices such as a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire device or a submodule or
subsystem. It does not identify types, models or classes of
devices. It is akin to a serial number, though it does not have to be
sequential.</t>
        <t>UEID's must be universally and globally unique across manufacturers
and countries. UEIDs must also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then relying parties receiving them will have
to track other characteristics of the device to keep devices distinct
between manufacturers).</t>
        <t>There are privacy considerations for UEID's. See <xref target="ueidprivacyconsiderations" format="default"/>.</t>
        <t>The UEID should be permanent. It should never change for a given
device / entity. In addition, it should not be reprogrammable.  UEID's
are variable length. All implementations MUST be able to receive
UEID's that are 33 bytes long (1 type byte and 256 bits).  The
recommended maximum sent is also 33 bytes.</t>
        <t>When the entity constructs the UEID, the first byte is a type and the
following bytes the ID for that type. Several types are allowed to
accommodate different industries and different manufacturing processes
and to give options to avoid paying fees for certain types of
manufacturer registrations.</t>
        <t>Creation of new types requires a Standards Action <xref target="RFC8126" format="default"/>.</t>
        <table anchor="ueid-types-table" align="center">
          <name>UEID Composition Types</name>
          <thead>
            <tr>
              <th align="left">Type Byte</th>
              <th align="left">Type Name</th>
              <th align="left">Specification</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">0x01</td>
              <td align="left">RAND</td>
              <td align="left">This is a 128, 192 or 256 bit random number generated once and stored in the device. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the device and stored. It may not be smaller than 128 bits.</td>
            </tr>
            <tr>
              <td align="left">0x02</td>
              <td align="left">IEEE EUI</td>
              <td align="left">This makes use of the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-device identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while devices with multiple network interfaces may have multiple MAC addresses, there is only one UEID for a device) <xref target="IEEE.802-2001" format="default"/>, <xref target="OUI.Guide" format="default"/></td>
            </tr>
            <tr>
              <td align="left">0x03</td>
              <td align="left">IMEI</td>
              <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which SHALL be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded SHALL NOT include Luhn checksum or SVN information. <xref target="ThreeGPP.IMEI" format="default"/></td>
            </tr>
          </tbody>
        </table>
        <t>UEID's are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
        <t>The consumer (the relying party) of a UEID MUST treat a UEID as a
completely opaque string of bytes and not make any use of its internal
structure. For example, they should not use the OUI part of a type
0x02 UEID to identify the manufacturer of the device. Instead they
should use the oemid claim that is defined elsewhere. The reasons for
this are:</t>
        <ul spacing="normal">
          <li>UEIDs types may vary freely from one manufacturer to the next.</li>
          <li>New types of UEIDs may be created. For example, a type 0x07 UEID may
be created based on some other manufacturer registration scheme.</li>
          <li>Device manufacturers are allowed to change from one type of UEID to
another anytime they want. For example, they may find they can
optimize their manufacturing by switching from type 0x01 to type
0x02 or vice versa.  The main requirement on the manufacturer is
that UEIDs be universally unique.</li>
        </ul>
        <section anchor="ueid-cddl" numbered="true" toc="default">
          <name>ueid CDDL</name>
          <sourcecode type="CDDL">
ueid-type = bstr .size (7..33)

ueid-claim = (
     ueid =&gt; ueid-type
)
</sourcecode>
        </section>
      </section>
      <section anchor="origination-claim-origination" numbered="true" toc="default">
        <name>Origination Claim (origination)</name>
        <t>TODO: this claim is likely to be dropped in favor of Endorsement identifier and locators.</t>
        <t>This claim describes the parts of the device or entity that are
creating the EAT. Often it will be tied back to the device or chip
manufacturer. The following table gives some examples:</t>
        <table align="center">
          <thead>
            <tr>
              <th align="left">Name</th>
              <th align="left">Description</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">Acme-TEE</td>
              <td align="left">The EATs are generated in the TEE authored and configured by "Acme"</td>
            </tr>
            <tr>
              <td align="left">Acme-TPM</td>
              <td align="left">The EATs are generated in a TPM manufactured by "Acme"</td>
            </tr>
            <tr>
              <td align="left">Acme-Linux-Kernel</td>
              <td align="left">The EATs are generated in a Linux kernel configured and shipped by "Acme"</td>
            </tr>
            <tr>
              <td align="left">Acme-TA</td>
              <td align="left">The EATs are generated in a Trusted Application (TA) authored by "Acme"</td>
            </tr>
          </tbody>
        </table>
        <t>TODO: consider a more structure approach where the name and the URI
and other are in separate fields.</t>
        <t>TODO: This needs refinement. It is somewhat parallel to issuer claim
in CWT in that it describes the authority that created the token.</t>
        <section anchor="origination-cddl" numbered="true" toc="default">
          <name>origination CDDL</name>
          <sourcecode type="CDDL">
origination-claim = (
    origination =&gt; string-or-uri
)
</sourcecode>
        </section>
      </section>
      <section anchor="oemid" numbered="true" toc="default">
        <name>OEM Identification by IEEE (oemid)</name>
        <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE.RA" format="default"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide" format="default"/> and provides a lookup
services <xref target="OUI.Lookup" format="default"/></t>
        <t>Companies that have more than one of these IDs or MAC address blocks
should pick one and prefer that for all their devices.</t>
        <t>Commonly, these are expressed in Hexadecimal Representation
<xref target="IEEE.802-2001" format="default"/> also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48. For JSON encoded
tokens, this is further base64url encoded.</t>
        <section anchor="oemid-cddl" numbered="true" toc="default">
          <name>oemid CDDL</name>
          <sourcecode type="CDDL">
oemid-claim = (
    oemid =&gt; bstr
)
</sourcecode>
        </section>
      </section>
      <section anchor="hardware-version-claims-hardware-version-claims" numbered="true" toc="default">
        <name>Hardware Version Claims (hardware-version-claims)</name>
        <t>The hardware version can be claimed at three different levels, the chip, the circuit board and the final device assembly.
An EAT can include any combination these claims.</t>
        <t>The hardware version is a simple text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID" format="default"/>.</t>
        <t>The hardware version can also be given by a 13-digit European Article Number <xref target="EAN-13" format="default"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.
This claim is the ASCII text representation of actual digits often printed with a bar code.
Use of this claim must comply with the EAN allocation and assignment rules.
For example, this requires the manufacturer to obtain a manufacture code from GS1.</t>
        <t>Both the simple version string and EAN-13 versions may be included for the same hardware.</t>
        <sourcecode type="CDDL">
chip-version-claim = (
    chip-version =&gt; tstr
)

chip-version-scheme-claim = (
    chip-version-scheme =&gt; $version-scheme
)

board-version-claim = (
    board-version =&gt; tstr
)

board-version-scheme-claim = (
    board-version-scheme =&gt; $version-scheme
)

device-version-claim = (
    device-version =&gt; tstr
)

device-version-scheme-claim = (
    device-version-scheme =&gt; $version-scheme
)


ean-type = text .regexp "[0-9]{13}"

ean-chip-version-claim = (
    ean-chip-version =&gt; ean-type
)

ean-board-version-claim = (
    ean-board-version =&gt; ean-type
)

ean-device-version-claim = (
    ean-device-version =&gt; ean-type
)

hardware-version-claims = (
    ? chip-version-claim,
    ? board-version-claim,
    ? device-version-claim,
    ? chip-version-scheme-claim,
    ? board-version-scheme-claim,
    ? device-version-scheme-claim,
    ? ean-chip-version-claim,
    ? ean-board-version-claim,
    ? ean-device-version-claim,
)

</sourcecode>
      </section>
      <section anchor="software-description-and-version" numbered="true" toc="default">
        <name>Software Description and Version</name>
        <t>TODO: Add claims that reference CoSWID.</t>
      </section>
      <section anchor="the-security-level-claim-security-level" numbered="true" toc="default">
        <name>The Security Level Claim (security-level)</name>
        <t>This claim characterizes the device/entity 
ability to defend against attacks aimed at capturing the signing
key, forging claims and at forging EATs. This is done by
defining four security levels as described below. This is similar
to the key protection types defined by the Fast Identity Online (FIDO) Alliance <xref target="FIDO.Registry" format="default"/>.</t>
        <t>These claims describe security environment and countermeasures
available on the end-entity / client device where the attestation key
reside and the claims originate.</t>
        <dl>
          <dt>
1 -- Unrestricted  </dt>
          <dd>
            <t>There is some expectation that implementor will
protect the attestation signing keys at this level. Otherwise
the EAT provides no meaningful security assurances.</t>
          </dd>
          <dt>
2-- Restricted  </dt>
          <dd>
            <t>Entities at this level should not be general-purpose
operating environments that host features such as app download
systems, web browsers and complex productivity applications.
It is akin to the Secure Restricted level (see below) without the
security orientation. Examples include a Wi-Fi subsystem,
an IoT camera, or sensor device.</t>
          </dd>
          <dt>
3 -- Secure Restricted  </dt>
          <dd>
            <t>Entities at this level must meet the criteria defined by FIDO Allowed
Restricted Operating Environments <xref target="FIDO.AROE" format="default"/>. Examples include TEE's and 
schemes using virtualization-based security. Like the FIDO security goal,
security at this level is aimed at defending well against large-scale
network / remote attacks against the device.</t>
          </dd>
          <dt>
4 -- Hardware  </dt>
          <dd>
            <t>Entities at this level must include substantial defense 
against physical or electrical attacks against the device itself.
It is assumed any potential attacker has captured the device and can 
disassemble it. Example include TPMs and Secure Elements.</t>
          </dd>
        </dl>
        <t>The entity should claim the highest security level it achieves and no higher.
This set is not extensible so as to provide a common interoperable description of security level to the relying party.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of security and its own proprietary claim as a refined indication.</t>
        <t>This claim is not intended as a replacement for a proper end-device
security certification schemes such as those based on FIPS 140 <xref target="FIPS-140" format="default"/> 
or those based on Common Criteria <xref target="Common.Criteria" format="default"/>. The 
claim made here is solely a self-claim made by the Entity Originator.</t>
        <section anchor="security-level-cddl" numbered="true" toc="default">
          <name>security-level CDDL</name>
          <sourcecode type="CDDL">
security-level-type = &amp;(
    unrestricted: 1,
    restricted: 2,
    secure-restricted: 3,
    hardware: 4
)

security-level-claim = (
    security-level =&gt; security-level-type
)
</sourcecode>
        </section>
      </section>
      <section anchor="secure-boot-claim-secure-boot" numbered="true" toc="default">
        <name>Secure Boot Claim (secure-boot)</name>
        <t>The value of true indicates secure boot is enabled. Secure boot is
considered enabled when base software, the firmware and operating
system, are under control of the entity manufacturer identified in the
oemid claimd described in <xref target="oemid" format="default"/>. This may because the software is
in ROM or because it is cryptographically authenticated or some
combination of the two or other.</t>
        <section anchor="secure-boot-cddl" numbered="true" toc="default">
          <name>secure-boot CDDL</name>
          <sourcecode type="CDDL">
secure-boot-claim = (
    secure-boot =&gt; bool
)
</sourcecode>
        </section>
      </section>
      <section anchor="debug-status-claim-debug-status" numbered="true" toc="default">
        <name>Debug Status Claim (debug-status)</name>
        <t>This applies to system-wide or submodule-wide debug facilities of the
target device / submodule like JTAG and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
        <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-device
public keys.</t>
        <t>As with all claims, the absence of the debug level claim means
it is not reported. A conservative interpretation might assume
the Not Disabled state. It could however be that it is reported
in a proprietary claim.</t>
        <t>This claim is not extensible so as to provide a common interoperable description of debug status to the relying party.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
        <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
        <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The verifier or relying party receiving an EAT cannot
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
        <t>An individual target device / submodule may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
        <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the relying party can know the debug status
of the submodules since there is no inheritance.</t>
        <section anchor="enabled" numbered="true" toc="default">
          <name>Enabled</name>
          <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
        </section>
        <section anchor="disabled" numbered="true" toc="default">
          <name>Disabled</name>
          <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future, and it may also be
possible that they were enabled in the past after the
target device/sub-system booted/started, but they are currently disabled.</t>
        </section>
        <section anchor="disabled-since-boot" numbered="true" toc="default">
          <name>Disabled Since Boot</name>
          <t>This level indicates all debug facilities are currently disabled and
have been so since the target device/sub-system booted/started.</t>
        </section>
        <section anchor="disabled-permanently" numbered="true" toc="default">
          <name>Disabled Permanently</name>
          <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer cannot enable them. Only
the manufacturer indicated in the OEMID claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
        </section>
        <section anchor="disabled-fully-and-permanently" numbered="true" toc="default">
          <name>Disabled Fully and Permanently</name>
          <t>This level indicates that all debug capabilities for the target
device/sub-module are permanently disabled.</t>
        </section>
        <section anchor="debug-status-cddl" numbered="true" toc="default">
          <name>debug-status CDDL</name>
          <sourcecode type="CDDL">
debug-status-type = &amp;(
    enabled: 0,
    disabled: 1,
    disabled-since-boot: 2,
    disabled-permanently: 3,
    disabled-fully-and-permanently: 4
)

debug-status-claim = (
    debug-status =&gt; debug-status-type
)
</sourcecode>
        </section>
      </section>
      <section anchor="including-keys" numbered="true" toc="default">
        <name>Including Keys</name>
        <t>An EAT may include a cryptographic key such as a public key.
The signing of the EAT binds the key to all the other claims in the token.</t>
        <t>The purpose for inclusion of the key may vary by use case.
For example, the key may be included as part of an IoT device onboarding protocol.
When the FIDO protocol includes a pubic key in its attestation message, the key represents the binding of a user, device and relying party.
This document describes how claims containing keys should be defined for the various use cases.
It does not define specific claims for specific use cases.</t>
        <t>Keys in CBOR format tokens SHOULD be the COSE_Key format <xref target="RFC8152" format="default"/> and keys in JSON format tokens SHOULD be the JSON Web Key format <xref target="RFC7517" format="default"/>.
These two formats support many common key types.
Their use avoids the need to decode other serialization formats.
These two formats can be extended to support further key types through their IANA registries.</t>
        <t>The general confirmation claim format <xref target="RFC8747" format="default"/>, <xref target="RFC7800" format="default"/> may also be used.
It provides key encryption. 
It also allows for inclusion by reference through a key ID.
The confirmation claim format may employed in the definition of some new claim for a a particular use case.</t>
        <t>When the actual confirmation claim is included in an EAT, this document associates no use case semantics other than proof of posession.
Different EAT use cases may choose to associate further semantics.
The key in the confirmation claim MUST be protected the same as the key used to sign the EAT. 
That is, the same, equivalent or better hardware defenses, access controls, key generation and such must be used.</t>
      </section>
      <section anchor="the-location-claim-location" numbered="true" toc="default">
        <name>The Location Claim (location)</name>
        <t>The location claim gives the location of the device entity from which the attestation originates.
It is derived from the W3C Geolocation API <xref target="W3C.GeoLoc" format="default"/>.
The latitude, longitude, altitude and accuracy must conform to <xref target="WGS84" format="default"/>.
The altitude is in meters above the <xref target="WGS84" format="default"/> ellipsoid.
The two accuracy values are positive numbers in meters.
The heading is in degrees relative to true north.
If the device is stationary, the heading is NaN (floating-point not-a-number).
The speed is the horizontal component of the device velocity in meters per second.</t>
        <t>When encoding floating-point numbers half-precision should not be used.
It usually does not provide enough precision for a geographic location.
It is not a requirement that the receiver of an EAT implement half-precision, so the receiver may not be able to decode the location.</t>
        <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.</t>
        <t>The age data item can be used when the entity doesn't know what time
it is either because it doesn't have a clock or it isn't set. The
entity must still have a "ticker" that can measure a time
interval. The age is the interval between acquisition of the location
data and token creation.</t>
        <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations" format="default"/> below.</t>
        <section anchor="location-cddl" numbered="true" toc="default">
          <name>location CDDL</name>
          <sourcecode type="CDDL">
location-type = {
    latitude =&gt; number,
    longitude =&gt; number,
    ? altitude =&gt; number,
    ? accuracy =&gt; number,
    ? altitude-accuracy =&gt; number,
    ? heading =&gt; number,
    ? speed =&gt; number,
    ? timestamp =&gt; ~time-int,
    ? age =&gt; uint
}

latitude = 1
longitude = 2
altitude = 3
accuracy = 4
altitude-accuracy = 5
heading = 6
speed = 7
timestamp = 8
age = 9

location-claim = (
    location =&gt; location-type
)
</sourcecode>
        </section>
      </section>
      <section anchor="the-uptime-claim-uptime" numbered="true" toc="default">
        <name>The Uptime Claim (uptime)</name>
        <t>The "uptime" claim contains a value that represents the number of
seconds that have elapsed since the entity or submod was last booted.</t>
        <section anchor="uptime-cddl" numbered="true" toc="default">
          <name>uptime CDDL</name>
          <sourcecode type="CDDL">
uptime-claim = (
    uptime =&gt; uint
)
</sourcecode>
        </section>
      </section>
      <section anchor="the-boot-seed-claim-boot-seed" numbered="true" toc="default">
        <name>The Boot Seed Claim (boot-seed)</name>
        <t>The Boot Seed claim is a random value created at system boot time that will allow differentiation of reports from different boot sessions.
This value is usually public and not protected.
It is not the same as a seed for a random number generator which must be kept secret.</t>
        <sourcecode type="CDDL">
boot-seed-claim = (
    boot-seed =&gt; bytes
)
</sourcecode>
      </section>
      <section anchor="the-intended-use-claim-intended-use" numbered="true" toc="default">
        <name>The Intended Use Claim (intended-use)</name>
        <t>EAT's may be used in the context of several different applications.  The intended-use
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it uses EAT.</t>
        <dl>
          <dt>
1 -- Generic  </dt>
          <dd>
            <t>Generic attestation describes an application where the EAT consumer
requres the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
          </dd>
          <dt>
2-- Registration  </dt>
          <dd>
            <t>Entities that are registering for a new service may be expected to 
provide an attestation as part of the registration process.  This intended-use
setting indicates that the attestation is not intended for any use but registration.</t>
          </dd>
          <dt>
3 -- Provisioning  </dt>
          <dd>
            <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess device security state of the entity prior to provisioning.</t>
          </dd>
          <dt>
4 -- Certificate Issuance (Certificate Signing Request)  </dt>
          <dd>
            <t>Certifying authorities (CA's) may require attestations prior to
the issuance of certificates related to keypairs hosted at the entity.  An
EAT may be used as part of the certificate signing request (CSR).</t>
          </dd>
          <dt>
5 -- Proof-of-Possession  </dt>
          <dd>
            <t>An EAT consumer may require an attestation as part of an accompanying 
proof-of-possession (PoP) appication. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has posession
of a key.  This kind of attestation may be neceesary to verify the
security state of the entity storing the private key used in a PoP application.</t>
          </dd>
        </dl>
        <section anchor="intended-use-cddl" numbered="true" toc="default">
          <name>intended-use CDDL</name>
          <sourcecode type="CDDL">
intended-use-type = &amp;(
    generic: 1,
    registration: 2,
    provisioning: 3,
    csr: 4,
    pop:  5
)

intended-use-claim = (
    intended-use =&gt; intended-use-type
)
</sourcecode>
        </section>
      </section>
      <section anchor="profile-claim" numbered="true" toc="default">
        <name>The Profile Claim (profile)</name>
        <t>See <xref target="profiles" format="default"/> for the detailed description of a profile.</t>
        <t>A profile is identified by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the profile claim is to uniquely identify the profile even if it is a private profile.</t>
        <t>The OID is encoded in CBOR according to <xref target="CBOR-OID" format="default"/> and the URI according to <xref target="RFC8949" format="default"/>.
Both are unwrapped and thus not tags.
The OID is always absolute and never relative.
If the claims CBOR type is a text string it is a URI and if a byte string it is an OID.</t>
        <t>Note that this named "eat_profile" for JWT and is distinct from the already registered "profile" claim in the JWT claims registry.</t>
        <sourcecode type="CDDL">
profile-claim = (
    profile =&gt; ~uri / ~oid
)
</sourcecode>
      </section>
      <section anchor="the-submodules-part-of-a-token-submods" numbered="true" toc="default">
        <name>The Submodules Part of a Token (submods)</name>
        <t>Some devices are complex, having many subsystems or submodules.  A
mobile phone is a good example. It may have several connectivity
submodules for communications (e.g., Wi-Fi and cellular). It may have
subsystems for low-power audio and video playback. It may have one or
more security-oriented subsystems like a TEE or a Secure Element.</t>
        <t>The claims for each these can be grouped together in a submodule.</t>
        <t>The submods part of a token are in a single map/object with many entries, one
per submodule.  There is only one submods map in a token. It is
identified by its specific label. It is a peer to other claims, but it
is not called a claim because it is a container for a claim set rather
than an individual claim. This submods part of a token allows what
might be called recursion. It allows claim sets inside of claim sets
inside of claims sets...</t>
        <section anchor="two-types-of-submodules" numbered="true" toc="default">
          <name>Two Types of Submodules</name>
          <t>Each entry in the submod map is one of two types:</t>
          <ul spacing="normal">
            <li>A non-token submodule that is a map or object directly containing claims for the submodule.</li>
            <li>A nested EAT that is a fully formed, independently signed EAT token</li>
          </ul>
          <section anchor="non-token-submodules" numbered="true" toc="default">
            <name>Non-token Submodules</name>
            <t>This is simply a map or object containing claims about the submodule.</t>
            <t>It may contain claims that are the same as its surrounding token or superior submodules. 
For example, the top-level of the token may have a UEID, a submod may have a different UEID and a further subordinate submodule may also have a UEID.</t>
            <t>It is signed/encrypted along with the rest of the token and thus the claims are secured by the same Attester with the same signing key as the rest of the token.</t>
            <t>If a token is in CBOR format (a CWT or a UCCS), all non-token submodules must be CBOR format.
If a token in in JSON format (a JWT), all non-token submodules must be in JSON format.</t>
            <t>When decoding, this type of submodule is recognized from the other type by being a data item of type map for CBOR or type object for JSON.</t>
          </section>
          <section anchor="nested-eats" numbered="true" toc="default">
            <name>Nested EATs</name>
            <t>This type of submodule is a fully formed secured EAT as defined in this document except that it MUST NOT be a UCCS or an unsecured JWT.
A nested token that is one that is always secured using COSE or JOSE, usually by an independent Attester.
When the surrounding EAT is a CWT or secured JWT, the nested token becomes securely bound with the other claims in the surrounding token.</t>
            <t>It is allowed to have a CWT as a submodule in a JWT and vice versa, but this SHOULD be avoided unless necessary.</t>
            <section anchor="surrounding-eat-is-cbor-format" numbered="true" toc="default">
              <name>Surrounding EAT is CBOR format</name>
              <t>They type of an EAT nested in a CWT is determined by whether the CBOR type is a text string or a byte string.
If a text string, then it is a JWT.
If a byte string, then it is a CWT.</t>
              <t>A CWT nested in a CBOR-format token is always wrapped by a byte string for easier handling with standard CBOR decoders and token processing APIs that will typically take a byte buffer as input.</t>
              <t>Nested CWTs may be either a CWT CBOR tag or a CWT Protocol Message.
COSE layers in nested CWT EATs MUST be a COSE_Tagged_Message, never a COSE_Untagged_Message.
If a nested EAT has more than one level of COSE, for example one that is both encrypted and signed, a COSE_Tagged_message must be used at every level.</t>
            </section>
            <section anchor="surrounding-eat-is-json-format" numbered="true" toc="default">
              <name>Surrounding EAT is JSON format</name>
              <t>When a CWT is nested in a JWT, it must be as a 55799 tag in order to distinguish it from a nested JWT.</t>
              <t>When a nested EAT in a JWT is decoded, first remove the base64url encoding.
Next, check to see if it starts with the bytes 0xd9d9f7.
If so, then it is a CWT as a JWT will never start with these four bytes. 
If not if it is a JWT.</t>
              <t>Other than the 55799 tag requirement, tag usage for CWT's nested in a JSON format token follow the same rules as for CWTs nested in CBOR-format tokens.
It may be a CWT CBOR tag or a CWT Protocol Message and COSE_Tagged_Message MUST be used at all COSE layers.</t>
            </section>
          </section>
          <section anchor="unsecured-jwts-and-uccs-tokens-as-submodules" numbered="true" toc="default">
            <name>Unsecured JWTs and UCCS Tokens as Submodules</name>
            <t>To incorporate a UCCS token as a submodule, it MUST be as a non-token submodule. 
This can be accomplished inserting the content of the UCCS Tag into the submodule map.
The content of a UCCS tag is exactly a map of claims as required for a non-token submodule.
If the UCCS is not a UCCS tag, then it can just be inserted into the submodule map directly.</t>
            <t>The definition of a nested EAT type of submodule is that it is one that is secured (signed) by an Attester.
Since UCCS tokens are unsecured, they do not fulfill this definition and must be non-token submodules.</t>
            <t>To incorporate an Unsecured JWT as a submodule, the null-security JOSE wrapping should be removed.
The resulting claims set should be inserted as a non-token submodule.</t>
            <t>To incorporate a UCCS token in a surrounding JSON token, the UCCS token claims should be translated from CBOR to JSON.
To incorporate an Unsecured JWT into a surrounding CBOR-format token, the null-security JOSE should be removed and the claims translated from JSON to CBOR.</t>
          </section>
        </section>
        <section anchor="no-inheritance" numbered="true" toc="default">
          <name>No Inheritance</name>
          <t>The subordinate modules do not inherit anything from the containing
token.  The subordinate modules must explicitly include all of their
claims. This is the case even for claims like the nonce and age.</t>
          <t>This rule is in place for simplicity. It avoids complex inheritance
rules that might vary from one type of claim to another.</t>
        </section>
        <section anchor="security-levels" numbered="true" toc="default">
          <name>Security Levels</name>
          <t>The security level of the non-token subordinate modules should always
be less than or equal to that of the containing modules in the case of non-token
submodules. It makes no sense for a module of lesser security to be
signing claims of a module of higher security. An example of this is a
TEE signing claims made by the non-TEE parts (e.g. the high-level OS)
of the device.</t>
          <t>The opposite may be true for the nested tokens. They usually have
their own more secure key material. An example of this is an embedded
secure element.</t>
        </section>
        <section anchor="submodule-names" numbered="true" toc="default">
          <name>Submodule Names</name>
          <t>The label or name for each submodule in the submods map is a text
string naming the submodule. No submodules may have the same name.</t>
        </section>
        <section anchor="submods-cddl" numbered="true" toc="default">
          <name>submods CDDL</name>
          <sourcecode type="CDDL">
; The part of a token that contains all the submodules.  It is a peer
; with the claims in the token, but not a claim, only a map/object to
; hold all the submodules.

submods-part = (
    submods =&gt; submods-type
)

submods-type = { + submod-type }


; The type of a submodule which can either be a nested claim set or a
; nested separately signed token. Nested tokens are wrapped in a bstr
; or a tstr.

submod-type = (
    submod-name =&gt; eat-claim-set / nested-token
)


; When this is a bstr, the contents are an eat-token in CWT or UCCS
; format.  When this is a tstr, the contents are an eat-token in JWT
; format.

nested-token = bstr / tstr; 


; Each submodule has a unique text string name.

submod-name = tstr 


</sourcecode>
        </section>
      </section>
    </section>
    <section anchor="keyid" numbered="true" toc="default">
      <name>Endorsements and Verification Keys</name>
      <t>TODO: fill this section in. It will discuss key IDs, endorsement ID and such that
are needed as input needed to by the Verifier to verify the signature. This will
NOT discuss the contents of an Endorsement, just and ID/locator.</t>
    </section>
    <section anchor="profiles" numbered="true" toc="default">
      <name>Profiles</name>
      <t>This EAT specification does not gaurantee that implementations of it will interoperate.
The variability in this specification is necessary to accommodate the widely varying use cases.
An EAT profile narrows the specification for a specific use case.
An ideal EAT profile will gauarantee interoperability.</t>
      <t>The profile can be named in the token using the profile claim described in <xref target="profile-claim" format="default"/>.</t>
      <section anchor="format-of-a-profile-document" numbered="true" toc="default">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>In some cases CDDL may be created that replaces CDDL in this or other document to express some profile requirements.
For example, to require the altitude data item in the location claim, CDDL can be written that replicates the location claim with the altitude no longer optional.</t>
      </section>
      <section anchor="list-of-profile-issues" numbered="true" toc="default">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, UCCS, JWS, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both" numbered="true" toc="default">
          <name>Use of JSON, CBOR or both</name>
          <t>The profile should indicate whether the token format should be CBOR, JSON, both or even some other encoding.
If some other encoding, a specification for how the CDDL described here is serialized in that encoding is necessary.</t>
          <t>This should be addressed for the top-level token and for any nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding" numbered="true" toc="default">
          <name>CBOR Map and Array Encoding</name>
          <t>The profile should indicate whether definite-length arrays/maps, indefinite-length arrays/maps or both are allowed.
A good default is to allow only definite-length arrays/maps.</t>
          <t>An alternate is to allow both definite and indefinite-length arrays/maps.
The decoder should accept either.
Encoders that need to fit on very small hardware or be actually implement in hardware can use indefinite-length encoding.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
        </section>
        <section anchor="cbor-string-encoding" numbered="true" toc="default">
          <name>CBOR String Encoding</name>
          <t>The profile should indicate whether definite-length strings, indefinite-length strings or both are allowed.
A good default is to allow only definite-length strings.
As with map and array encoding, allowing indefinite-length strings can be beneficial for some smaller implementations.</t>
        </section>
        <section anchor="cbor-preferred-serialization" numbered="true" toc="default">
          <name>CBOR Preferred Serialization</name>
          <t>The profile should indicate whether encoders must use preferred serialization.
The profile should indicate whether decoders must accept non-preferred serialization.</t>
        </section>
        <section anchor="cosejose-protection" numbered="true" toc="default">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
EAT/CWT has the option to have no protection using UCCS and JOSE has a NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, CWT and UCCS are allowed by EAT.</t>
          <t>The profile should list the protections that must be supported by all decoders implementing the profile.
The encoders them must implement a subset of what is listed for the decoders, perhaps only one.</t>
          <t>Implementations may choose to sign or MAC before encryption so that the implementation layer doing the signing or MACing can be the smallest.
It is often easier to make smaller implementations more secure, perhaps even implementing in solely in hardware.
The key material for a signature or MAC is a private key, while for encryption it is likely to be a public key.
The key for encryption requires less protection.</t>
        </section>
        <section anchor="cosejose-algorithms" numbered="true" toc="default">
          <name>COSE/JOSE Algorithms</name>
          <t>The profile document should list the COSE algorithms that a Verifier must implement.
The Attester will select one of them. 
Since there is no negotiation, the Verifier should implement all algorithms listed in the profile.</t>
        </section>
        <section anchor="verification-key-identification" numbered="true" toc="default">
          <name>Verification Key Identification</name>
          <t>Section <xref target="keyid" format="default"/> describes a number of methods for identifying a verification key.
The profile document should specify one of these or one that is not described.
The ones described in this document are only roughly described.
The profile document should go into the full detail.</t>
        </section>
        <section anchor="endorsement-identification" numbered="true" toc="default">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as Verification Key Identification, the profile may wish to specify how Endorsements are to be identified.
However note that Endorsement Identification is optional, where as key identification is not.</t>
        </section>
        <section anchor="freshness" numbered="true" toc="default">
          <name>Freshness</name>
          <t>Just about every use case will require some means of knowing the EAT is recent enough and not a replay of an old token.
The profile should describe how freshness is achieved.
The section on Freshness in <xref target="RATS-Architecture" format="default"/> describes some of the possible solutions to achieve this.</t>
        </section>
        <section anchor="required-claims" numbered="true" toc="default">
          <name>Required Claims</name>
          <t>The profile can list claims whose absence results in Verification failure.</t>
        </section>
        <section anchor="prohibited-claims" numbered="true" toc="default">
          <name>Prohibited Claims</name>
          <t>The profile can list claims whose presence results in Verification failure.</t>
        </section>
        <section anchor="additional-claims" numbered="true" toc="default">
          <name>Additional Claims</name>
          <t>The profile may describe entirely new claims.
These claims can be required or optional.</t>
        </section>
        <section anchor="refined-claim-definition" numbered="true" toc="default">
          <name>Refined Claim Definition</name>
          <t>The profile may lock down optional aspects of individual claims.
For example, it may require altitude in the location claim, or it may require that HW Versions always be described using EAN-13.</t>
        </section>
        <section anchor="cbor-tags" numbered="true" toc="default">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.
Similarly, the profile should specify whether the token should be a UCCS tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unncessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
      </section>
    </section>
    <section anchor="encoding" numbered="true" toc="default">
      <name>Encoding</name>
      <t>This makes use of the types defined in CDDL Appendix D, Standard Prelude.</t>
      <t>Some of the CDDL included here is for claims that are defined in CWT <xref target="RFC8392" format="default"/> or JWT <xref target="RFC7519" format="default"/> or are in the IANA CWT or JWT registries.
CDDL was not in use when these claims where defined.</t>
      <section anchor="common-cddl-types" numbered="true" toc="default">
        <name>Common CDDL Types</name>
        <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
        <t>Note that unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949" format="default"/>.
They are just text strings that contain a URI.</t>
        <sourcecode type="CDDL">
string-or-uri = tstr 

time-int = #6.1(int)
</sourcecode>
      </section>
      <section anchor="cddl-for-cwt-defined-claims" numbered="true" toc="default">
        <name>CDDL for CWT-defined Claims</name>
        <t>This section provides CDDL for the claims defined in CWT. It is
non-normative as <xref target="RFC8392" format="default"/> is the authoritative definition of these
claims.</t>
        <t>Note that the subject, issue and audience claims may be a text string containing a URI per <xref target="RFC8392" format="default"/> and <xref target="RFC7519" format="default"/>.
These are never the URI tag defined in <xref target="RFC8949" format="default"/>.</t>
        <sourcecode type="CDDL">
$$eat-extension //= (
    ? issuer =&gt; text,
    ? subject =&gt; text,
    ? audience =&gt; text,
    ? expiration =&gt; time,
    ? not-before =&gt; time,
    ? issued-at =&gt; time,
    ? cwt-id =&gt; bytes,
)

issuer = 1
subject = 2
audience = 3
expiration = 4
not-before = 5
issued-at = 6
cwt-id = 7

</sourcecode>
      </section>
      <section anchor="json" numbered="true" toc="default">
        <name>JSON</name>
        <section anchor="json-labels" numbered="true" toc="default">
          <name>JSON Labels</name>
          <sourcecode type="JSON">
; The following are Claim Keys (labels) assigned for JSON-encoded tokens.

ueid /= "ueid"
nonce /= "nonce"
origination /= "origination"
oemid /= "oemid"
security-level /= "seclevel"
secure-boot /= "secboot"
debug-status /= "dbgstat"
location /= "location"
uptime /= "uptime"
profile /= "eat-profile"
intended-use /= "intuse"
boot-seed /= "bootseed"
submods /= "submods"
timestamp /= "timestamp"

latitude /= "lat"
longitude /= "long"
altitude /= "alt"
accuracy /= "accry"
altitude-accuracy /= "alt-accry"
heading /= "heading"
speed /= "speed"
</sourcecode>
        </section>
        <section anchor="jsoninterop" numbered="true" toc="default">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per RFC 8610 Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- must be base64url encoded</li>
            <li>time -- must be encoded as NumericDate as described section 2 of <xref target="RFC7519" format="default"/>.</li>
            <li>string-or-uri -- must be encoded as StringOrURI as described section 2 of <xref target="RFC7519" format="default"/>.</li>
            <li>uri -- must be a URI <xref target="RFC3986" format="default"/>.</li>
            <li>oid -- encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1").</li>
          </ul>
        </section>
      </section>
      <section anchor="cbor" numbered="true" toc="default">
        <name>CBOR</name>
        <section anchor="cbor-interoperability" numbered="true" toc="default">
          <name>CBOR Interoperability</name>
          <t>CBOR allows data items to be serialized in more than one form.
If the sender uses a form that the receiver can't decode, there will not be interoperability.</t>
          <t>This specification gives no blanket requirements to narrow CBOR serialization for all uses of EAT.
This allows individual uses to tailor serialization to the environment.
It also may result in EAT implementations that don't interoperate.</t>
          <t>One way to guarantee interoperability is to clearly specify CBOR serialization in a profile document.
See <xref target="profiles" format="default"/> for a list of serialization issues that should be addressed.</t>
          <t>EAT will be commonly used where the device generating the attestation is constrained and the receiver/verifier of the attestation is a capacious server.
Following is a set of serialization requirements that work well for that use case and are guaranteed to interoperate.
Use of this serialization is recommended where possible, but not required.
An EAT profile may just reference the following section rather than spell out serialization details.</t>
          <section anchor="eat-constrained-device-serialization" numbered="true" toc="default">
            <name>EAT Constrained Device Serialization</name>
            <ul spacing="normal">
              <li>Preferred serialization described in section 4.1 of <xref target="RFC8949" format="default"/> is not required.
The EAT decoder must accept all forms of number serialization.
The EAT encoder may use any form it wishes.</li>
              <li>The EAT decoder must accept indefinite length arrays and maps as described in section 3.2.2 of <xref target="RFC8949" format="default"/>.
The EAT encoder may use indefinite length arrays and maps if it wishes.</li>
              <li>The EAT decoder must accept indefinite length strings as described in section 3.2.3 of <xref target="RFC8949" format="default"/>.
The EAT encoder may use indefinite length strings if it wishes.</li>
              <li>Sorting of maps by key is not required.
The EAT decoder must not rely on sorting.</li>
              <li>Deterministic encoding described in Section 4.2 of <xref target="RFC8949" format="default"/> is not required.</li>
              <li>Basic validity described in section 5.3.1 of <xref target="RFC8949" format="default"/> must be followed.
The EAT encoder must not send duplicate map keys/labels or invalid UTF-8 strings.</li>
            </ul>
          </section>
        </section>
      </section>
      <section anchor="collected-cddl" numbered="true" toc="default">
        <name>Collected CDDL</name>
        <sourcecode type="CDDL">
; This is the top-level definition of the claims in EAT tokens.  To
; form an actual EAT Token, this claim set is enclosed in a COSE, JOSE
; or UCCS message.

eat-claim-set = {
    ? ueid-claim,
    ? nonce-claim,
    ? origination-claim,
    ? oemid-claim,
    ? hardware-version-claims,
    ? security-level-claim,
    ? secure-boot-claim,
    ? debug-status-claim,
    ? location-claim,
    ? uptime-claim,
    ? submods-part,
    * $$eat-extension,
}


; This is the top-level definition of an EAT Token.  It is a CWT, JWT
; or UCSS where the payload is an eat-claim-set. A JWT_Message is what
; is defined by JWT in RFC 7519. (RFC 7519 doesn't use CDDL so a there
; is no actual CDDL definition of JWT_Message).

eat-token = EAT_Tagged_Message / EAT_Untagged_Message / JWT_Message


; This is CBOR-format EAT token in the CWT or UCCS format that is a
; tag.  COSE_Tagged_message is defined in RFC 8152.  Tag 601 is
; proposed by the UCCS draft, but not yet assigned.

EAT_Tagged_Message = #6.61(COSE_Tagged_Message) / #6.601(eat-claim-set)


; This is a CBOR-format EAT token that is a CWT or UCSS that is not a
; tag COSE_Tagged_message and COSE_Untagged_Message are defined in RFC
; 8152.

EAT_Untagged_Message = COSE_Tagged_Message / COSE_Untagged_Message / UCCS_Untagged_Message


; This is an "unwrapped" UCCS tag. Unwrapping a tag means to use the
; definition of its content without the preceding type 6 tag
; integer. Since a UCCS is nothing but a tag for an unsecured CWT
; claim set, unwrapping reduces to a bare eat-claim-set.

UCCS_Untagged_Message = eat-claim-set


string-or-uri = tstr 

time-int = #6.1(int)

$$eat-extension //= (
    ? issuer =&gt; text,
    ? subject =&gt; text,
    ? audience =&gt; text,
    ? expiration =&gt; time,
    ? not-before =&gt; time,
    ? issued-at =&gt; time,
    ? cwt-id =&gt; bytes,
)

issuer = 1
subject = 2
audience = 3
expiration = 4
not-before = 5
issued-at = 6
cwt-id = 7


debug-status-type = &amp;(
    enabled: 0,
    disabled: 1,
    disabled-since-boot: 2,
    disabled-permanently: 3,
    disabled-fully-and-permanently: 4
)

debug-status-claim = (
    debug-status =&gt; debug-status-type
)

location-type = {
    latitude =&gt; number,
    longitude =&gt; number,
    ? altitude =&gt; number,
    ? accuracy =&gt; number,
    ? altitude-accuracy =&gt; number,
    ? heading =&gt; number,
    ? speed =&gt; number,
    ? timestamp =&gt; ~time-int,
    ? age =&gt; uint
}

latitude = 1
longitude = 2
altitude = 3
accuracy = 4
altitude-accuracy = 5
heading = 6
speed = 7
timestamp = 8
age = 9

location-claim = (
    location =&gt; location-type
)

nonce-type = bstr .size (8..64)

nonce-claim = (
    nonce =&gt; nonce-type / [ 2* nonce-type ]
)

oemid-claim = (
    oemid =&gt; bstr
)

; copied from CoSWID
; TODO: how to properly make reference to CoSWID and have tool validate

  $version-scheme /= multipartnumeric
  $version-scheme /= multipartnumeric-suffix
  $version-scheme /= alphanumeric
  $version-scheme /= decimal
  $version-scheme /= semver
  $version-scheme /= uint / text
  multipartnumeric = 1
  multipartnumeric-suffix = 2
  alphanumeric = 3
  decimal = 4
  semver = 16384


chip-version-claim = (
    chip-version =&gt; tstr
)

chip-version-scheme-claim = (
    chip-version-scheme =&gt; $version-scheme
)

board-version-claim = (
    board-version =&gt; tstr
)

board-version-scheme-claim = (
    board-version-scheme =&gt; $version-scheme
)

device-version-claim = (
    device-version =&gt; tstr
)

device-version-scheme-claim = (
    device-version-scheme =&gt; $version-scheme
)


ean-type = text .regexp "[0-9]{13}"

ean-chip-version-claim = (
    ean-chip-version =&gt; ean-type
)

ean-board-version-claim = (
    ean-board-version =&gt; ean-type
)

ean-device-version-claim = (
    ean-device-version =&gt; ean-type
)

hardware-version-claims = (
    ? chip-version-claim,
    ? board-version-claim,
    ? device-version-claim,
    ? chip-version-scheme-claim,
    ? board-version-scheme-claim,
    ? device-version-scheme-claim,
    ? ean-chip-version-claim,
    ? ean-board-version-claim,
    ? ean-device-version-claim,
)


origination-claim = (
    origination =&gt; string-or-uri
)

secure-boot-claim = (
    secure-boot =&gt; bool
)

security-level-type = &amp;(
    unrestricted: 1,
    restricted: 2,
    secure-restricted: 3,
    hardware: 4
)

security-level-claim = (
    security-level =&gt; security-level-type
)

; The part of a token that contains all the submodules.  It is a peer
; with the claims in the token, but not a claim, only a map/object to
; hold all the submodules.

submods-part = (
    submods =&gt; submods-type
)

submods-type = { + submod-type }


; The type of a submodule which can either be a nested claim set or a
; nested separately signed token. Nested tokens are wrapped in a bstr
; or a tstr.

submod-type = (
    submod-name =&gt; eat-claim-set / nested-token
)


; When this is a bstr, the contents are an eat-token in CWT or UCCS
; format.  When this is a tstr, the contents are an eat-token in JWT
; format.

nested-token = bstr / tstr; 


; Each submodule has a unique text string name.

submod-name = tstr 



ueid-type = bstr .size (7..33)

ueid-claim = (
     ueid =&gt; ueid-type
)

intended-use-type = &amp;(
    generic: 1,
    registration: 2,
    provisioning: 3,
    csr: 4,
    pop:  5
)

intended-use-claim = (
    intended-use =&gt; intended-use-type
)

uptime-claim = (
    uptime =&gt; uint
)

; The following Claim Keys (labels) are pre-assigned by IANA.
; They are for CBOR-based tokens (CWT and UCCS).
; They are not expected to change in the final publication as an RFC.

nonce = 10
ueid = 11
oemid = 13
security-level = 14
secure-boot = 15
debug-status = 16
location = 17
profile = 18
submods = 20


profile-claim = (
    profile =&gt; ~uri / ~oid
)

boot-seed-claim = (
    boot-seed =&gt; bytes
)

; The following are Claim Keys (labels) assigned for JSON-encoded tokens.

ueid /= "ueid"
nonce /= "nonce"
origination /= "origination"
oemid /= "oemid"
security-level /= "seclevel"
secure-boot /= "secboot"
debug-status /= "dbgstat"
location /= "location"
uptime /= "uptime"
profile /= "eat-profile"
intended-use /= "intuse"
boot-seed /= "bootseed"
submods /= "submods"
timestamp /= "timestamp"

latitude /= "lat"
longitude /= "long"
altitude /= "alt"
accuracy /= "accry"
altitude-accuracy /= "alt-accry"
heading /= "heading"
speed /= "speed"

</sourcecode>
      </section>
    </section>
    <section anchor="iana-considerations" numbered="true" toc="default">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-web-token-cwt-claims-registry" numbered="true" toc="default">
        <name>Reuse of CBOR Web Token (CWT) Claims Registry</name>
        <t>Claims defined for EAT are compatible with those of CWT
so the CWT Claims Registry is re used. No new IANA registry
is created. All EAT claims should be registered in the
CWT and JWT Claims Registries.</t>
      </section>
      <section anchor="claim-characteristics" numbered="true" toc="default">
        <name>Claim Characteristics</name>
        <t>The following is design guidance for creating new EAT claims, particularly those to be registered with IANA.</t>
        <t>Much of this guidance is generic and could also be considered when designing new CWT or JWT claims.</t>
        <section anchor="interoperability-and-relying-party-orientation" numbered="true" toc="default">
          <name>Interoperability and Relying Party Orientation</name>
          <t>It is a broad goal that EATs can be processed by relying parties in a general way regardless of the type, manufacturer or technology of the device from which they originate. 
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
          <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
        </section>
        <section anchor="operating-system-and-technology-neutral" numbered="true" toc="default">
          <name>Operating System and Technology Neutral</name>
          <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
          <t>Claims should not be defined such that they are specific to a SW environment or programming language.</t>
          <t>Claims should not be defined such that they are specific to a chip or particular hardware. 
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
          <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
        </section>
        <section anchor="security-level-neutral" numbered="true" toc="default">
          <name>Security Level Neutral</name>
          <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists. 
Secure Elements and smart cards are examples of this. 
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
          <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
        </section>
        <section anchor="reuse-of-extant-data-formats" numbered="true" toc="default">
          <name>Reuse of Extant Data Formats</name>
          <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
          <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON format for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
          <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
        </section>
        <section anchor="proprietary-claims" numbered="true" toc="default">
          <name>Proprietary Claims</name>
          <t>EAT allows the definition and use of proprietary claims.</t>
          <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer. 
This is a supported use case.</t>
          <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
        </section>
      </section>
      <section anchor="claims-registered-by-this-document" numbered="true" toc="default">
        <name>Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519" format="default"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392" format="default"/>. Each entry below is an addition to both registries (except
for the nonce claim which is already registered for JWT, but not registered for CWT).</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <section anchor="claims-for-early-assignment" numbered="true" toc="default">
          <name>Claims for Early Assignment</name>
          <t>RFC Editor: in the final publication this section should be combined with the following
section as it will no longer be necessary to distinguish claims with early assignment.
Also, the following paragraph should be removed.</t>
          <t>The claims in this section have been (requested for / given) early assignment according to <xref target="RFC7120" format="default"/>.
They have been assigned values and registered before final publication of this document.
While their semantics is not expected to change in final publication, it is possible that they will.
The JWT Claim Names and CWT Claim Keys are not expected to change.</t>
          <ul spacing="normal">
            <li>Claim Name: Nonce</li>
            <li>Claim Description: Nonce</li>
            <li>JWT Claim Name: "nonce" (already registered for JWT)</li>
            <li>Claim Key: 10</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <xref target="OpenIDConnectCore" format="default"/>, <strong>this document</strong></li>
          </ul>
          <t>&nbsp;</t>
          <ul spacing="normal">
            <li>Claim Name: UEID</li>
            <li>Claim Description: The Universal Entity ID</li>
            <li>JWT Claim Name: "ueid"</li>
            <li>CWT Claim Key: 11</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t>&nbsp;</t>
          <ul spacing="normal">
            <li>Claim Name: OEMID</li>
            <li>Claim Description: IEEE-based OEM ID</li>
            <li>JWT Claim Name: "oemid"</li>
            <li>Claim Key: 13</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t>&nbsp;</t>
          <ul spacing="normal">
            <li>Claim Name: Security Level</li>
            <li>Claim Description: Characterization of the security of an Attester or submodule</li>
            <li>JWT Claim Name: "seclevel"</li>
            <li>Claim Key: 14</li>
            <li>Claim Value Type(s): integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t>&nbsp;</t>
          <ul spacing="normal">
            <li>Claim Name: Secure Boot</li>
            <li>Claim Description: Indicate whether the boot was secure</li>
            <li>JWT Claim Name: "secboot"</li>
            <li>Claim Key: 15</li>
            <li>Claim Value Type(s): Boolean</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t>&nbsp;</t>
          <ul spacing="normal">
            <li>Claim Name: Debug Status</li>
            <li>Claim Description: Indicate status of debug facilities</li>
            <li>JWT Claim Name: "dbgstat"</li>
            <li>Claim Key: 16</li>
            <li>Claim Value Type(s): integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t>&nbsp;</t>
          <ul spacing="normal">
            <li>Claim Name: Location</li>
            <li>Claim Description: The geographic location</li>
            <li>JWT Claim Name: "location"</li>
            <li>Claim Key: 17</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t>&nbsp;</t>
          <ul spacing="normal">
            <li>Claim Name: Profile</li>
            <li>Claim Description: Indicates the EAT profile followed</li>
            <li>JWT Claim Name: "eat_profile"</li>
            <li>Claim Key: 18</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t>&nbsp;</t>
          <ul spacing="normal">
            <li>Claim Name: Submodules Section</li>
            <li>Claim Description: The section containing submodules (not actually a claim)</li>
            <li>JWT Claim Name: "submods"</li>
            <li>Claim Key: 20</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="to-be-assigned-claims" numbered="true" toc="default">
          <name>To be Assigned Claims</name>
          <t>TODO: add the rest of the claims in here</t>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations" numbered="true" toc="default">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations" numbered="true" toc="default">
        <name>UEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Any set of relying parties
that receives tokens that happen to be from a single device will be
able to know the tokens are all from the same device and be able to
track the device. Thus, in many usage situations ueid violates
governmental privacy regulation. In other usage situations UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>There are several strategies that can be used to still be able to put
UEID's in tokens:</t>
        <ul spacing="normal">
          <li>The device obtains explicit permission from the user of the device
to use the UEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID.</li>
          <li>The UEID is used only in a particular context or particular use
case. It is used only by one relying party.</li>
          <li>The device authenticates the relying party and generates a derived
UEID just for that particular relying party.  For example, the relying
party could prove their identity cryptographically to the device, then
the device generates a UEID just for that relying party by hashing a
proofed relying party ID with the main device UEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in multiple UEIDs
per device. Each UEID is used in a different context, use case or system 
on the device. However, from the view of the relying party, there is just
one UEID and it is still globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations" numbered="true" toc="default">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the device generating the attestation.
For example, many mobile phones prompt the user for permission when before sending location data.</t>
      </section>
    </section>
    <section anchor="securitycons" numbered="true" toc="default">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392" format="default"/> and Section 11
of <xref target="RFC7519" format="default"/> apply to EAT in its CWT and JWT form, respectively.  In addition, 
implementors should consider the following.</t>
      <section anchor="key-provisioning" numbered="true" toc="default">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manfuacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949" format="default"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material" numbered="true" toc="default">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="transport-security" numbered="true" toc="default">
        <name>Transport Security</name>
        <t>As stated in Section 8 of <xref target="RFC8392" format="default"/>, "The security of the CWT relies
upon on the protections offered by COSE".  Similar considerations
apply to EAT when sent as a CWT.  However, EAT introduces the concept
of a nonce to protect against replay.  Since an EAT may be created by
an entity that may not support the same type of transport security as
the consumer of the EAT, intermediaries may be required to bridge
communications between the entity and consumer.  As a result, it is
RECOMMENDED that both the consumer create a nonce, and the entity
leverage the nonce along with COSE mechanisms for encryption and/or
signing to create the EAT.</t>
        <t>Similar considerations apply to the use of EAT as a JWT.  Although the
security of a JWT leverages the JSON Web Encryption (JWE) and JSON Web
Signature (JWS) specifications, it is still recommended to make use of
the EAT nonce.</t>
      </section>
      <section anchor="multiple-eat-consumers" numbered="true" toc="default">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer should leverage a secure protocol (e.g.one that
uses transport-layer security, i.e. TLS),</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then transport security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner">
              <organization/>
            </author>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC8949" target="https://www.rfc-editor.org/info/rfc8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman">
              <organization/>
            </author>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7517" target="https://www.rfc-editor.org/info/rfc7517">
          <front>
            <title>JSON Web Key (JWK)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key.  This specification also defines a JWK Set JSON data structure that represents a set of JWKs.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries established by that specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7517"/>
          <seriesInfo name="DOI" value="10.17487/RFC7517"/>
        </reference>
        <reference anchor="RFC7519" target="https://www.rfc-editor.org/info/rfc7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC7800" target="https://www.rfc-editor.org/info/rfc7800">
          <front>
            <title>Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="April" year="2016"/>
            <abstract>
              <t>This specification describes how to declare in a JSON Web Token (JWT) that the presenter of the JWT possesses a particular proof-of- possession key and how the recipient can cryptographically confirm proof of possession of the key by the presenter.  Being able to prove possession of a key is also sometimes described as the presenter being a holder-of-key.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7800"/>
          <seriesInfo name="DOI" value="10.17487/RFC7800"/>
        </reference>
        <reference anchor="RFC8126" target="https://www.rfc-editor.org/info/rfc8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <author fullname="T. Narten" initials="T." surname="Narten">
              <organization/>
            </author>
            <date month="June" year="2017"/>
            <abstract>
              <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="RFC8152" target="https://www.rfc-editor.org/info/rfc8152">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad">
              <organization/>
            </author>
            <date month="July" year="2017"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8152"/>
          <seriesInfo name="DOI" value="10.17487/RFC8152"/>
        </reference>
        <reference anchor="RFC8392" target="https://www.rfc-editor.org/info/rfc8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610" target="https://www.rfc-editor.org/info/rfc8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz">
              <organization/>
            </author>
            <author fullname="C. Vigano" initials="C." surname="Vigano">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8747" target="https://www.rfc-editor.org/info/rfc8747">
          <front>
            <title>Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="L. Seitz" initials="L." surname="Seitz">
              <organization/>
            </author>
            <author fullname="G. Selander" initials="G." surname="Selander">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="March" year="2020"/>
            <abstract>
              <t>This specification describes how to declare in a CBOR Web Token (CWT) (which is defined by RFC 8392) that the presenter of the CWT possesses a particular proof-of-possession key. Being able to prove possession of a key is also sometimes described as being the holder-of-key. This specification provides equivalent functionality to "Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)" (RFC 7800) but using Concise Binary Object Representation (CBOR) and CWTs rather than JavaScript Object Notation (JSON) and JSON Web Tokens (JWTs).</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8747"/>
          <seriesInfo name="DOI" value="10.17487/RFC8747"/>
        </reference>
        <reference anchor="RFC3986" target="https://www.rfc-editor.org/info/rfc3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee">
              <organization/>
            </author>
            <author fullname="R. Fielding" initials="R." surname="Fielding">
              <organization/>
            </author>
            <author fullname="L. Masinter" initials="L." surname="Masinter">
              <organization/>
            </author>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="WGS84" target="http://earth-info.nga.mil/GandG/publications/tr8350.2/wgs84fin.pdf">
          <front>
            <title>National Imagery and Mapping Agency Technical Report 8350.2, Third Edition</title>
            <author>
              <organization>National Imagery and Mapping Agency</organization>
            </author>
            <date year="2000"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="UCCS.Draft" target="https://tools.ietf.org/html/draft-birkholz-rats-uccs-01">
          <front>
            <title>A CBOR Tag for Unprotected CWT Claims Sets</title>
            <author fullname="Henk Birkholz">
              <organization/>
            </author>
            <date year="2020"/>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="FIDO.AROE" target="https://fidoalliance.org/specs/fido-uaf-v1.0-fd-20191115/fido-allowed-AROE-v1.0-fd-20191115.html">
          <front>
            <title>FIDO Authenticator Allowed Restricted Operating Environments List</title>
            <author>
              <organization>The FIDO Alliance</organization>
            </author>
            <date year="2019" month="November"/>
          </front>
        </reference>
        <reference anchor="EAN-13" target="https://www.gs1.org/standards/barcodes/ean-upc">
          <front>
            <title>International Article Number - EAN/UPC barcodes</title>
            <author>
              <organization>GS1</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID" target="https://tools.ietf.org/html/draft-ietf-sacm-coswid-16">
          <front>
            <title>Concise Software Identification Tags</title>
            <author>
              <organization/>
            </author>
            <date year="2020" month="November"/>
          </front>
        </reference>
        <reference anchor="OpenIDConnectCore" target="https://openid.net/specs/openid-connect-core-1_0.html">
          <front>
            <title>OpenID Connect Core 1.0 incorporating errata set 1</title>
            <author fullname="N. Sakimura">
              <organization/>
            </author>
            <author fullname="J. Bradley">
              <organization/>
            </author>
            <author fullname="M. Jones">
              <organization/>
            </author>
            <author fullname="B. de Medeiros">
              <organization/>
            </author>
            <author fullname="C. Mortimore">
              <organization/>
            </author>
            <date year="2014" month="November"/>
          </front>
        </reference>
        <reference anchor="CBOR-OID" target="https://www.ietf.org/archive/id/draft-ietf-cbor-tags-oid-08.txt">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="Carsten Bormann">
              <organization>Universität Bremen TZI</organization>
            </author>
            <date day="21" month="May" year="2021"/>
            <abstract>
              <t>   The Concise Binary Object Representation (CBOR, RFC 8949) is a data
   format whose design goals include the possibility of extremely small
   code size, fairly small message size, and extensibility without the
   need for version negotiation.

   The present document defines CBOR tags for object identifiers (OIDs).
   It is intended as the reference document for the IANA registration of
   the CBOR tags so defined.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cbor-tags-oid-08"/>
        </reference>
        <reference anchor="RATS-Architecture" target="https://www.ietf.org/archive/id/draft-ietf-rats-architecture-12.txt">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="23" month="April" year="2021"/>
            <abstract>
              <t>   In network protocol exchanges it is often useful for one end of a
   communication to know whether the other end is in an intended
   operating state.  This document provides an architectural overview of
   the entities involved that make such tests possible through the
   process of generating, conveying, and evaluating evidentiary claims.
   An attempt is made to provide for a model that is neutral toward
   processor architectures, the content of claims, and protocols.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-12"/>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122" target="https://www.rfc-editor.org/info/rfc4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach">
              <organization/>
            </author>
            <author fullname="M. Mealling" initials="M." surname="Mealling">
              <organization/>
            </author>
            <author fullname="R. Salz" initials="R." surname="Salz">
              <organization/>
            </author>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4949" target="https://www.rfc-editor.org/info/rfc4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey">
              <organization/>
            </author>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120" target="https://www.rfc-editor.org/info/rfc7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC                        Required", "IETF Review", or "Standards Action" policies apply.  This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation.  The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IDevID" target="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">
          <front>
            <title>IEEE Standard, "IEEE 802.1AR Secure Device Identifier"</title>
            <author>
              <organization/>
            </author>
            <date year="2009" month="December"/>
          </front>
        </reference>
        <reference anchor="ECMAScript" target="http://www.ecma-international.org/ecma-262/5.1/ECMA-262.pdf">
          <front>
            <title>Ecma International, "ECMAScript Language Specification, 5.1 Edition", ECMA Standard 262</title>
            <author>
              <organization/>
            </author>
            <date year="2011" month="June"/>
          </front>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/geolocation-API/#coordinates_interface">
          <front>
            <title>Geolocation API Specification 2nd Edition</title>
            <author>
              <organization>Worldwide Web Consortium</organization>
            </author>
            <date year="2018" month="January"/>
          </front>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://webstore.ansi.org/standards/ieee/ieee8022001r2007">
          <front>
            <title>IEEE Standard For Local And Metropolitan Area Networks Overview And Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2007"/>
          </front>
        </reference>
        <reference anchor="FIDO.Registry" target="https://fidoalliance.org/specs/common-specs/fido-registry-v2.1-ps-20191217.html">
          <front>
            <title>FIDO Registry of Predefined Values</title>
            <author>
              <organization>The FIDO Alliance</organization>
            </author>
            <date year="2019" month="December"/>
          </front>
        </reference>
        <reference anchor="FIPS-140" target="https://csrc.nist.gov/publications/detail/fips/140/2/final">
          <front>
            <title>Security Requirements for Cryptographic Modules</title>
            <author>
              <organization>National Institue of Standards</organization>
            </author>
            <date year="2001" month="May"/>
          </front>
        </reference>
        <reference anchor="Common.Criteria" target="https://www.commoncriteriaportal.org/cc/">
          <front>
            <title>Common Criteria for Information Technology Security Evaluation</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="April"/>
          </front>
        </reference>
      </references>
    </references>
    <section anchor="examples" numbered="true" toc="default">
      <name>Examples</name>
      <section anchor="very-simple-eat" numbered="true" toc="default">
        <name>Very Simple EAT</name>
        <t>This is shown in CBOR diagnostic form. Only the payload signed by COSE
is shown.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
{
    / issuer /           1: "joe",
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /            11: h'0198f50a4ff6c05861c8860d13a638ea',
    / secure-boot /     15: true,
    / debug-disable /   16: 3, / permanent-disable /
    / timestamp (iat) /  6: 1(1526542894)
}
]]></artwork>
      </section>
      <section anchor="example-with-submodules-nesting-and-security-levels" numbered="true" toc="default">
        <name>Example with Submodules, Nesting and Security Levels</name>
        <artwork name="" type="" align="left" alt=""><![CDATA[
{
    / nonce /                 10: h'948f8860d13a463e8e',
    / UEID /                  11: h'0198f50a4ff6c05861c8860d13a638ea',
    / secure-boot /           15: true,
    / debug-disable /         16: 3, / permanent-disable  /
    / timestamp (iat) /        6: 1(1526542894),
    / security-level /        14: 3, / secure restricted OS /
    / submods / 20: {
        / first submod, an Android Application /
        "Android App Foo" :  {
            / security-level /  14: 1 / unrestricted /
        },

        / 2nd submod, A nested EAT from a secure element /
        "Secure Element Eat" :
            / an embedded EAT, bytes of which are not shown /
            h'420123',

        / 3rd submod, information about Linux Android /
        "Linux Android": {
            / security-level /  14: 1 / unrestricted /
        }
    }
}
]]></artwork>
      </section>
    </section>
    <section anchor="ueid-design-rationale" numbered="true" toc="default">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability" numbered="true" toc="default">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion datadbase is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table align="center">
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and SW so this
simple approximation is used. See <xref target="BirthdayAttack" format="default"/>.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
    p = k^2 / 2n 
]]></artwork>
        <t>For this calculation:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
    p  Collision Probability
    n  Total population based on number of bits in UEID
    k  Population in a database
]]></artwork>
        <table align="center">
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's 
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of 
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
  t = 1 / ((k / 10) * p)
  
  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table align="center">
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid" numbered="true" toc="default">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122" format="default"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this 
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality 
random numbers, but do so by mapping into the overall UUID 
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>UUIDs seem to have been designed for scenarios where the implementor
does not have full control over the environment and uniqueness has to
be constructed from identifiers at hand. UEID takes the view that
hardware, software and/or manufacturing process directly implement
UEID in a simple and direct way. It takes the view that cryptographic
quality random number generators are readily available as they are
implemented in commonly used CPU hardware.</t>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts" numbered="true" toc="default">
      <name>Changes from Previous Drafts</name>
      <t>The following is a list of known changes from the previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences.</t>
      <section anchor="from-draft-rats-eat-01" numbered="true" toc="default">
        <name>From draft-rats-eat-01</name>
        <ul spacing="normal">
          <li>Added UEID design rationale appendix</li>
        </ul>
      </section>
      <section anchor="from-draft-mandyam-rats-eat-00" numbered="true" toc="default">
        <name>From draft-mandyam-rats-eat-00</name>
        <t>This is a fairly large change in the orientation of the document, but
no new claims have been added.</t>
        <ul spacing="normal">
          <li>Separate information and data model using CDDL.</li>
          <li>Say an EAT is a CWT or JWT</li>
          <li>Use a map to structure the boot_state and location claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-01" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-01</name>
        <ul spacing="normal">
          <li>Clarifications and corrections for OEMID claim</li>
          <li>Minor spelling and other fixes</li>
          <li>Add the nonce claim, clarify jti claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-02" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-02</name>
        <ul spacing="normal">
          <li>Roll all EUIs back into one UEID type</li>
          <li>UEIDs can be one of three lengths, 128, 192 and 256.</li>
          <li>Added appendix justifying UEID design and size.</li>
          <li>Submods part now includes nested eat tokens so they can be named and
there can be more tha one of them</li>
          <li>Lots of fixes to the CDDL</li>
          <li>Added security considerations</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-03" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-03</name>
        <ul spacing="normal">
          <li>Split boot_state into secure-boot and debug-disable claims</li>
          <li>Debug disable is an enumerated type rather than Booleans</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-04" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-04</name>
        <ul spacing="normal">
          <li>Change IMEI-based UEIDs to be encoded as a 14-byte string</li>
          <li>CDDL cleaned up some more</li>
          <li>CDDL allows for JWTs and UCCSs</li>
          <li>CWT format submodules are byte string wrapped</li>
          <li>Allows for JWT nested in CWT and vice versa</li>
          <li>Allows UCCS (unsigned CWTs) and JWT unsecured tokens</li>
          <li>Clarify tag usage when nesting tokens</li>
          <li>Add section on key inclusion</li>
          <li>Add hardware version claims</li>
          <li>Collected CDDL is now filled in. Other CDDL corrections.</li>
          <li>Rename debug-disable to debug-status; clarify that it is not extensible</li>
          <li>Security level claim is not extensible</li>
          <li>Improve specification of location claim and added a location privacy section</li>
          <li>Add intended use claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-05" numbered="true" toc="default">
        <name>From draft-ietf-rats-05</name>
        <ul spacing="normal">
          <li>CDDL format issues resolved</li>
          <li>Corrected reference to Location Privacy section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-06" numbered="true" toc="default">
        <name>From draft-ietf-rats-06</name>
        <ul spacing="normal">
          <li>Added boot-seed claim</li>
          <li>Rework CBOR interoperability section</li>
          <li>Added profiles claim and section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-07" numbered="true" toc="default">
        <name>From draft-ietf-rats-07</name>
        <ul spacing="normal">
          <li>Filled in IANA and other sections for possible preassignment of claim keys for well understood claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-08" numbered="true" toc="default">
        <name>From draft-ietf-rats-08</name>
        <ul spacing="normal">
          <li>Change profile claim to be either a URL or an OID rather than a test string</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-09" numbered="true" toc="default">
        <name>From draft-ietf-rats-09</name>
        <ul spacing="normal">
          <li>Added section on use for Evidence and Attestation Results</li>
        </ul>
      </section>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAFlyrWAAA+y9eXMjR5In+n9+ijRq3orUAOBZZ1vvLEVSEtV1bZHVtc/G
ZmQJIEGmCshE50EWulRj8zXWbN+Xm0/y/OdHHAmAKk337L431m27miIyM8LD
w8PDbx8Oh0nTZuX0p2xelfnztK27PCmWNf+raY8ODp4dHCWTrH2eNu00SabV
pMwW9OK0zmbtsMjb2bDO2maYZ+1wnrV50ybJ/c3z9O3p9VX6vqo/FOVN+n1d
dcvkq3RSlU1eNl3zPP16lTdf009NN14UTVNUZbta0riXF9ffJcvieZKmbTWx
9/iPab5sb+mXE/zdVHVb57PGv9GsFvEPk2qxzCZt8EY39r+VFX6qZ5N82rSr
eW6vtUWLP65v8/SipD9W6WmLZWUtwZheVx/yMt29OL3eS7LxuM7vnqf0R5LV
eUbAl21el3mbfLgnfBU3JRafBZ9PxlVNi54Sop6nRweHx8PDgyTr2tuqfp4M
06Ik8L8fpS9pR1bZguATZH9f1MX0NquDB1VNSP7vXTanFS3S63xyW1bz6qbI
G4JiMsJqCT85rfTRkyeP0pdVnd9WXZOn53VxlwM7tLTn6VVWpudFflMBF/kN
wfg8PcvmxayqyyJjJHZlW9Ob765O6c/lLZPJzt8fpk8fPU0fPzpMnxCR7NCj
fJEV8+fpQkD8b39qi9GfFL4R/ceW92KUvujK6XieTXO3wBdZV+flJI8e8RKv
8klXYxdoQ6p6lb54cebnmt/M/1vRzGnGYZ2DIsKJXo7Sb7P5nHCf11XjpnpZ
3HT5vPfo/yw2A2SeHD17FuByLFBuReaPo/T11+dVWd3cdh6bP+Z1vljFT758
hUdPnqXfZXVJpFp1N7fp2yqbuhUGD3g5U1Dnu8OT9MmLq2h9ZdHm0/QPdACm
1SJY6slJenj06Cg9fnx8+DRY6s/VlIFdX2pSVvWCjs9dDqbw9ruzo8PDZ/rP
p89O7J9PHh0+8f90vz49OLB3D48eu38+OXH/fHRk/zx+5v75+NB99uTExj1+
9pRGoH+///7qKQ9AfCmrb4C127ZdPt/fz7O6vR0W5awalTfZaFHM978n8vx+
f9mN58WEuUCz39ZPjx8djI7272+apyezohwtpzMZTrjPK34xm6eXi+wmJ7Kn
MejwL5dgKKc3dFRWsoc05Dx9my+J9lMZc0Anpain6cW0wBg8qnEY/HsopPAF
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
EKnq4hC/4pbHvdAEDPxWe+y+4dbzr7kgt/qPTUwb1/BQ3FSIRb0VO7WLTNf6
j8Low369hVQDylzH1nuOtbghQZSjT4MI4EHcwxt+/HxyW1bz6mbV644Y97tc
+SaX0rC1kOroBqiErYxd19ihVfqPkm82hnxgeVb4Qq4nLnqOVtuuyyKB5puc
SrlMRHcggJ5/kn0rZ8VNZy3hMIgvYKyLcu13TULiFXBIfm/DLGPbd2Sd+UDn
fNHk8zsUJcd1yaEH9r4Qx8D7YzlLcXMT3wCOeTWjSRkafADAQdhtmMHBxDG3
KH9JsqvzWdd3jnnZPgu3t8y7VqljxJHdzE9d3Q7kBoSz6kG0suVuq1y08zp+
OFSK6YazbrZhX5OBRDDlJdc0ClQYzuuTY2ag6IF6vbT4mCvpWAYsXfvFvZLF
Oa653o3alWURcjZZx1UEkX5alZtHiuRr0HUQ4CNdUzSFVYxV81zJNShc1R9o
rV3anZSOiScwrrNlFklbtwJU2+Zwr+sUkvGLLRHnS1Faq65RH18acvYAziJ8
pVfvw2gvzjKr0RlnwaWq5iQ6duIA/8umgdGBB/dlTFyO53rN81U4jRV3jJQg
6/v8w/tU5R+7MLRlJyduWJ6nCynPNn8S1xsfw1fGvVWQiOuAn0X11EMurPnG
LKDx2Ydcpn19QjW9n02YRQXKonMKjYy7p/braEc8YENVO3+OXlqLL+O51hmU
rySNV5O7KMxB4w5pWhjNVU6QRO1Ze59ZbpLgB3mmUcsJIVWi8hq8pp5quKy1
+tKbmz5zLEQz9aLmZBKcw20zXFk7v5Iw/ZHP69o7/Vof3INO9lIbhLjeYq4v
teKFc4QbVJZbo/mA3rHIQEKpRLciDY2To8NUqJUlJ4HLS20Md08BNj5IrNlV
Za8W4QgVevyBschSD02JijvWZd1fG0GWUpBsIvlRpeRXR5gNzr9JP07QvfjY
0u2QnuNekGpGDWduReF9sXzJMWradcZKYnOsrY/DHQTdjRor2SI3qtSb59yn
bHqXwQ/sm2ORVkvYQJ5h10pSrRMsRXbUYQTRC5gF8mZT+K2keOWyOEs7CiJ2
g1OXBR2k1+JlNRiha4LaA1omwUUT8k2M4TSCQeTsoKaxptosXLr+ptharfjp
MgpTeozEmgzIcQUIhPvoH7Mt4Db92k8uX5FLdHBTdx9J8JAcBFbbT31Uzfl/
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
C3Rba3Tt68JM+4FA7PQMvwBmfhsKkWYBAA==

-->

</rfc>
